{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/images/cssdom.jpg","path":"images/cssdom.jpg","modified":1,"renderable":0},{"_id":"source/images/htmldom.jpg","path":"images/htmldom.jpg","modified":1,"renderable":0},{"_id":"source/images/httpreqheader.jpeg","path":"images/httpreqheader.jpeg","modified":1,"renderable":0},{"_id":"source/images/httpresheader.jpeg","path":"images/httpresheader.jpeg","modified":1,"renderable":0},{"_id":"source/images/hy.png","path":"images/hy.png","modified":1,"renderable":0},{"_id":"source/images/hyclient.png","path":"images/hyclient.png","modified":1,"renderable":0},{"_id":"source/images/hycommunite.png","path":"images/hycommunite.png","modified":1,"renderable":0},{"_id":"source/images/hyserver.png","path":"images/hyserver.png","modified":1,"renderable":0},{"_id":"source/images/post01.png","path":"images/post01.png","modified":1,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.jpeg","path":"images/avatar.jpeg","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","path":"lib/canvas-ribbon/canvas-ribbon.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","path":"lib/needsharebutton/font-embedded.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","path":"lib/needsharebutton/needsharebutton.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","path":"lib/needsharebutton/needsharebutton.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","path":"lib/pace/pace-theme-barber-shop.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","path":"lib/pace/pace-theme-big-counter.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","path":"lib/pace/pace-theme-bounce.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","path":"lib/pace/pace-theme-center-atom.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","path":"lib/pace/pace-theme-center-circle.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","path":"lib/pace/pace-theme-center-radar.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","path":"lib/pace/pace-theme-center-simple.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","path":"lib/pace/pace-theme-corner-indicator.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","path":"lib/pace/pace-theme-fill-left.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","path":"lib/pace/pace-theme-flash.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","path":"lib/pace/pace-theme-loading-bar.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","path":"lib/pace/pace-theme-mac-osx.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","path":"lib/pace/pace-theme-minimal.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace.min.js","path":"lib/pace/pace.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","path":"lib/three/canvas_lines.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","path":"lib/three/canvas_sphere.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.css","path":"lib/Han/dist/han.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.css","path":"lib/Han/dist/han.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.js","path":"lib/Han/dist/han.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.js","path":"lib/Han/dist/han.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","path":"lib/Han/dist/font/han-space.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","path":"lib/Han/dist/font/han-space.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","path":"lib/Han/dist/font/han.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","path":"lib/Han/dist/font/han.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","path":"lib/Han/dist/font/han.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":1,"renderable":1}],"Cache":[{"_id":"source/.DS_Store","hash":"48e67398afe16f2c495df439f472a8ea75791aa0","modified":1584265863782},{"_id":"themes/next/.DS_Store","hash":"4bb330570616f1c45569eed5c2dfe5f3530a4186","modified":1566815902000},{"_id":"themes/next/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1566813514000},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1566813514000},{"_id":"themes/next/.gitattributes","hash":"44bd4729c74ccb88110804f41746fec07bf487d4","modified":1566813514000},{"_id":"themes/next/.gitignore","hash":"0b5c2ffd41f66eb1849d6426ba8cf9649eeed329","modified":1566813514000},{"_id":"themes/next/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1566813514000},{"_id":"themes/next/.javascript_ignore","hash":"8a224b381155f10e6eb132a4d815c5b52962a9d1","modified":1566813514000},{"_id":"themes/next/.jshintrc","hash":"9928f81bd822f6a8d67fdbc909b517178533bca9","modified":1566813514000},{"_id":"themes/next/.stylintrc","hash":"b28e24704a5d8de08346c45286574c8e76cc109f","modified":1566813514000},{"_id":"themes/next/.travis.yml","hash":"d60d4a5375fea23d53b2156b764a99b2e56fa660","modified":1566813514000},{"_id":"themes/next/LICENSE","hash":"f293bcfcdc06c0b77ba13570bb8af55eb5c059fd","modified":1566813514000},{"_id":"themes/next/README.cn.md","hash":"263b74f1ac7c0f6f9424b8cced4b0b320ae61efc","modified":1566813514000},{"_id":"themes/next/README.md","hash":"dcacd032d61f587bebabdbbdc86d8454345c61eb","modified":1567662486000},{"_id":"themes/next/_config.yml","hash":"c3938b8ec1ea7c0c790e0fe68a12ea1f1ee8d2ed","modified":1567662656000},{"_id":"themes/next/bower.json","hash":"0674f11d3d514e087a176da0e1d85c2286aa5fba","modified":1566813514000},{"_id":"themes/next/gulpfile.coffee","hash":"031bffc483e417b20e90eceb6cf358e7596d2e69","modified":1566813514000},{"_id":"themes/next/package.json","hash":"036d3a1346203d2f1a3958024df7f74e7ac07bfe","modified":1566813514000},{"_id":"source/_posts/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1584265863784},{"_id":"source/_posts/React.md","hash":"c53f42275b1e40795160a10072b9dfcd1c326b79","modified":1584265863785},{"_id":"source/_posts/browserCache.md","hash":"4434eeec739d9909b5e0168cbcaa11afd7ac9769","modified":1584265863786},{"_id":"source/_posts/browserWork.md","hash":"a43d1d61cb36eb9a89d3abb5077be443a8a0d3de","modified":1584265863787},{"_id":"source/_posts/build-blog.md","hash":"6f989a8c2c82bac7fdaf9fdc9dbe5bc240810cfd","modified":1584265863789},{"_id":"source/_posts/cookeVsSession.md","hash":"977553d0fa255bf9e4b45180e378cb1622f64822","modified":1584265863791},{"_id":"source/_posts/crossDomain.md","hash":"c914fe47bf5bbd06084cc41c77586b7298f6fb76","modified":1584265863792},{"_id":"source/_posts/essay.md","hash":"fdf4319b04f47eb19f014a676503b0bb61fc56f4","modified":1584284726453},{"_id":"source/_posts/frameDiff.md","hash":"bc1469eb9e313054228bc6d8d2bbb5e152a626b4","modified":1584265863795},{"_id":"source/_posts/helloBlog.md","hash":"b4380b51aff3d4c2983516e6195905f03bbf8641","modified":1584265863796},{"_id":"source/_posts/internet.md","hash":"7fcbd0939ba1181cb5f1a13ed07dbc6e22c32730","modified":1584265863797},{"_id":"source/_posts/jsClientCommunication.md","hash":"0b59e89a1d01c9c88ed6a92105c04d635917c8e9","modified":1584265863799},{"_id":"source/_posts/reactNative.md","hash":"654166af65f35d571950e25a9c0dd2d32cb34a05","modified":1584265863800},{"_id":"source/_posts/reactNativeStyle.md","hash":"45b2f4e14e042791dcfd364c130dc60073d17057","modified":1584265863801},{"_id":"source/categories/index.md","hash":"43a2d2f429b6f50536c7ffd55fe8bf22842f998f","modified":1584265863802},{"_id":"source/home/index.md","hash":"263cd58dc95ccaab9e121d643d2a9fa1923d4104","modified":1584265863804},{"_id":"source/images/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1584265863811},{"_id":"source/images/cssdom.jpg","hash":"443574b76481618b69498d176b5e11929cc75737","modified":1584265863813},{"_id":"source/images/htmldom.jpg","hash":"72f30ce1456a211c750966f0e7106abc65e45006","modified":1584265863815},{"_id":"source/images/httpreqheader.jpeg","hash":"8b2885e99e41b316427ea1b10512626f3c57d180","modified":1584265863817},{"_id":"source/images/httpresheader.jpeg","hash":"092d6311f7fd0787492002c105bfd147b9fec975","modified":1584265863819},{"_id":"source/images/hy.png","hash":"4938b157da78d785577c8acdf0c438fdf232804c","modified":1584265863820},{"_id":"source/images/hyclient.png","hash":"8eaf6d540289304b083d79ad89082f0a44a492db","modified":1584265863823},{"_id":"source/images/hycommunite.png","hash":"8934f30262e16dc08887f16659baea7ce291a139","modified":1584265863825},{"_id":"source/images/hyserver.png","hash":"313eb826ed2a98934344a342e67760618bf4d5e9","modified":1584265863827},{"_id":"source/images/post01.png","hash":"4769c9e159bae99cda3a5a8c940e63d58cbe15f7","modified":1584265863829},{"_id":"source/tags/index.md","hash":"be4ef766efe3dff033703696001b64757672057c","modified":1584265863832},{"_id":"source/title/index.md","hash":"076e293ab8696599b2093adc4120a7a0973c25f1","modified":1584265863835},{"_id":"themes/next/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1566813514000},{"_id":"themes/next/.git/config","hash":"bf7d1df65cf34d0f25a7184a58c37a09f72e4be7","modified":1566813514000},{"_id":"themes/next/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1566812604000},{"_id":"themes/next/.git/index","hash":"a3728bb60fe9f629bae138d462600bb5f295d43e","modified":1582993084000},{"_id":"themes/next/.git/packed-refs","hash":"3bb2e8e3fad44742d3e3bfadfb0b4d791fe9fe9e","modified":1566813514000},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"3b5eafd32abb718e56ccf8d1cee0607ad8ce611d","modified":1566813514000},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"50d48c47162817a3810a9d9ad51104e83947419a","modified":1566813514000},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"902f627155a65099e0a37842ff396a58d0dc306f","modified":1566813514000},{"_id":"themes/next/.github/browserstack_logo.png","hash":"a6c43887f64a7f48a2814e3714eaa1215e542037","modified":1566813514000},{"_id":"themes/next/languages/de.yml","hash":"057e7df11ddeb1c8c15a5d7c5ff29430d725ec6b","modified":1566813514000},{"_id":"themes/next/languages/default.yml","hash":"44ef3f26917f467459326c2c8be2f73e4d947f35","modified":1566813514000},{"_id":"themes/next/languages/en.yml","hash":"7e680d9bb8f3a3a9d1ba1c9d312b3d257183dded","modified":1566813514000},{"_id":"themes/next/languages/fr-FR.yml","hash":"7e4eb7011b8feee641cfb11c6e73180b0ded1c0f","modified":1566813514000},{"_id":"themes/next/languages/id.yml","hash":"b5de1ea66dd9ef54cac9a1440eaa4e3f5fc011f5","modified":1566813514000},{"_id":"themes/next/languages/it.yml","hash":"aa595f2bda029f73ef7bfa104b4c55c3f4e9fb4c","modified":1566813514000},{"_id":"themes/next/languages/ja.yml","hash":"3c76e16fd19b262864475faa6854b718bc08c4d8","modified":1566813514000},{"_id":"themes/next/languages/ko.yml","hash":"ea5b46056e73ebcee121d5551627af35cbffc900","modified":1566813514000},{"_id":"themes/next/languages/nl-NL.yml","hash":"edca4f3598857dbc3cbf19ed412213329b6edd47","modified":1566813514000},{"_id":"themes/next/languages/pt-BR.yml","hash":"b1694ae766ed90277bcc4daca4b1cfa19cdcb72b","modified":1566813514000},{"_id":"themes/next/languages/pt.yml","hash":"44b61f2d085b827b507909a0b8f8ce31c6ef5d04","modified":1566813514000},{"_id":"themes/next/languages/ru.yml","hash":"98ec6f0b7183282e11cffc7ff586ceb82400dd75","modified":1566813514000},{"_id":"themes/next/languages/vi.yml","hash":"fd08d3c8d2c62965a98ac420fdaf95e54c25d97c","modified":1566813514000},{"_id":"themes/next/languages/zh-Hans.yml","hash":"16ef56d0dea94638de7d200984c90ae56f26b4fe","modified":1566813514000},{"_id":"themes/next/languages/zh-hk.yml","hash":"9396f41ae76e4fef99b257c93c7354e661f6e0fa","modified":1566813514000},{"_id":"themes/next/languages/zh-tw.yml","hash":"50b71abb3ecc0686f9739e179e2f829cd074ecd9","modified":1566813514000},{"_id":"themes/next/layout/_layout.swig","hash":"da0929166674ea637e0ad454f85ad0d7bac4aff2","modified":1566813514000},{"_id":"themes/next/layout/archive.swig","hash":"f0a8225feafd971419837cdb4bcfec98a4a59b2f","modified":1566813514000},{"_id":"themes/next/layout/category.swig","hash":"4472255f4a3e3dd6d79201523a9526dcabdfbf18","modified":1566813514000},{"_id":"themes/next/layout/index.swig","hash":"783611349c941848a0e26ee2f1dc44dd14879bd1","modified":1566813514000},{"_id":"themes/next/layout/page.swig","hash":"969caaee05bdea725e99016eb63d810893a73e99","modified":1566813514000},{"_id":"themes/next/layout/post.swig","hash":"b3589a8e46288a10d20e41c7a5985d2493725aec","modified":1566813514000},{"_id":"themes/next/layout/schedule.swig","hash":"d86f8de4e118f8c4d778b285c140474084a271db","modified":1566813514000},{"_id":"themes/next/layout/tag.swig","hash":"7e0a7d7d832883eddb1297483ad22c184e4368de","modified":1566813514000},{"_id":"themes/next/scripts/merge-configs.js","hash":"81e86717ecfb775986b945d17f0a4ba27532ef07","modified":1566813514000},{"_id":"themes/next/scripts/merge.js","hash":"9130dabe6a674c54b535f322b17d75fe6081472f","modified":1566813514000},{"_id":"themes/next/source/.DS_Store","hash":"ce35992d9f880b6d4659235ff8fa0cbb5cf14422","modified":1567734690000},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1566813514000},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1566813514000},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1566813514000},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1566813514000},{"_id":"themes/next/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1566812604000},{"_id":"themes/next/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1566812604000},{"_id":"themes/next/.git/hooks/fsmonitor-watchman.sample","hash":"f7c0aa40cb0d620ff0bca3efe3521ec79e5d7156","modified":1566812604000},{"_id":"themes/next/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1566812604000},{"_id":"themes/next/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1566812604000},{"_id":"themes/next/.git/hooks/pre-commit.sample","hash":"33729ad4ce51acda35094e581e4088f3167a0af8","modified":1566812604000},{"_id":"themes/next/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1566812604000},{"_id":"themes/next/.git/hooks/pre-rebase.sample","hash":"288efdc0027db4cfd8b7c47c4aeddba09b6ded12","modified":1566812604000},{"_id":"themes/next/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1566812604000},{"_id":"themes/next/.git/hooks/prepare-commit-msg.sample","hash":"2584806ba147152ae005cb675aa4f01d5d068456","modified":1566812604000},{"_id":"themes/next/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1566812604000},{"_id":"themes/next/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1566812604000},{"_id":"themes/next/.git/logs/HEAD","hash":"68b1fe461826a71e7db6b35919b12dd416f25f73","modified":1566813514000},{"_id":"themes/next/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1566813514000},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1566813514000},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"31322a7f57936cf2dc62e824af5490da5354cf02","modified":1566813514000},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"665a928604f99d2ba7dc4a4a9150178229568cc6","modified":1566813514000},{"_id":"themes/next/layout/_macro/post.swig","hash":"446a35a2cd389f8cfc3aa38973a9b44ad0740134","modified":1566813514000},{"_id":"themes/next/layout/_macro/reward.swig","hash":"56e8d8556cf474c56ae1bef9cb7bbd26554adb07","modified":1566813514000},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"6a54c3c85ff6b19d275827a327abbf4bd99b2ebf","modified":1566813514000},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"39852700e4084ecccffa6d4669168e5cc0514c9e","modified":1566813514000},{"_id":"themes/next/layout/_partials/comments.swig","hash":"4a6f5b1792b2e5262b7fdab9a716b3108e2f09c7","modified":1566813514000},{"_id":"themes/next/layout/_partials/footer.swig","hash":"f45e3202f3e3d1ef7b4529a8a4eb3634baac5d03","modified":1567607186000},{"_id":"themes/next/layout/_partials/head.swig","hash":"6b94fe8f3279daea5623c49ef4bb35917ba57510","modified":1566813514000},{"_id":"themes/next/layout/_partials/header.swig","hash":"ed042be6252848058c90109236ec988e392d91d4","modified":1566813514000},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"1efd925d34a5d4ba2dc0838d9c86ba911e705fc9","modified":1566813514000},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1566813514000},{"_id":"themes/next/layout/_partials/search.swig","hash":"9dbd378e94abfcb3f864a5b8dbbf18d212ca2ee0","modified":1566813514000},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1566813514000},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1566813514000},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"a266f96ad06ee87bdeae6e105a4b53cd587bbd04","modified":1566813514000},{"_id":"themes/next/layout/_third-party/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1566813514000},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"7c04a42319d728be356746363aff8ea247791d24","modified":1566813514000},{"_id":"themes/next/layout/_third-party/mathjax.swig","hash":"6d25596d6a7c57700d37b607f8d9a62d89708683","modified":1566813514000},{"_id":"themes/next/layout/_third-party/needsharebutton.swig","hash":"5fe0447cc88a5a63b530cf0426f93c4634811876","modified":1566813514000},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"fc93b1a7e6aed0dddb1f3910142b48d8ab61174e","modified":1566813514000},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"22369026c87fc23893c35a7f250b42f3bb1b60f1","modified":1566813514000},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"1ddb2336a1a19b47af3017047012c01ec5f54529","modified":1566813514000},{"_id":"themes/next/scripts/tags/button.js","hash":"d023f10a00077f47082b0517e2ad666e6e994f60","modified":1566813514000},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1566813514000},{"_id":"themes/next/scripts/tags/exturl.js","hash":"8d7e60f60779bde050d20fd76f6fdc36fc85e06d","modified":1566813514000},{"_id":"themes/next/scripts/tags/full-image.js","hash":"8eeb3fb89540299bdbb799edfdfdac3743b50596","modified":1566813514000},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1566813514000},{"_id":"themes/next/scripts/tags/label.js","hash":"2f8f41a7316372f0d1ed6b51190dc4acd3e16fff","modified":1566813514000},{"_id":"themes/next/scripts/tags/lazy-image.js","hash":"eeeabede68cf263de9e6593ecf682f620da16f0a","modified":1566813514000},{"_id":"themes/next/scripts/tags/note.js","hash":"64de4e9d01cf3b491ffc7d53afdf148ee5ad9779","modified":1566813514000},{"_id":"themes/next/scripts/tags/tabs.js","hash":"5786545d51c38e8ca38d1bfc7dd9e946fc70a316","modified":1566813514000},{"_id":"themes/next/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1566813514000},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1566813514000},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1566813514000},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1566813514000},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1566813514000},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1566813514000},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1566813514000},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1566813514000},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1566813514000},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1566813514000},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1566813514000},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1566813514000},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1566813514000},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1566813514000},{"_id":"themes/next/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1566813514000},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1566813514000},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1566813514000},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1566813514000},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1566813514000},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1566813514000},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1566813514000},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1566813514000},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1566813514000},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1566813514000},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1566813514000},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1566813514000},{"_id":"themes/next/source/images/avatar.jpeg","hash":"0fb25159246213f8d5f695cff367d487f9fff9fe","modified":1566815776000},{"_id":"themes/next/.git/refs/heads/master","hash":"3c959678e3fe6e51e935526c19927d21443a3be3","modified":1566813514000},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1566813514000},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1566813514000},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"957701729b85fb0c5bfcf2fb99c19d54582f91ed","modified":1566813514000},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1566813514000},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1566813514000},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"23e23dc0f76ef3c631f24c65277adf7ea517b383","modified":1566813514000},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"1f1107468aaf03f7d0dcd7eb2b653e2813a675b4","modified":1566813514000},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1566813514000},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"048fd5e98149469f8c28c21ba3561a7a67952c9b","modified":1566813514000},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1566813514000},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1566813514000},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1566813514000},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"98df9d72e37dd071e882f2d5623c9d817815b139","modified":1566813514000},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"60426bf73f8a89ba61fb1be2df3ad5398e32c4ef","modified":1566813514000},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"deda6a814ed48debc694c4e0c466f06c127163d0","modified":1566813514000},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"18e7bef8923d83ea42df6c97405e515a876cede4","modified":1566813514000},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"8160b27bee0aa372c7dc7c8476c05bae57f58d0f","modified":1566813514000},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"a234c5cd1f75ca5731e814d0dbb92fdcf9240d1b","modified":1566813514000},{"_id":"themes/next/layout/_third-party/analytics/firestore.swig","hash":"1cd01c6e92ab1913d48e556a92bb4f28b6dc4996","modified":1566813514000},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"5d9943d74cc2e0a91badcf4f755c6de77eab193a","modified":1566813514000},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"5e9bb24c750b49513d9a65799e832f07410002ac","modified":1566813514000},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"fc65b9c98a0a8ab43a5e7aabff6c5f03838e09c8","modified":1566813514000},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1566813514000},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"0ddc94ed4ba0c19627765fdf1abc4d8efbe53d5a","modified":1566813514000},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"c3971fd154d781088e1cc665035f8561a4098f4c","modified":1566813514000},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"0e3378f7c39b2b0f69638290873ede6b6b6825c0","modified":1566813514000},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"c316758546dc9ba6c60cb4d852c17ca6bb6d6724","modified":1566813514000},{"_id":"themes/next/layout/_third-party/comments/duoshuo.swig","hash":"a356b2185d40914447fde817eb3d358ab6b3e4c3","modified":1566813514000},{"_id":"themes/next/layout/_third-party/comments/gitment.swig","hash":"10160daceaa6f1ecf632323d422ebe2caae49ddf","modified":1566813514000},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"3e8dc5c6c912628a37e3b5f886bec7b2e5ed14ea","modified":1566813514000},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"aa0629277d751c55c6d973e7691bf84af9b17a60","modified":1566813514000},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"8a2e393d2e49f7bf560766d8a07cd461bf3fce4f","modified":1566813514000},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"fcabbb241f894c9a6309c44e126cf3e8fea81fd4","modified":1566813514000},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"8b6650f77fe0a824c8075b2659e0403e0c78a705","modified":1566813514000},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"c747fb5c6b1f500e8f0c583e44195878b66e4e29","modified":1566813514000},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"385c066af96bee30be2459dbec8aae1f15d382f5","modified":1566813514000},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1566813514000},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"c057b17f79e8261680fbae8dc4e81317a127c799","modified":1566813514000},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"328d9a9696cc2ccf59c67d3c26000d569f46344c","modified":1566813514000},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"2aa5b7166a85a8aa34b17792ae4f58a5a96df6cc","modified":1566813514000},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"82f9055955920ed88a2ab6a20ab02169abb2c634","modified":1566813514000},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"9ab65361ba0a12a986edd103e56492644c2db0b8","modified":1566813514000},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"99fbb4686ea9a3e03a4726ed7cf4d8f529034452","modified":1566813514000},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"be087dcc060e8179f7e7f60ab4feb65817bd3d9f","modified":1566813514000},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"f29165e36489a87ba32d17dddfd2720d84e3f3ec","modified":1566813514000},{"_id":"themes/next/source/css/_variables/base.styl","hash":"50a5fe31674a16b611ebee011817a2174b2e5fa1","modified":1582948424000},{"_id":"themes/next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1566813514000},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1566813514000},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"034bc8113e0966fe2096ba5b56061bbf10ef0512","modified":1566813514000},{"_id":"themes/next/source/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1566813514000},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1566813514000},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1566813514000},{"_id":"themes/next/source/js/src/motion.js","hash":"754b294394f102c8fd9423a1789ddb1201677898","modified":1566813514000},{"_id":"themes/next/source/js/src/post-details.js","hash":"a13f45f7aa8291cf7244ec5ba93907d119c5dbdd","modified":1566813514000},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1566813514000},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1566813514000},{"_id":"themes/next/source/js/src/utils.js","hash":"9b1325801d27213083d1487a12b1a62b539ab6f8","modified":1566813514000},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1566813514000},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1566813514000},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"ff5915eb2596e890a2fc6697c864f861a1995ec0","modified":1566813514000},{"_id":"themes/next/source/lib/fancybox/.bower.json","hash":"cc40a9b11e52348e554c84e4a5c058056f6b7aeb","modified":1566813514000},{"_id":"themes/next/source/lib/fancybox/.gitattributes","hash":"2db21acfbd457452462f71cc4048a943ee61b8e0","modified":1566813514000},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1566813514000},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1566813514000},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1566813514000},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1566813514000},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1566813514000},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1566813514000},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1566813514000},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1566813514000},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1566813514000},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1566813514000},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1566813514000},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1566813514000},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1566813514000},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1566813514000},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1566813514000},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1566813514000},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","hash":"c39d37278c1e178838732af21bd26cd0baeddfe0","modified":1566813514000},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","hash":"3ef0020a1815ca6151ea4886cd0d37421ae3695c","modified":1566813514000},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","hash":"9885fd9bea5e7ebafc5b1de9d17be5e106248d96","modified":1566813514000},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1566813514000},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1566813514000},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1566813514000},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1566813514000},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1566813514000},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1566813514000},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1566813514000},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1566813514000},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1566813514000},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1566813514000},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1566813514000},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1566813514000},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1566813514000},{"_id":"themes/next/source/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1566813514000},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1566813514000},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1566813514000},{"_id":"themes/next/source/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1566813514000},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1566813514000},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1566813514000},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1566813514000},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1566813514000},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1566813514000},{"_id":"themes/next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1566813514000},{"_id":"themes/next/.git/logs/refs/heads/master","hash":"68b1fe461826a71e7db6b35919b12dd416f25f73","modified":1566813514000},{"_id":"themes/next/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1566813514000},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"28ff4ed6714c59124569ffcbd10f1173d53ca923","modified":1566813514000},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"ba698f49dd3a868c95b240d802f5b1b24ff287e4","modified":1566813514000},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"4719ce717962663c5c33ef97b1119a0b3a4ecdc3","modified":1566813514000},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"31050fc7a25784805b4843550151c93bfa55c9c8","modified":1566813514000},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"7e509c7c28c59f905b847304dd3d14d94b6f3b8e","modified":1566813514000},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1566813514000},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"a6bb5256be6195e76addbda12f4ed7c662d65e7a","modified":1566813514000},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"c5d48863f332ff8ce7c88dec2c893f709d7331d3","modified":1566813514000},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1566813514000},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1566813514000},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"f7c44b0ee46cf2cf82a4c9455ba8d8b55299976f","modified":1566813514000},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"9c25c75311e1bd4d68df031d3f2ae6d141a90766","modified":1566813514000},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"47a46583a1f3731157a3f53f80ed1ed5e2753e8e","modified":1566813514000},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1566813514000},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a280a583b7615e939aaddbf778f5c108ef8a2a6c","modified":1566813514000},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"64f5d56c08d74a338813df1265580ca0cbf0190b","modified":1566813514000},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"18c3336ee3d09bd2da6a876e1336539f03d5a973","modified":1566813514000},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1566813514000},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1566813514000},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1566813514000},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1566813514000},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"3b25edfa187d1bbbd0d38b50dd013cef54758abf","modified":1566813514000},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1566813514000},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9a5581a770af8964064fef7afd3e16963e45547f","modified":1566813514000},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"0efa036a15c18f5abb058b7c0fad1dd9ac5eed4c","modified":1566813514000},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1566813514000},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"4aac01962520d60b03b23022ab601ad4bd19c08c","modified":1566813514000},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1566813514000},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1566813514000},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"c4ed249798296f60bda02351fe6404fb3ef2126f","modified":1566813514000},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"5b93958239d3d2bf9aeaede44eced2434d784462","modified":1566813514000},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"215de948be49bcf14f06d500cef9f7035e406a43","modified":1566813514000},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1566813514000},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"9d16fa3c14ed76b71229f022b63a02fd0f580958","modified":1566813514000},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"69ecd6c97e7cdfd822ac8102b45ad0ede85050db","modified":1566813514000},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1566813514000},{"_id":"themes/next/source/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1566813514000},{"_id":"themes/next/source/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1566813514000},{"_id":"themes/next/source/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1566813514000},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1566813514000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1566813514000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1566813514000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1566813514000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1566813514000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1566813514000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1566813514000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1566813514000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1566813514000},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1566813514000},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1566813514000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1566813514000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1566813514000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1566813514000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1566813514000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1566813514000},{"_id":"themes/next/source/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1566813514000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1566813514000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1566813514000},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1566813514000},{"_id":"themes/next/.git/logs/refs/remotes/origin/HEAD","hash":"68b1fe461826a71e7db6b35919b12dd416f25f73","modified":1566813514000},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"7905a7f625702b45645d8be1268cb8af3f698c70","modified":1566813514000},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"ae1ca14e51de67b07dba8f61ec79ee0e2e344574","modified":1566813514000},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1566813514000},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"8a2421cb9005352905fae9d41a847ae56957247e","modified":1566813514000},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1566813514000},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1566813514000},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"96f32ea6c3265a3889e6abe57587f6e2a2a40dfb","modified":1566813514000},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"25dc25f61a232f03ca72472b7852f882448ec185","modified":1566813514000},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1566813514000},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"f5aa2ba3bfffc15475e7e72a55b5c9d18609fdf5","modified":1566813514000},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1566813514000},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"2039590632bba3943c39319d80ef630af7928185","modified":1566813514000},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1566813514000},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"e72a89e0f421444453e149ba32c77a64bd8e44e8","modified":1566813514000},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"0f7f522cc6bfb3401d5afd62b0fcdf48bb2d604b","modified":1566813514000},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"a82afbb72d83ee394aedc7b37ac0008a9823b4f4","modified":1566813514000},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"f54367c0feda6986c030cc4d15a0ca6ceea14bcb","modified":1566813514000},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1566813514000},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"535b3b4f8cb1eec2558e094320e7dfb01f94c0e7","modified":1566813514000},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1566813514000},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"aea21141015ca8c409d8b33e3e34ec505f464e93","modified":1566813514000},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"a5d8617a24d7cb6c5ad91ea621183ca2c0917331","modified":1566813514000},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"36332c8a91f089f545f3c3e8ea90d08aa4d6e60c","modified":1566813514000},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"017074ef58166e2d69c53bb7590a0e7a8947a1ed","modified":1566813514000},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1566813514000},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"d5a4e4fc17f1f7e7c3a61b52d8e2e9677e139de7","modified":1566813514000},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1566813514000},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"e4055a0d2cd2b0ad9dc55928e2f3e7bd4e499da3","modified":1566813514000},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"262debfd4442fa03d9919ceb88b948339df03fb0","modified":1566813514000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"0a6c0efffdf18bddbc1d1238feaed282b09cd0fe","modified":1566813514000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"920343e41c124221a17f050bbb989494d44f7a24","modified":1566813514000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"89dd4f8b1f1cce3ad46cf2256038472712387d02","modified":1566813514000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"efa5e5022e205b52786ce495d4879f5e7b8f84b2","modified":1566813514000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1566813514000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1566813514000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"12937cae17c96c74d5c58db6cb29de3b2dfa14a2","modified":1566813514000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"f7784aba0c1cd20d824c918c120012d57a5eaa2a","modified":1566813514000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"50305b6ad7d09d2ffa4854e39f41ec1f4fe984fd","modified":1566813514000},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1566813514000},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1566813514000},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"1b3cc9f4e5a7f6e05b4100e9990b37b20d4a2005","modified":1566813514000},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"37e951e734a252fe8a81f452b963df2ba90bfe90","modified":1566813514000},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1566813514000},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"4a457d265d62f287c63d48764ce45d9bcfc9ec5a","modified":1566813514000},{"_id":"themes/next/source/css/_common/components/tags/note-modern.styl","hash":"ee7528900578ef4753effe05b346381c40de5499","modified":1566813514000},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"32c9156bea5bac9e9ad0b4c08ffbca8b3d9aac4b","modified":1566813514000},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"4ab5deed8c3b0c338212380f678f8382672e1bcb","modified":1566813514000},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"ead0d0f2321dc71505788c7f689f92257cf14947","modified":1566813514000},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"fd42777b9125fd8969dc39d4f15473e2b91b4142","modified":1566813514000},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1566813514000},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"d4e6d8d7b34dc69994593c208f875ae8f7e8a3ae","modified":1566813514000},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1566813514000},{"_id":"themes/next/source/css/_common/components/third-party/gitment.styl","hash":"34935b40237c074be5f5e8818c14ccfd802b7439","modified":1566813514000},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"cce6772e2cdb4db85d35486ae4c6c59367fbdd40","modified":1566813514000},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1566813514000},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"d89c4b562b528e4746696b2ad8935764d133bdae","modified":1566813514000},{"_id":"themes/next/source/css/_common/components/third-party/needsharebutton.styl","hash":"a5e3e6b4b4b814a9fe40b34d784fed67d6d977fa","modified":1566813514000},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"1ccfbd4d0f5754b2dc2719a91245c95f547a7652","modified":1566813514000},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1566813514000},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1566813514000},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1566813514000},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1566813514000},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1566813514000},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1566813514000},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1566813514000},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1566813514000},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1566813514000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1566813514000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1566813514000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1566813514000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1566813514000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1566813514000},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1566813514000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1566813514000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1566813514000},{"_id":"themes/next/.git/objects/pack/pack-2094ec0f6437d1788a13f0aec9c47f4ed1a77de3.idx","hash":"6507e0cdf986f371d6d304387f789444a7663c56","modified":1566813514000},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1566813514000},{"_id":"themes/next/source/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1566813514000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1566813514000},{"_id":"themes/next/.git/objects/pack/pack-2094ec0f6437d1788a13f0aec9c47f4ed1a77de3.pack","hash":"2ab7a76d496119b851249983db6b500a45c77c47","modified":1566813514000}],"Category":[{"name":"前端","_id":"ck7t6o2v40004psuc4oqozfyv"},{"name":"网络","_id":"ck7t6o2vm000bpsucesocaxjk"},{"name":"笔记","_id":"ck7t6o2w9000npsucooc7gjzm"},{"name":"随笔","_id":"ck7t6o2x20014psuczeqlh49b"},{"name":"React Native","_id":"ck7t6o2xh001epsucrq83t1fr"}],"Data":[],"Page":[{"title":"分类","date":"2019-08-26T10:20:07.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ndate: 2019-08-26 18:20:07\ntype: \"categories\"\n---\n","updated":"2020-03-15T09:51:03.802Z","path":"categories/index.html","comments":1,"layout":"page","_id":"ck7t6o2us0001psuca2yytu4v","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"首页","date":"2019-09-05T02:58:38.000Z","type":"home","_content":"","source":"home/index.md","raw":"---\ntitle: 首页\ndate: 2019-09-05 10:58:38\ntype: home\n---\n","updated":"2020-03-15T09:51:03.804Z","path":"home/index.html","comments":1,"layout":"page","_id":"ck7t6o2uz0003psucpzcsrn6e","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"标签","date":"2019-09-05T02:57:35.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\ndate: 2019-09-05 10:57:35\ntype: \"tags\"\n---\n","updated":"2020-03-15T09:51:03.832Z","path":"tags/index.html","comments":1,"layout":"page","_id":"ck7t6o2vc0007psucjkoqampl","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"title","date":"2019-09-05T06:39:04.000Z","_content":"","source":"title/index.md","raw":"---\ntitle: title\ndate: 2019-09-05 14:39:04\n---\n","updated":"2020-03-15T09:51:03.835Z","path":"title/index.html","comments":1,"layout":"page","_id":"ck7t6o2vh0009psucve518sn9","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"React的那些事儿","date":"2019-10-04T08:28:07.000Z","_content":"\n## 前言\nReact的一些核心知识点，希望通过这篇文章好好总结下\n\n<h5> 1. React 生命周期有哪些，16版本生命周期发生了哪些变化？</h5>\n<table width=\"100%\">\n   <tr>\n      <td colspan=\"4\" style=\"text-align:center\">15生命周期</td>\n   </tr>\n   <tr>\n      <td>初始化阶段</td>\n      <td>挂载阶段</td>\n      <td width=\"35%\">更新阶段</td>\n      <td>卸载阶段</td>\n   </tr>\n   <tr>\n      <td>constructor 构造函数</td>\n      <td>componentWillMount 组件初始化渲染前调用</td>\n      <td width=\"35%\">componentWillReceiveProps  组件将要接收新props前调用</td>\n      <td>componentWillUnmount 组件卸载前调用</td>\n   </tr>\n   <tr>\n      <td>getDefaultProps   props默认值</td>\n      <td>render 组件渲染</td>\n      <td width=\"35%\">shouldComponentUpdate 组件是否需要更新</td>\n      <td></td>\n   </tr>\n   <tr>\n      <td>getInitialState       state 默认值</td>\n      <td>componentDidMount 组件挂载到 DOM 后调用</td>\n      <td width=\"35%\">componentWillUpdate 组件更新前调用</td>\n      <td></td>\n   </tr>\n   <tr>\n      <td></td>\n      <td></td>\n      <td>render 组件渲染</td>\n      <td></td>\n   </tr>\n   <tr>\n      <td></td>\n      <td></td>\n      <td>componentDidUpdate 组件更新后调用</td>\n      <td></td>\n   </tr>\n</table>\n\n\n<table>\n   <tr>\n      <td colspan=\"5\" style=\"text-align:center\">16生命周期</td>\n   </tr>\n   <tr>\n      <td>初始化阶段</td>\n      <td>挂载阶段</td>\n      <td>更新阶段</td>\n      <td>卸载阶段</td>\n      <td>错误处理</td>\n   </tr>\n   <tr>\n      <td>constructor 构造函数</td>\n      <td>\n      staticgetDerived\n      StateFromProps\n      (props,state)\n      </td>\n      <td>\n      staticgetDerived\n      StateFromProps\n      (props,state)</td>\n      <td>componentWillUnmount 组件卸载前调用</td>\n      <td>componentDidCatch</td>\n   </tr>\n   <tr>\n      <td>getDefaultProps   props默认值</td>\n      <td>render 组件渲染</td>\n      <td>shouldComponentUpdate 组件是否需要更新</td>\n      <td></td>\n      <td></td>\n   </tr>\n   <tr>\n      <td>getInitialState       state 默认值</td>\n      <td>componentDidMount 组件挂载到 DOM 后调用</td>\n      <td>getSnapshotBeforeUpdate(prevProps,prevState)</td>\n      <td></td>\n      <td></td>\n   </tr>\n   <tr>\n      <td></td>\n      <td></td>\n      <td>render 组件渲染</td>\n      <td></td>\n      <td></td>\n   </tr>\n   <tr>\n      <td></td>\n      <td></td>\n      <td>componentDidUpdate 组件更新后调用</td>\n      <td></td>\n      <td></td>\n   </tr>\n</table>\n\n+ getDerivedStateFromProps:组件每次被 rerender 的时候，包括在组件构建之后(虚拟 dom 之后，实际 dom 挂载之前)，每次获取新的 props 或 state 之后；每次接收新的props之后都会返回一个对象作为新的 state ，返回null则说明不需要更新state;配合componentDidUpdate,可以覆盖 componentWillReceiveProps 的所有用法\n\n+ getSnapshotBeforeUpdate:触发时间: update 发生的时候，在 render 之后，在组件 dom 渲染之前；返回一个值，作为 componentDidUpdate 的第三个参数；配合 componentDidUpdate , 可以覆盖 componentWillUpdate 的所有用法\n\n+ React16 新的生命周期弃用了 componentWillMount、componentWillReceivePorps，componentWillUpdate 新增了 getDerivedStateFromProps、getSnapshotBeforeUpdate 来代替弃用的三个钩子函数。\n\n+ React16 并没有删除这三个钩子函数，但是不能和新增的钩子函数混用,React17 将会删除这三个钩子函数，新增了对错误的处理（ componentDidCatch ）\n\n<h5> 2. setState是同步的还是异步的？</h5>\n\n* 生命周期和合成事件\n\n在 React 的生命周期和合成事件中,React仍然处于他的更新机制中,这时无论调用多少次 setState,都不会立即执行更新,而是将要更新的内容存入 _pendingStateQueue,将要更新的组件存入dirtyComponent。\n\n当上一次更新机制执行完毕,以生命周期为例,所有组件,即最顶层组件didmount后会将批处理标志设置为false。这时将取出dirtyComponent中的组件以及 _pendingStateQueue 中的 state 进行更新。这样就可以确保组件不会被重新渲染多次。\n\n所以,如上面的代码,当我们在执行setState后立即去获取state,这时是获取不到更新后的state的,因为处于React的批处理机制中,state被暂存起来,待批处理机制完成之后,统一进行更新。\n\n所以,setState本身并不是异步的,而是React的批处理机制给人一种异步的假象。\n\n* 异步代码和原生事件中\n\n如上面的代码,当我们在异步代码中调用setState时,根据 JavaScript 的异步机制,会将异步代码先暂存,等所有同步代码执行完毕后在执行,这时React的批处理机制已经走完,处理标志设被设置为false,这时再调用setState 即可立即执行更新，拿到更新后的结果。\n\n在原生事件中调用setState并不会出发React的批处理机制,所以立即能拿到最新结果。\n\n最佳实践\n\nsetState的第二个参数接收一个函数，该函数会在React的批处理机制完成之后调用,所以你想在调用setState后立即获取更新后的值,请在该回调函数中获取。\n\n[由实际问题探究setState的执行机制](https://mp.weixin.qq.com/s?__biz=Mzg2NDAzMjE5NQ==&mid=2247483989&idx=1&sn=d78f889c6e1d7d57058c9c232b1a620e&chksm=ce6ec6f9f9194fef681c79ee869bf58d5413132c73496710b2eb32c859a2249a895c2ce8a7cd&scene=21#wechat_redirect)\n\n* 为什么有时连续多次setState只有一次生效？\n\n\n原因就是React 会批处理机制中存储的多个setState进行合并,来看下React源码中的 _assign 函数,类似于 Object的 assign:\n\n如果传入的是对象,很明显会被合并成一次,所以上面的代码两次打印的结果是相同的:\n\n注意,assign 函数中对函数做了特殊处理,处理第一个参数传入的是函数,函数的参数 preState 是前一次合并后的结果，所以计算结果是准确的：\n\n最佳实践\n\nReact会对多次连续的 setState 进行合并，如果你想立即使用上次 setState 后的结果进行下一次 setState,可以让 setState 接收一个函数而不是一个对象。这个函数用上一个 state 作为第一个参数,将此次更新被应用时的 props 做为第二个参数。\n\n\n\n\n\n","source":"_posts/React.md","raw":"---\ntitle: React的那些事儿\ndate: 2019-10-04 16:28:07\ncategories: 前端\ntags: 前端\n---\n\n## 前言\nReact的一些核心知识点，希望通过这篇文章好好总结下\n\n<h5> 1. React 生命周期有哪些，16版本生命周期发生了哪些变化？</h5>\n<table width=\"100%\">\n   <tr>\n      <td colspan=\"4\" style=\"text-align:center\">15生命周期</td>\n   </tr>\n   <tr>\n      <td>初始化阶段</td>\n      <td>挂载阶段</td>\n      <td width=\"35%\">更新阶段</td>\n      <td>卸载阶段</td>\n   </tr>\n   <tr>\n      <td>constructor 构造函数</td>\n      <td>componentWillMount 组件初始化渲染前调用</td>\n      <td width=\"35%\">componentWillReceiveProps  组件将要接收新props前调用</td>\n      <td>componentWillUnmount 组件卸载前调用</td>\n   </tr>\n   <tr>\n      <td>getDefaultProps   props默认值</td>\n      <td>render 组件渲染</td>\n      <td width=\"35%\">shouldComponentUpdate 组件是否需要更新</td>\n      <td></td>\n   </tr>\n   <tr>\n      <td>getInitialState       state 默认值</td>\n      <td>componentDidMount 组件挂载到 DOM 后调用</td>\n      <td width=\"35%\">componentWillUpdate 组件更新前调用</td>\n      <td></td>\n   </tr>\n   <tr>\n      <td></td>\n      <td></td>\n      <td>render 组件渲染</td>\n      <td></td>\n   </tr>\n   <tr>\n      <td></td>\n      <td></td>\n      <td>componentDidUpdate 组件更新后调用</td>\n      <td></td>\n   </tr>\n</table>\n\n\n<table>\n   <tr>\n      <td colspan=\"5\" style=\"text-align:center\">16生命周期</td>\n   </tr>\n   <tr>\n      <td>初始化阶段</td>\n      <td>挂载阶段</td>\n      <td>更新阶段</td>\n      <td>卸载阶段</td>\n      <td>错误处理</td>\n   </tr>\n   <tr>\n      <td>constructor 构造函数</td>\n      <td>\n      staticgetDerived\n      StateFromProps\n      (props,state)\n      </td>\n      <td>\n      staticgetDerived\n      StateFromProps\n      (props,state)</td>\n      <td>componentWillUnmount 组件卸载前调用</td>\n      <td>componentDidCatch</td>\n   </tr>\n   <tr>\n      <td>getDefaultProps   props默认值</td>\n      <td>render 组件渲染</td>\n      <td>shouldComponentUpdate 组件是否需要更新</td>\n      <td></td>\n      <td></td>\n   </tr>\n   <tr>\n      <td>getInitialState       state 默认值</td>\n      <td>componentDidMount 组件挂载到 DOM 后调用</td>\n      <td>getSnapshotBeforeUpdate(prevProps,prevState)</td>\n      <td></td>\n      <td></td>\n   </tr>\n   <tr>\n      <td></td>\n      <td></td>\n      <td>render 组件渲染</td>\n      <td></td>\n      <td></td>\n   </tr>\n   <tr>\n      <td></td>\n      <td></td>\n      <td>componentDidUpdate 组件更新后调用</td>\n      <td></td>\n      <td></td>\n   </tr>\n</table>\n\n+ getDerivedStateFromProps:组件每次被 rerender 的时候，包括在组件构建之后(虚拟 dom 之后，实际 dom 挂载之前)，每次获取新的 props 或 state 之后；每次接收新的props之后都会返回一个对象作为新的 state ，返回null则说明不需要更新state;配合componentDidUpdate,可以覆盖 componentWillReceiveProps 的所有用法\n\n+ getSnapshotBeforeUpdate:触发时间: update 发生的时候，在 render 之后，在组件 dom 渲染之前；返回一个值，作为 componentDidUpdate 的第三个参数；配合 componentDidUpdate , 可以覆盖 componentWillUpdate 的所有用法\n\n+ React16 新的生命周期弃用了 componentWillMount、componentWillReceivePorps，componentWillUpdate 新增了 getDerivedStateFromProps、getSnapshotBeforeUpdate 来代替弃用的三个钩子函数。\n\n+ React16 并没有删除这三个钩子函数，但是不能和新增的钩子函数混用,React17 将会删除这三个钩子函数，新增了对错误的处理（ componentDidCatch ）\n\n<h5> 2. setState是同步的还是异步的？</h5>\n\n* 生命周期和合成事件\n\n在 React 的生命周期和合成事件中,React仍然处于他的更新机制中,这时无论调用多少次 setState,都不会立即执行更新,而是将要更新的内容存入 _pendingStateQueue,将要更新的组件存入dirtyComponent。\n\n当上一次更新机制执行完毕,以生命周期为例,所有组件,即最顶层组件didmount后会将批处理标志设置为false。这时将取出dirtyComponent中的组件以及 _pendingStateQueue 中的 state 进行更新。这样就可以确保组件不会被重新渲染多次。\n\n所以,如上面的代码,当我们在执行setState后立即去获取state,这时是获取不到更新后的state的,因为处于React的批处理机制中,state被暂存起来,待批处理机制完成之后,统一进行更新。\n\n所以,setState本身并不是异步的,而是React的批处理机制给人一种异步的假象。\n\n* 异步代码和原生事件中\n\n如上面的代码,当我们在异步代码中调用setState时,根据 JavaScript 的异步机制,会将异步代码先暂存,等所有同步代码执行完毕后在执行,这时React的批处理机制已经走完,处理标志设被设置为false,这时再调用setState 即可立即执行更新，拿到更新后的结果。\n\n在原生事件中调用setState并不会出发React的批处理机制,所以立即能拿到最新结果。\n\n最佳实践\n\nsetState的第二个参数接收一个函数，该函数会在React的批处理机制完成之后调用,所以你想在调用setState后立即获取更新后的值,请在该回调函数中获取。\n\n[由实际问题探究setState的执行机制](https://mp.weixin.qq.com/s?__biz=Mzg2NDAzMjE5NQ==&mid=2247483989&idx=1&sn=d78f889c6e1d7d57058c9c232b1a620e&chksm=ce6ec6f9f9194fef681c79ee869bf58d5413132c73496710b2eb32c859a2249a895c2ce8a7cd&scene=21#wechat_redirect)\n\n* 为什么有时连续多次setState只有一次生效？\n\n\n原因就是React 会批处理机制中存储的多个setState进行合并,来看下React源码中的 _assign 函数,类似于 Object的 assign:\n\n如果传入的是对象,很明显会被合并成一次,所以上面的代码两次打印的结果是相同的:\n\n注意,assign 函数中对函数做了特殊处理,处理第一个参数传入的是函数,函数的参数 preState 是前一次合并后的结果，所以计算结果是准确的：\n\n最佳实践\n\nReact会对多次连续的 setState 进行合并，如果你想立即使用上次 setState 后的结果进行下一次 setState,可以让 setState 接收一个函数而不是一个对象。这个函数用上一个 state 作为第一个参数,将此次更新被应用时的 props 做为第二个参数。\n\n\n\n\n\n","slug":"React","published":1,"updated":"2020-03-15T09:51:03.785Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7t6o2uk0000psucw0rcs6kb","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>React的一些核心知识点，希望通过这篇文章好好总结下</p>\n<h5> 1. React 生命周期有哪些，16版本生命周期发生了哪些变化？</h5>\n<table width=\"100%\">\n   <tr>\n      <td colspan=\"4\" style=\"text-align:center\">15生命周期</td>\n   </tr>\n   <tr>\n      <td>初始化阶段</td>\n      <td>挂载阶段</td>\n      <td width=\"35%\">更新阶段</td>\n      <td>卸载阶段</td>\n   </tr>\n   <tr>\n      <td>constructor 构造函数</td>\n      <td>componentWillMount 组件初始化渲染前调用</td>\n      <td width=\"35%\">componentWillReceiveProps  组件将要接收新props前调用</td>\n      <td>componentWillUnmount 组件卸载前调用</td>\n   </tr>\n   <tr>\n      <td>getDefaultProps   props默认值</td>\n      <td>render 组件渲染</td>\n      <td width=\"35%\">shouldComponentUpdate 组件是否需要更新</td>\n      <td></td>\n   </tr>\n   <tr>\n      <td>getInitialState       state 默认值</td>\n      <td>componentDidMount 组件挂载到 DOM 后调用</td>\n      <td width=\"35%\">componentWillUpdate 组件更新前调用</td>\n      <td></td>\n   </tr>\n   <tr>\n      <td></td>\n      <td></td>\n      <td>render 组件渲染</td>\n      <td></td>\n   </tr>\n   <tr>\n      <td></td>\n      <td></td>\n      <td>componentDidUpdate 组件更新后调用</td>\n      <td></td>\n   </tr>\n</table>\n\n\n<table>\n   <tr>\n      <td colspan=\"5\" style=\"text-align:center\">16生命周期</td>\n   </tr>\n   <tr>\n      <td>初始化阶段</td>\n      <td>挂载阶段</td>\n      <td>更新阶段</td>\n      <td>卸载阶段</td>\n      <td>错误处理</td>\n   </tr>\n   <tr>\n      <td>constructor 构造函数</td>\n      <td>\n      staticgetDerived\n      StateFromProps\n      (props,state)\n      </td>\n      <td>\n      staticgetDerived\n      StateFromProps\n      (props,state)</td>\n      <td>componentWillUnmount 组件卸载前调用</td>\n      <td>componentDidCatch</td>\n   </tr>\n   <tr>\n      <td>getDefaultProps   props默认值</td>\n      <td>render 组件渲染</td>\n      <td>shouldComponentUpdate 组件是否需要更新</td>\n      <td></td>\n      <td></td>\n   </tr>\n   <tr>\n      <td>getInitialState       state 默认值</td>\n      <td>componentDidMount 组件挂载到 DOM 后调用</td>\n      <td>getSnapshotBeforeUpdate(prevProps,prevState)</td>\n      <td></td>\n      <td></td>\n   </tr>\n   <tr>\n      <td></td>\n      <td></td>\n      <td>render 组件渲染</td>\n      <td></td>\n      <td></td>\n   </tr>\n   <tr>\n      <td></td>\n      <td></td>\n      <td>componentDidUpdate 组件更新后调用</td>\n      <td></td>\n      <td></td>\n   </tr>\n</table>\n\n<ul>\n<li><p>getDerivedStateFromProps:组件每次被 rerender 的时候，包括在组件构建之后(虚拟 dom 之后，实际 dom 挂载之前)，每次获取新的 props 或 state 之后；每次接收新的props之后都会返回一个对象作为新的 state ，返回null则说明不需要更新state;配合componentDidUpdate,可以覆盖 componentWillReceiveProps 的所有用法</p>\n</li>\n<li><p>getSnapshotBeforeUpdate:触发时间: update 发生的时候，在 render 之后，在组件 dom 渲染之前；返回一个值，作为 componentDidUpdate 的第三个参数；配合 componentDidUpdate , 可以覆盖 componentWillUpdate 的所有用法</p>\n</li>\n<li><p>React16 新的生命周期弃用了 componentWillMount、componentWillReceivePorps，componentWillUpdate 新增了 getDerivedStateFromProps、getSnapshotBeforeUpdate 来代替弃用的三个钩子函数。</p>\n</li>\n<li><p>React16 并没有删除这三个钩子函数，但是不能和新增的钩子函数混用,React17 将会删除这三个钩子函数，新增了对错误的处理（ componentDidCatch ）</p>\n</li>\n</ul>\n<h5> 2. setState是同步的还是异步的？</h5>\n\n<ul>\n<li>生命周期和合成事件</li>\n</ul>\n<p>在 React 的生命周期和合成事件中,React仍然处于他的更新机制中,这时无论调用多少次 setState,都不会立即执行更新,而是将要更新的内容存入 _pendingStateQueue,将要更新的组件存入dirtyComponent。</p>\n<p>当上一次更新机制执行完毕,以生命周期为例,所有组件,即最顶层组件didmount后会将批处理标志设置为false。这时将取出dirtyComponent中的组件以及 _pendingStateQueue 中的 state 进行更新。这样就可以确保组件不会被重新渲染多次。</p>\n<p>所以,如上面的代码,当我们在执行setState后立即去获取state,这时是获取不到更新后的state的,因为处于React的批处理机制中,state被暂存起来,待批处理机制完成之后,统一进行更新。</p>\n<p>所以,setState本身并不是异步的,而是React的批处理机制给人一种异步的假象。</p>\n<ul>\n<li>异步代码和原生事件中</li>\n</ul>\n<p>如上面的代码,当我们在异步代码中调用setState时,根据 JavaScript 的异步机制,会将异步代码先暂存,等所有同步代码执行完毕后在执行,这时React的批处理机制已经走完,处理标志设被设置为false,这时再调用setState 即可立即执行更新，拿到更新后的结果。</p>\n<p>在原生事件中调用setState并不会出发React的批处理机制,所以立即能拿到最新结果。</p>\n<p>最佳实践</p>\n<p>setState的第二个参数接收一个函数，该函数会在React的批处理机制完成之后调用,所以你想在调用setState后立即获取更新后的值,请在该回调函数中获取。</p>\n<p><a href=\"https://mp.weixin.qq.com/s?__biz=Mzg2NDAzMjE5NQ==&mid=2247483989&idx=1&sn=d78f889c6e1d7d57058c9c232b1a620e&chksm=ce6ec6f9f9194fef681c79ee869bf58d5413132c73496710b2eb32c859a2249a895c2ce8a7cd&scene=21#wechat_redirect\" target=\"_blank\" rel=\"noopener\">由实际问题探究setState的执行机制</a></p>\n<ul>\n<li>为什么有时连续多次setState只有一次生效？</li>\n</ul>\n<p>原因就是React 会批处理机制中存储的多个setState进行合并,来看下React源码中的 _assign 函数,类似于 Object的 assign:</p>\n<p>如果传入的是对象,很明显会被合并成一次,所以上面的代码两次打印的结果是相同的:</p>\n<p>注意,assign 函数中对函数做了特殊处理,处理第一个参数传入的是函数,函数的参数 preState 是前一次合并后的结果，所以计算结果是准确的：</p>\n<p>最佳实践</p>\n<p>React会对多次连续的 setState 进行合并，如果你想立即使用上次 setState 后的结果进行下一次 setState,可以让 setState 接收一个函数而不是一个对象。这个函数用上一个 state 作为第一个参数,将此次更新被应用时的 props 做为第二个参数。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>React的一些核心知识点，希望通过这篇文章好好总结下</p>\n<h5> 1. React 生命周期有哪些，16版本生命周期发生了哪些变化？</h5>\n<table width=\"100%\">\n   <tr>\n      <td colspan=\"4\" style=\"text-align:center\">15生命周期</td>\n   </tr>\n   <tr>\n      <td>初始化阶段</td>\n      <td>挂载阶段</td>\n      <td width=\"35%\">更新阶段</td>\n      <td>卸载阶段</td>\n   </tr>\n   <tr>\n      <td>constructor 构造函数</td>\n      <td>componentWillMount 组件初始化渲染前调用</td>\n      <td width=\"35%\">componentWillReceiveProps  组件将要接收新props前调用</td>\n      <td>componentWillUnmount 组件卸载前调用</td>\n   </tr>\n   <tr>\n      <td>getDefaultProps   props默认值</td>\n      <td>render 组件渲染</td>\n      <td width=\"35%\">shouldComponentUpdate 组件是否需要更新</td>\n      <td></td>\n   </tr>\n   <tr>\n      <td>getInitialState       state 默认值</td>\n      <td>componentDidMount 组件挂载到 DOM 后调用</td>\n      <td width=\"35%\">componentWillUpdate 组件更新前调用</td>\n      <td></td>\n   </tr>\n   <tr>\n      <td></td>\n      <td></td>\n      <td>render 组件渲染</td>\n      <td></td>\n   </tr>\n   <tr>\n      <td></td>\n      <td></td>\n      <td>componentDidUpdate 组件更新后调用</td>\n      <td></td>\n   </tr>\n</table>\n\n\n<table>\n   <tr>\n      <td colspan=\"5\" style=\"text-align:center\">16生命周期</td>\n   </tr>\n   <tr>\n      <td>初始化阶段</td>\n      <td>挂载阶段</td>\n      <td>更新阶段</td>\n      <td>卸载阶段</td>\n      <td>错误处理</td>\n   </tr>\n   <tr>\n      <td>constructor 构造函数</td>\n      <td>\n      staticgetDerived\n      StateFromProps\n      (props,state)\n      </td>\n      <td>\n      staticgetDerived\n      StateFromProps\n      (props,state)</td>\n      <td>componentWillUnmount 组件卸载前调用</td>\n      <td>componentDidCatch</td>\n   </tr>\n   <tr>\n      <td>getDefaultProps   props默认值</td>\n      <td>render 组件渲染</td>\n      <td>shouldComponentUpdate 组件是否需要更新</td>\n      <td></td>\n      <td></td>\n   </tr>\n   <tr>\n      <td>getInitialState       state 默认值</td>\n      <td>componentDidMount 组件挂载到 DOM 后调用</td>\n      <td>getSnapshotBeforeUpdate(prevProps,prevState)</td>\n      <td></td>\n      <td></td>\n   </tr>\n   <tr>\n      <td></td>\n      <td></td>\n      <td>render 组件渲染</td>\n      <td></td>\n      <td></td>\n   </tr>\n   <tr>\n      <td></td>\n      <td></td>\n      <td>componentDidUpdate 组件更新后调用</td>\n      <td></td>\n      <td></td>\n   </tr>\n</table>\n\n<ul>\n<li><p>getDerivedStateFromProps:组件每次被 rerender 的时候，包括在组件构建之后(虚拟 dom 之后，实际 dom 挂载之前)，每次获取新的 props 或 state 之后；每次接收新的props之后都会返回一个对象作为新的 state ，返回null则说明不需要更新state;配合componentDidUpdate,可以覆盖 componentWillReceiveProps 的所有用法</p>\n</li>\n<li><p>getSnapshotBeforeUpdate:触发时间: update 发生的时候，在 render 之后，在组件 dom 渲染之前；返回一个值，作为 componentDidUpdate 的第三个参数；配合 componentDidUpdate , 可以覆盖 componentWillUpdate 的所有用法</p>\n</li>\n<li><p>React16 新的生命周期弃用了 componentWillMount、componentWillReceivePorps，componentWillUpdate 新增了 getDerivedStateFromProps、getSnapshotBeforeUpdate 来代替弃用的三个钩子函数。</p>\n</li>\n<li><p>React16 并没有删除这三个钩子函数，但是不能和新增的钩子函数混用,React17 将会删除这三个钩子函数，新增了对错误的处理（ componentDidCatch ）</p>\n</li>\n</ul>\n<h5> 2. setState是同步的还是异步的？</h5>\n\n<ul>\n<li>生命周期和合成事件</li>\n</ul>\n<p>在 React 的生命周期和合成事件中,React仍然处于他的更新机制中,这时无论调用多少次 setState,都不会立即执行更新,而是将要更新的内容存入 _pendingStateQueue,将要更新的组件存入dirtyComponent。</p>\n<p>当上一次更新机制执行完毕,以生命周期为例,所有组件,即最顶层组件didmount后会将批处理标志设置为false。这时将取出dirtyComponent中的组件以及 _pendingStateQueue 中的 state 进行更新。这样就可以确保组件不会被重新渲染多次。</p>\n<p>所以,如上面的代码,当我们在执行setState后立即去获取state,这时是获取不到更新后的state的,因为处于React的批处理机制中,state被暂存起来,待批处理机制完成之后,统一进行更新。</p>\n<p>所以,setState本身并不是异步的,而是React的批处理机制给人一种异步的假象。</p>\n<ul>\n<li>异步代码和原生事件中</li>\n</ul>\n<p>如上面的代码,当我们在异步代码中调用setState时,根据 JavaScript 的异步机制,会将异步代码先暂存,等所有同步代码执行完毕后在执行,这时React的批处理机制已经走完,处理标志设被设置为false,这时再调用setState 即可立即执行更新，拿到更新后的结果。</p>\n<p>在原生事件中调用setState并不会出发React的批处理机制,所以立即能拿到最新结果。</p>\n<p>最佳实践</p>\n<p>setState的第二个参数接收一个函数，该函数会在React的批处理机制完成之后调用,所以你想在调用setState后立即获取更新后的值,请在该回调函数中获取。</p>\n<p><a href=\"https://mp.weixin.qq.com/s?__biz=Mzg2NDAzMjE5NQ==&mid=2247483989&idx=1&sn=d78f889c6e1d7d57058c9c232b1a620e&chksm=ce6ec6f9f9194fef681c79ee869bf58d5413132c73496710b2eb32c859a2249a895c2ce8a7cd&scene=21#wechat_redirect\" target=\"_blank\" rel=\"noopener\">由实际问题探究setState的执行机制</a></p>\n<ul>\n<li>为什么有时连续多次setState只有一次生效？</li>\n</ul>\n<p>原因就是React 会批处理机制中存储的多个setState进行合并,来看下React源码中的 _assign 函数,类似于 Object的 assign:</p>\n<p>如果传入的是对象,很明显会被合并成一次,所以上面的代码两次打印的结果是相同的:</p>\n<p>注意,assign 函数中对函数做了特殊处理,处理第一个参数传入的是函数,函数的参数 preState 是前一次合并后的结果，所以计算结果是准确的：</p>\n<p>最佳实践</p>\n<p>React会对多次连续的 setState 进行合并，如果你想立即使用上次 setState 后的结果进行下一次 setState,可以让 setState 接收一个函数而不是一个对象。这个函数用上一个 state 作为第一个参数,将此次更新被应用时的 props 做为第二个参数。</p>\n"},{"title":"浏览器缓存","date":"2020-03-02T02:43:46.000Z","_content":"\n\n","source":"_posts/browserCache.md","raw":"---\ntitle: 浏览器缓存\ndate: 2020-03-02 10:43:46\ncategories: 网络\ntags:\n    - 网络\n---\n\n\n","slug":"browserCache","published":1,"updated":"2020-03-15T09:51:03.786Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7t6o2uv0002psuc489zh4bz","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"浏览器工作原理","date":"2020-02-29T02:06:11.000Z","_content":"\n\n## 序\n在地址栏输入了`baidu.com`发生了什么\n\n## 一、DNS 解析\n客户端输入 url 后先会问本地 hosts 文件，你有没有`baidu.com`对应服务器 IP 的映射关系呀。\n如果 hosts 说有啊，不就是`135.128.111.65`么拿去，拿到 IP 后这次找寻就结束了。\n如果 hosts 说没有，那就要问本地 DNS 解析器有没有缓存，如果本地 DNS 解析器说有啊，前几天你刚查过，我这里有记录，拿到 IP 后这次找寻结束。\n如果本地 DNS 解析器没有，就要问本地 DNS 服务器（TCP/IP 中设置的首选 DNS 服务器），本地 DNS 找了下自己的配置，说有啊有啊我配的有拿去吧，拿到 IP 后本次找寻结束。\n如果本地 DNS 服务器没有配置但缓存了映射关系，那么调用映射，返回 IP，本次找寻结束。\n\n如果以上都没有找到，本地 DNS 会请求根 DNS 找寻：\n本地： 嘿，根 DNS，你知道`baidu.com`是谁管的么\n根 DNS： 你去找顶级域名服务器 A 吧，它负责管 `.com`\n本地： 嘿，A，你知道`baidu.com`是谁管的么\n顶级域 A: 你去找第二层域 B 吧，它负责 `baidu.com`\n本地： 嘿，B，你知道`baidu.com`谁负责么\n二级层域 B：知道呀，`135.128.111.65`就是\n\n至此完成 DNS 解析。\n（PS.如果是`www.baidu.com`, 重复上面的查找操作）\n\n[补充: DNS 预解析]\n`DNS Prefetching` 是让具有此属性的域名不需要用户点击链接就在后台解析，而域名解析和内容载入是串行的网络操作，所以这个方式能减少用户的等待时间，提升用户体验 。\n\n默认情况下浏览器会对页面中和当前域名（正在浏览网页的域名）不在同一个域的域名进行预获取，并且缓存结果，这就是隐式的 `DNS Prefetch`。如果想对页面中没有出现的域进行预获取，那么就要使用显示 `DNS Prefetch `了。\n\n```bash\n//用meta信息来告知浏览器, 当前页面要做DNS预解析\n<meta http-equiv=\"x-dns-prefetch-control\" content=\"on\">\n在页面header中使用link标签来强制对DNS预解析: \n<link rel=\"dns-prefetch\" href=\"//www.baidu.com\">\n\n```\n\n注意：`dns-prefetch`需慎用，多页面重复DNS预解析会增加重复DNS查询次数，因为有开发者指出 禁用DNS 预读取能节省每月100亿的DNS查询 。\n\n```bash\n//如果需要禁止隐式的 DNS Prefetch\n<meta http-equiv=\"x-dns-prefetch-control\" content=\"off\">\n```\n\n## 二、建立 TCP 连接\n这就是著名的三次握手了\n述:建立连接，C向S发送请求连接SYN数据包，S收到SYN返回ACK=1确认与SYN请求连接，C收到ACK发送最终的ACK=1给S\n\n客户端：喂喂喂，服务器你在吗，我给你发个 X。\n——第一次【SYN=1、ACK=0、seq=X】\n服务器：我在我在，我收到你的 X 了，你之后从 X+1 发吧，我给你发个 Y 你能收到么。\n——第二次【SYN=1、ACK=1、ack=X+1、seq=Y】\n客户端：好的，我这次从 X+1 开始发，我收到你的 Y 了。\n——第三次【SYN=1、ACK=1、seq=X+1、ack=Y+1】\n\n至此 TCP 连接建立完成，开始传输数据。\n\n#### 三次握手的目的\n建立数据安全连接\n\n#### 为啥二次握手不行，带来的问题？\n二次握手，如果连接存在网络延迟，过期的连接发送到了服务器（在延迟时间时，客户端已经和服务器完成了数据交互），服务器收到经过两次握手完成连接继续进行数据交互，由于客户端是没有响应的，此时服务器向客户端发送数据，会超时而继续发送，将导致不必要的错误和资源的浪费。\n\n#### 三次握手第二、三次失败会怎么样？\n服务器在没有收到客户端的ACK确认报文，会在一定的时间（可以设置）重新发送SYN和ACK=1的第二次握手信息，继续完成三次握手，但是在一定的尝试次数后，如果还是没有收到第三次握手的确认信息，则会放弃连接。\n\n## 三、传输数据\n\n与服务器已建立连接，此时客户端发起 http 请求，取得具体数据。\n\n### 请求报文\n一般 HTTP 请求报文有以下四个部分组成：\n#### 1. 请求行\n- 请求方法（GET、POST、PUT、DELETE、PATCH、HEAD、OPTIONS、TRACE）\n- 请求地址（例如：http://baidu.com:80/index ）\n> 协议、主机、端口、路径，通常 http 请求端口可省略，默认为 80\n\n- 协议版本（HTTP/1.0、HTTP/1.1、HTTP/2.0）\n\n#### 2. 请求头\n![](../images/httpreqheader.jpeg)\n\n#### 3. 请求空行\n- 表示请求头结束，下面是请求数据\n\n#### 4. 请求数据\n- 可选，如 get 请求可无请求数据\n\n\n### 响应报文\n响应报文也由四个部分组成\n#### 1. 状态行\n- 协议版本（HTTP/1.0、HTTP/1.1、HTTP/2.0）\n- 状态码\n     - 1xx:继续处理\n     - 2xx:成功【200】\n     - 3xx:重定向【304（Not Modified）】\n     - 4xx:客户端错误【400（Bad Request）、404（Not Found）、403（Forbidden）、401（Unauthorized）】\n     - 5xx:服务端错误【500】\n- 状态描述 （对状态码的简单描述）\n\n#### 2. 响应头\n![avatar](../images/httpresheader.jpeg)\n\n#### 3. 响应空行\n* 表示响应头结束，下面是响应数据\n\n#### 4. 响应数据\n* 以请求`http://baidu.com/index`为例，响应数据为 html 文档\n\n## 四、四次挥手\n述： C向S发送FIN请求断开数据包，S收到后向C发送ACK=1，并继续传输剩下的数据，发送完后在向C发送FIN断开连接，C收到之后，再向S发送ACK=1确认信号，S收到后马上关闭，C在一个时间后自动关闭\n\n客户端：我没有要发的报文了，我要关闭连接了\n——第一次【FIN=1、ACK=0、ack=Z、seq=X】\n服务器：我同意，我还没发完，你再等一会。\n——第二次【ACK=1、ack=X+1、seq=Z】\n服务器：我发完了，可以关闭连接了\n——第三次【FIN=1、ACK=1、ack=X、seq=Y】\n客户端：真的要关了，再见了。\n——第四次【ACK=1、seq=X、ack=Y】\n\n至此 TCP 连接断开\n\n\n#### 为啥连接是三次握手，断开连接却是要四次挥手？\n连接三次握手刚好可以保证安全连接；而四次挥手，是因为服务器在给客户端传输数据可能没有完成，所以第二次挥手会告诉客户端已经收到了客户端的断开请求，然后继续传输剩下没有完成的数据，传输完成后才发送第三次挥手FIN确认断开连接\n\n#### 第四次挥手时，为啥客户端要休2个时间才关闭客户端？\n确保在服务器收到了断开请求ACK，才断开。如果服务器没有收到请求，它会认为客户端没有收到它的FIN，所以它会在两个时间内会再次发送FIN请求，C收到后会重置时间，再发送一次ACK，反复\n\n\n\n## 五、浏览器解析 HTML\n\n#### 1.生成 DOM 树\n解析器输出解析树，采用堆栈的方式（遇到开始标签压入，遇到结束标签推出）将 html 文档解析成 dom 树\n\n```javascript\n<html>\n  <head>\n    <title>这里是title</title>\n  </head>\n  <body>\n    <div>\n      <p>这里是内容</p>\n    </div>\n  </body>\n</html>\n\n```\n\n解析如下:\n![avatar](../images/htmldom.jpg)\n\n\n#### 2.生成 CSSOM 树\n\n![avatar](../images/cssdom.jpg)\n\n\n#### 3.合并 DOM 树和 CSSOM 树\n合并成渲染树，渲染树只包含渲染网页所需的节点\n\n## 六、布局渲染\n\n根据渲染树计算 CSS 样式，即每个节点在页面中的大小和位置\nhtml 默认是流式布局，这里面有两个重要的概念：\n 1. 重排（reflow）： 节点尺寸发生变化\n 2. 重绘（repaint）：节点尺寸没变，例如颜色变了，但不影响整体布局\n通常说的 dom 操作的优化就是减少reflow和repaint","source":"_posts/browserWork.md","raw":"---\ntitle: 浏览器工作原理\ndate: 2020-02-29 10:06:11\ncategories: 前端\ntags:\n    - 前端\n---\n\n\n## 序\n在地址栏输入了`baidu.com`发生了什么\n\n## 一、DNS 解析\n客户端输入 url 后先会问本地 hosts 文件，你有没有`baidu.com`对应服务器 IP 的映射关系呀。\n如果 hosts 说有啊，不就是`135.128.111.65`么拿去，拿到 IP 后这次找寻就结束了。\n如果 hosts 说没有，那就要问本地 DNS 解析器有没有缓存，如果本地 DNS 解析器说有啊，前几天你刚查过，我这里有记录，拿到 IP 后这次找寻结束。\n如果本地 DNS 解析器没有，就要问本地 DNS 服务器（TCP/IP 中设置的首选 DNS 服务器），本地 DNS 找了下自己的配置，说有啊有啊我配的有拿去吧，拿到 IP 后本次找寻结束。\n如果本地 DNS 服务器没有配置但缓存了映射关系，那么调用映射，返回 IP，本次找寻结束。\n\n如果以上都没有找到，本地 DNS 会请求根 DNS 找寻：\n本地： 嘿，根 DNS，你知道`baidu.com`是谁管的么\n根 DNS： 你去找顶级域名服务器 A 吧，它负责管 `.com`\n本地： 嘿，A，你知道`baidu.com`是谁管的么\n顶级域 A: 你去找第二层域 B 吧，它负责 `baidu.com`\n本地： 嘿，B，你知道`baidu.com`谁负责么\n二级层域 B：知道呀，`135.128.111.65`就是\n\n至此完成 DNS 解析。\n（PS.如果是`www.baidu.com`, 重复上面的查找操作）\n\n[补充: DNS 预解析]\n`DNS Prefetching` 是让具有此属性的域名不需要用户点击链接就在后台解析，而域名解析和内容载入是串行的网络操作，所以这个方式能减少用户的等待时间，提升用户体验 。\n\n默认情况下浏览器会对页面中和当前域名（正在浏览网页的域名）不在同一个域的域名进行预获取，并且缓存结果，这就是隐式的 `DNS Prefetch`。如果想对页面中没有出现的域进行预获取，那么就要使用显示 `DNS Prefetch `了。\n\n```bash\n//用meta信息来告知浏览器, 当前页面要做DNS预解析\n<meta http-equiv=\"x-dns-prefetch-control\" content=\"on\">\n在页面header中使用link标签来强制对DNS预解析: \n<link rel=\"dns-prefetch\" href=\"//www.baidu.com\">\n\n```\n\n注意：`dns-prefetch`需慎用，多页面重复DNS预解析会增加重复DNS查询次数，因为有开发者指出 禁用DNS 预读取能节省每月100亿的DNS查询 。\n\n```bash\n//如果需要禁止隐式的 DNS Prefetch\n<meta http-equiv=\"x-dns-prefetch-control\" content=\"off\">\n```\n\n## 二、建立 TCP 连接\n这就是著名的三次握手了\n述:建立连接，C向S发送请求连接SYN数据包，S收到SYN返回ACK=1确认与SYN请求连接，C收到ACK发送最终的ACK=1给S\n\n客户端：喂喂喂，服务器你在吗，我给你发个 X。\n——第一次【SYN=1、ACK=0、seq=X】\n服务器：我在我在，我收到你的 X 了，你之后从 X+1 发吧，我给你发个 Y 你能收到么。\n——第二次【SYN=1、ACK=1、ack=X+1、seq=Y】\n客户端：好的，我这次从 X+1 开始发，我收到你的 Y 了。\n——第三次【SYN=1、ACK=1、seq=X+1、ack=Y+1】\n\n至此 TCP 连接建立完成，开始传输数据。\n\n#### 三次握手的目的\n建立数据安全连接\n\n#### 为啥二次握手不行，带来的问题？\n二次握手，如果连接存在网络延迟，过期的连接发送到了服务器（在延迟时间时，客户端已经和服务器完成了数据交互），服务器收到经过两次握手完成连接继续进行数据交互，由于客户端是没有响应的，此时服务器向客户端发送数据，会超时而继续发送，将导致不必要的错误和资源的浪费。\n\n#### 三次握手第二、三次失败会怎么样？\n服务器在没有收到客户端的ACK确认报文，会在一定的时间（可以设置）重新发送SYN和ACK=1的第二次握手信息，继续完成三次握手，但是在一定的尝试次数后，如果还是没有收到第三次握手的确认信息，则会放弃连接。\n\n## 三、传输数据\n\n与服务器已建立连接，此时客户端发起 http 请求，取得具体数据。\n\n### 请求报文\n一般 HTTP 请求报文有以下四个部分组成：\n#### 1. 请求行\n- 请求方法（GET、POST、PUT、DELETE、PATCH、HEAD、OPTIONS、TRACE）\n- 请求地址（例如：http://baidu.com:80/index ）\n> 协议、主机、端口、路径，通常 http 请求端口可省略，默认为 80\n\n- 协议版本（HTTP/1.0、HTTP/1.1、HTTP/2.0）\n\n#### 2. 请求头\n![](../images/httpreqheader.jpeg)\n\n#### 3. 请求空行\n- 表示请求头结束，下面是请求数据\n\n#### 4. 请求数据\n- 可选，如 get 请求可无请求数据\n\n\n### 响应报文\n响应报文也由四个部分组成\n#### 1. 状态行\n- 协议版本（HTTP/1.0、HTTP/1.1、HTTP/2.0）\n- 状态码\n     - 1xx:继续处理\n     - 2xx:成功【200】\n     - 3xx:重定向【304（Not Modified）】\n     - 4xx:客户端错误【400（Bad Request）、404（Not Found）、403（Forbidden）、401（Unauthorized）】\n     - 5xx:服务端错误【500】\n- 状态描述 （对状态码的简单描述）\n\n#### 2. 响应头\n![avatar](../images/httpresheader.jpeg)\n\n#### 3. 响应空行\n* 表示响应头结束，下面是响应数据\n\n#### 4. 响应数据\n* 以请求`http://baidu.com/index`为例，响应数据为 html 文档\n\n## 四、四次挥手\n述： C向S发送FIN请求断开数据包，S收到后向C发送ACK=1，并继续传输剩下的数据，发送完后在向C发送FIN断开连接，C收到之后，再向S发送ACK=1确认信号，S收到后马上关闭，C在一个时间后自动关闭\n\n客户端：我没有要发的报文了，我要关闭连接了\n——第一次【FIN=1、ACK=0、ack=Z、seq=X】\n服务器：我同意，我还没发完，你再等一会。\n——第二次【ACK=1、ack=X+1、seq=Z】\n服务器：我发完了，可以关闭连接了\n——第三次【FIN=1、ACK=1、ack=X、seq=Y】\n客户端：真的要关了，再见了。\n——第四次【ACK=1、seq=X、ack=Y】\n\n至此 TCP 连接断开\n\n\n#### 为啥连接是三次握手，断开连接却是要四次挥手？\n连接三次握手刚好可以保证安全连接；而四次挥手，是因为服务器在给客户端传输数据可能没有完成，所以第二次挥手会告诉客户端已经收到了客户端的断开请求，然后继续传输剩下没有完成的数据，传输完成后才发送第三次挥手FIN确认断开连接\n\n#### 第四次挥手时，为啥客户端要休2个时间才关闭客户端？\n确保在服务器收到了断开请求ACK，才断开。如果服务器没有收到请求，它会认为客户端没有收到它的FIN，所以它会在两个时间内会再次发送FIN请求，C收到后会重置时间，再发送一次ACK，反复\n\n\n\n## 五、浏览器解析 HTML\n\n#### 1.生成 DOM 树\n解析器输出解析树，采用堆栈的方式（遇到开始标签压入，遇到结束标签推出）将 html 文档解析成 dom 树\n\n```javascript\n<html>\n  <head>\n    <title>这里是title</title>\n  </head>\n  <body>\n    <div>\n      <p>这里是内容</p>\n    </div>\n  </body>\n</html>\n\n```\n\n解析如下:\n![avatar](../images/htmldom.jpg)\n\n\n#### 2.生成 CSSOM 树\n\n![avatar](../images/cssdom.jpg)\n\n\n#### 3.合并 DOM 树和 CSSOM 树\n合并成渲染树，渲染树只包含渲染网页所需的节点\n\n## 六、布局渲染\n\n根据渲染树计算 CSS 样式，即每个节点在页面中的大小和位置\nhtml 默认是流式布局，这里面有两个重要的概念：\n 1. 重排（reflow）： 节点尺寸发生变化\n 2. 重绘（repaint）：节点尺寸没变，例如颜色变了，但不影响整体布局\n通常说的 dom 操作的优化就是减少reflow和repaint","slug":"browserWork","published":1,"updated":"2020-03-15T09:51:03.787Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7t6o2v90006psuc4hgxbmql","content":"<h2 id=\"序\"><a href=\"#序\" class=\"headerlink\" title=\"序\"></a>序</h2><p>在地址栏输入了<code>baidu.com</code>发生了什么</p>\n<h2 id=\"一、DNS-解析\"><a href=\"#一、DNS-解析\" class=\"headerlink\" title=\"一、DNS 解析\"></a>一、DNS 解析</h2><p>客户端输入 url 后先会问本地 hosts 文件，你有没有<code>baidu.com</code>对应服务器 IP 的映射关系呀。<br>如果 hosts 说有啊，不就是<code>135.128.111.65</code>么拿去，拿到 IP 后这次找寻就结束了。<br>如果 hosts 说没有，那就要问本地 DNS 解析器有没有缓存，如果本地 DNS 解析器说有啊，前几天你刚查过，我这里有记录，拿到 IP 后这次找寻结束。<br>如果本地 DNS 解析器没有，就要问本地 DNS 服务器（TCP/IP 中设置的首选 DNS 服务器），本地 DNS 找了下自己的配置，说有啊有啊我配的有拿去吧，拿到 IP 后本次找寻结束。<br>如果本地 DNS 服务器没有配置但缓存了映射关系，那么调用映射，返回 IP，本次找寻结束。</p>\n<p>如果以上都没有找到，本地 DNS 会请求根 DNS 找寻：<br>本地： 嘿，根 DNS，你知道<code>baidu.com</code>是谁管的么<br>根 DNS： 你去找顶级域名服务器 A 吧，它负责管 <code>.com</code><br>本地： 嘿，A，你知道<code>baidu.com</code>是谁管的么<br>顶级域 A: 你去找第二层域 B 吧，它负责 <code>baidu.com</code><br>本地： 嘿，B，你知道<code>baidu.com</code>谁负责么<br>二级层域 B：知道呀，<code>135.128.111.65</code>就是</p>\n<p>至此完成 DNS 解析。<br>（PS.如果是<code>www.baidu.com</code>, 重复上面的查找操作）</p>\n<p>[补充: DNS 预解析]<br><code>DNS Prefetching</code> 是让具有此属性的域名不需要用户点击链接就在后台解析，而域名解析和内容载入是串行的网络操作，所以这个方式能减少用户的等待时间，提升用户体验 。</p>\n<p>默认情况下浏览器会对页面中和当前域名（正在浏览网页的域名）不在同一个域的域名进行预获取，并且缓存结果，这就是隐式的 <code>DNS Prefetch</code>。如果想对页面中没有出现的域进行预获取，那么就要使用显示 <code>DNS Prefetch</code>了。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//用meta信息来告知浏览器, 当前页面要做DNS预解析</span><br><span class=\"line\">&lt;meta http-equiv=<span class=\"string\">\"x-dns-prefetch-control\"</span> content=<span class=\"string\">\"on\"</span>&gt;</span><br><span class=\"line\">在页面header中使用link标签来强制对DNS预解析: </span><br><span class=\"line\">&lt;link rel=<span class=\"string\">\"dns-prefetch\"</span> href=<span class=\"string\">\"//www.baidu.com\"</span>&gt;</span><br></pre></td></tr></table></figure>\n\n<p>注意：<code>dns-prefetch</code>需慎用，多页面重复DNS预解析会增加重复DNS查询次数，因为有开发者指出 禁用DNS 预读取能节省每月100亿的DNS查询 。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//如果需要禁止隐式的 DNS Prefetch</span><br><span class=\"line\">&lt;meta http-equiv=<span class=\"string\">\"x-dns-prefetch-control\"</span> content=<span class=\"string\">\"off\"</span>&gt;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"二、建立-TCP-连接\"><a href=\"#二、建立-TCP-连接\" class=\"headerlink\" title=\"二、建立 TCP 连接\"></a>二、建立 TCP 连接</h2><p>这就是著名的三次握手了<br>述:建立连接，C向S发送请求连接SYN数据包，S收到SYN返回ACK=1确认与SYN请求连接，C收到ACK发送最终的ACK=1给S</p>\n<p>客户端：喂喂喂，服务器你在吗，我给你发个 X。<br>——第一次【SYN=1、ACK=0、seq=X】<br>服务器：我在我在，我收到你的 X 了，你之后从 X+1 发吧，我给你发个 Y 你能收到么。<br>——第二次【SYN=1、ACK=1、ack=X+1、seq=Y】<br>客户端：好的，我这次从 X+1 开始发，我收到你的 Y 了。<br>——第三次【SYN=1、ACK=1、seq=X+1、ack=Y+1】</p>\n<p>至此 TCP 连接建立完成，开始传输数据。</p>\n<h4 id=\"三次握手的目的\"><a href=\"#三次握手的目的\" class=\"headerlink\" title=\"三次握手的目的\"></a>三次握手的目的</h4><p>建立数据安全连接</p>\n<h4 id=\"为啥二次握手不行，带来的问题？\"><a href=\"#为啥二次握手不行，带来的问题？\" class=\"headerlink\" title=\"为啥二次握手不行，带来的问题？\"></a>为啥二次握手不行，带来的问题？</h4><p>二次握手，如果连接存在网络延迟，过期的连接发送到了服务器（在延迟时间时，客户端已经和服务器完成了数据交互），服务器收到经过两次握手完成连接继续进行数据交互，由于客户端是没有响应的，此时服务器向客户端发送数据，会超时而继续发送，将导致不必要的错误和资源的浪费。</p>\n<h4 id=\"三次握手第二、三次失败会怎么样？\"><a href=\"#三次握手第二、三次失败会怎么样？\" class=\"headerlink\" title=\"三次握手第二、三次失败会怎么样？\"></a>三次握手第二、三次失败会怎么样？</h4><p>服务器在没有收到客户端的ACK确认报文，会在一定的时间（可以设置）重新发送SYN和ACK=1的第二次握手信息，继续完成三次握手，但是在一定的尝试次数后，如果还是没有收到第三次握手的确认信息，则会放弃连接。</p>\n<h2 id=\"三、传输数据\"><a href=\"#三、传输数据\" class=\"headerlink\" title=\"三、传输数据\"></a>三、传输数据</h2><p>与服务器已建立连接，此时客户端发起 http 请求，取得具体数据。</p>\n<h3 id=\"请求报文\"><a href=\"#请求报文\" class=\"headerlink\" title=\"请求报文\"></a>请求报文</h3><p>一般 HTTP 请求报文有以下四个部分组成：</p>\n<h4 id=\"1-请求行\"><a href=\"#1-请求行\" class=\"headerlink\" title=\"1. 请求行\"></a>1. 请求行</h4><ul>\n<li><p>请求方法（GET、POST、PUT、DELETE、PATCH、HEAD、OPTIONS、TRACE）</p>\n</li>\n<li><p>请求地址（例如：<a href=\"http://baidu.com:80/index\" target=\"_blank\" rel=\"noopener\">http://baidu.com:80/index</a> ）</p>\n<blockquote>\n<p>协议、主机、端口、路径，通常 http 请求端口可省略，默认为 80</p>\n</blockquote>\n</li>\n<li><p>协议版本（HTTP/1.0、HTTP/1.1、HTTP/2.0）</p>\n</li>\n</ul>\n<h4 id=\"2-请求头\"><a href=\"#2-请求头\" class=\"headerlink\" title=\"2. 请求头\"></a>2. 请求头</h4><p><img src=\"../images/httpreqheader.jpeg\" alt></p>\n<h4 id=\"3-请求空行\"><a href=\"#3-请求空行\" class=\"headerlink\" title=\"3. 请求空行\"></a>3. 请求空行</h4><ul>\n<li>表示请求头结束，下面是请求数据</li>\n</ul>\n<h4 id=\"4-请求数据\"><a href=\"#4-请求数据\" class=\"headerlink\" title=\"4. 请求数据\"></a>4. 请求数据</h4><ul>\n<li>可选，如 get 请求可无请求数据</li>\n</ul>\n<h3 id=\"响应报文\"><a href=\"#响应报文\" class=\"headerlink\" title=\"响应报文\"></a>响应报文</h3><p>响应报文也由四个部分组成</p>\n<h4 id=\"1-状态行\"><a href=\"#1-状态行\" class=\"headerlink\" title=\"1. 状态行\"></a>1. 状态行</h4><ul>\n<li>协议版本（HTTP/1.0、HTTP/1.1、HTTP/2.0）</li>\n<li>状态码<ul>\n<li>1xx:继续处理</li>\n<li>2xx:成功【200】</li>\n<li>3xx:重定向【304（Not Modified）】</li>\n<li>4xx:客户端错误【400（Bad Request）、404（Not Found）、403（Forbidden）、401（Unauthorized）】</li>\n<li>5xx:服务端错误【500】</li>\n</ul>\n</li>\n<li>状态描述 （对状态码的简单描述）</li>\n</ul>\n<h4 id=\"2-响应头\"><a href=\"#2-响应头\" class=\"headerlink\" title=\"2. 响应头\"></a>2. 响应头</h4><p><img src=\"../images/httpresheader.jpeg\" alt=\"avatar\"></p>\n<h4 id=\"3-响应空行\"><a href=\"#3-响应空行\" class=\"headerlink\" title=\"3. 响应空行\"></a>3. 响应空行</h4><ul>\n<li>表示响应头结束，下面是响应数据</li>\n</ul>\n<h4 id=\"4-响应数据\"><a href=\"#4-响应数据\" class=\"headerlink\" title=\"4. 响应数据\"></a>4. 响应数据</h4><ul>\n<li>以请求<code>http://baidu.com/index</code>为例，响应数据为 html 文档</li>\n</ul>\n<h2 id=\"四、四次挥手\"><a href=\"#四、四次挥手\" class=\"headerlink\" title=\"四、四次挥手\"></a>四、四次挥手</h2><p>述： C向S发送FIN请求断开数据包，S收到后向C发送ACK=1，并继续传输剩下的数据，发送完后在向C发送FIN断开连接，C收到之后，再向S发送ACK=1确认信号，S收到后马上关闭，C在一个时间后自动关闭</p>\n<p>客户端：我没有要发的报文了，我要关闭连接了<br>——第一次【FIN=1、ACK=0、ack=Z、seq=X】<br>服务器：我同意，我还没发完，你再等一会。<br>——第二次【ACK=1、ack=X+1、seq=Z】<br>服务器：我发完了，可以关闭连接了<br>——第三次【FIN=1、ACK=1、ack=X、seq=Y】<br>客户端：真的要关了，再见了。<br>——第四次【ACK=1、seq=X、ack=Y】</p>\n<p>至此 TCP 连接断开</p>\n<h4 id=\"为啥连接是三次握手，断开连接却是要四次挥手？\"><a href=\"#为啥连接是三次握手，断开连接却是要四次挥手？\" class=\"headerlink\" title=\"为啥连接是三次握手，断开连接却是要四次挥手？\"></a>为啥连接是三次握手，断开连接却是要四次挥手？</h4><p>连接三次握手刚好可以保证安全连接；而四次挥手，是因为服务器在给客户端传输数据可能没有完成，所以第二次挥手会告诉客户端已经收到了客户端的断开请求，然后继续传输剩下没有完成的数据，传输完成后才发送第三次挥手FIN确认断开连接</p>\n<h4 id=\"第四次挥手时，为啥客户端要休2个时间才关闭客户端？\"><a href=\"#第四次挥手时，为啥客户端要休2个时间才关闭客户端？\" class=\"headerlink\" title=\"第四次挥手时，为啥客户端要休2个时间才关闭客户端？\"></a>第四次挥手时，为啥客户端要休2个时间才关闭客户端？</h4><p>确保在服务器收到了断开请求ACK，才断开。如果服务器没有收到请求，它会认为客户端没有收到它的FIN，所以它会在两个时间内会再次发送FIN请求，C收到后会重置时间，再发送一次ACK，反复</p>\n<h2 id=\"五、浏览器解析-HTML\"><a href=\"#五、浏览器解析-HTML\" class=\"headerlink\" title=\"五、浏览器解析 HTML\"></a>五、浏览器解析 HTML</h2><h4 id=\"1-生成-DOM-树\"><a href=\"#1-生成-DOM-树\" class=\"headerlink\" title=\"1.生成 DOM 树\"></a>1.生成 DOM 树</h4><p>解析器输出解析树，采用堆栈的方式（遇到开始标签压入，遇到结束标签推出）将 html 文档解析成 dom 树</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">  &lt;head&gt;</span><br><span class=\"line\">    &lt;title&gt;这里是title&lt;<span class=\"regexp\">/title&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  &lt;/</span>head&gt;</span><br><span class=\"line\">  &lt;body&gt;</span><br><span class=\"line\">    &lt;div&gt;</span><br><span class=\"line\">      &lt;p&gt;这里是内容&lt;<span class=\"regexp\">/p&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;/</span>div&gt;</span><br><span class=\"line\">  &lt;<span class=\"regexp\">/body&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;/</span>html&gt;</span><br></pre></td></tr></table></figure>\n\n<p>解析如下:<br><img src=\"../images/htmldom.jpg\" alt=\"avatar\"></p>\n<h4 id=\"2-生成-CSSOM-树\"><a href=\"#2-生成-CSSOM-树\" class=\"headerlink\" title=\"2.生成 CSSOM 树\"></a>2.生成 CSSOM 树</h4><p><img src=\"../images/cssdom.jpg\" alt=\"avatar\"></p>\n<h4 id=\"3-合并-DOM-树和-CSSOM-树\"><a href=\"#3-合并-DOM-树和-CSSOM-树\" class=\"headerlink\" title=\"3.合并 DOM 树和 CSSOM 树\"></a>3.合并 DOM 树和 CSSOM 树</h4><p>合并成渲染树，渲染树只包含渲染网页所需的节点</p>\n<h2 id=\"六、布局渲染\"><a href=\"#六、布局渲染\" class=\"headerlink\" title=\"六、布局渲染\"></a>六、布局渲染</h2><p>根据渲染树计算 CSS 样式，即每个节点在页面中的大小和位置<br>html 默认是流式布局，这里面有两个重要的概念：</p>\n<ol>\n<li>重排（reflow）： 节点尺寸发生变化</li>\n<li>重绘（repaint）：节点尺寸没变，例如颜色变了，但不影响整体布局<br>通常说的 dom 操作的优化就是减少reflow和repaint</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"序\"><a href=\"#序\" class=\"headerlink\" title=\"序\"></a>序</h2><p>在地址栏输入了<code>baidu.com</code>发生了什么</p>\n<h2 id=\"一、DNS-解析\"><a href=\"#一、DNS-解析\" class=\"headerlink\" title=\"一、DNS 解析\"></a>一、DNS 解析</h2><p>客户端输入 url 后先会问本地 hosts 文件，你有没有<code>baidu.com</code>对应服务器 IP 的映射关系呀。<br>如果 hosts 说有啊，不就是<code>135.128.111.65</code>么拿去，拿到 IP 后这次找寻就结束了。<br>如果 hosts 说没有，那就要问本地 DNS 解析器有没有缓存，如果本地 DNS 解析器说有啊，前几天你刚查过，我这里有记录，拿到 IP 后这次找寻结束。<br>如果本地 DNS 解析器没有，就要问本地 DNS 服务器（TCP/IP 中设置的首选 DNS 服务器），本地 DNS 找了下自己的配置，说有啊有啊我配的有拿去吧，拿到 IP 后本次找寻结束。<br>如果本地 DNS 服务器没有配置但缓存了映射关系，那么调用映射，返回 IP，本次找寻结束。</p>\n<p>如果以上都没有找到，本地 DNS 会请求根 DNS 找寻：<br>本地： 嘿，根 DNS，你知道<code>baidu.com</code>是谁管的么<br>根 DNS： 你去找顶级域名服务器 A 吧，它负责管 <code>.com</code><br>本地： 嘿，A，你知道<code>baidu.com</code>是谁管的么<br>顶级域 A: 你去找第二层域 B 吧，它负责 <code>baidu.com</code><br>本地： 嘿，B，你知道<code>baidu.com</code>谁负责么<br>二级层域 B：知道呀，<code>135.128.111.65</code>就是</p>\n<p>至此完成 DNS 解析。<br>（PS.如果是<code>www.baidu.com</code>, 重复上面的查找操作）</p>\n<p>[补充: DNS 预解析]<br><code>DNS Prefetching</code> 是让具有此属性的域名不需要用户点击链接就在后台解析，而域名解析和内容载入是串行的网络操作，所以这个方式能减少用户的等待时间，提升用户体验 。</p>\n<p>默认情况下浏览器会对页面中和当前域名（正在浏览网页的域名）不在同一个域的域名进行预获取，并且缓存结果，这就是隐式的 <code>DNS Prefetch</code>。如果想对页面中没有出现的域进行预获取，那么就要使用显示 <code>DNS Prefetch</code>了。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//用meta信息来告知浏览器, 当前页面要做DNS预解析</span><br><span class=\"line\">&lt;meta http-equiv=<span class=\"string\">\"x-dns-prefetch-control\"</span> content=<span class=\"string\">\"on\"</span>&gt;</span><br><span class=\"line\">在页面header中使用link标签来强制对DNS预解析: </span><br><span class=\"line\">&lt;link rel=<span class=\"string\">\"dns-prefetch\"</span> href=<span class=\"string\">\"//www.baidu.com\"</span>&gt;</span><br></pre></td></tr></table></figure>\n\n<p>注意：<code>dns-prefetch</code>需慎用，多页面重复DNS预解析会增加重复DNS查询次数，因为有开发者指出 禁用DNS 预读取能节省每月100亿的DNS查询 。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//如果需要禁止隐式的 DNS Prefetch</span><br><span class=\"line\">&lt;meta http-equiv=<span class=\"string\">\"x-dns-prefetch-control\"</span> content=<span class=\"string\">\"off\"</span>&gt;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"二、建立-TCP-连接\"><a href=\"#二、建立-TCP-连接\" class=\"headerlink\" title=\"二、建立 TCP 连接\"></a>二、建立 TCP 连接</h2><p>这就是著名的三次握手了<br>述:建立连接，C向S发送请求连接SYN数据包，S收到SYN返回ACK=1确认与SYN请求连接，C收到ACK发送最终的ACK=1给S</p>\n<p>客户端：喂喂喂，服务器你在吗，我给你发个 X。<br>——第一次【SYN=1、ACK=0、seq=X】<br>服务器：我在我在，我收到你的 X 了，你之后从 X+1 发吧，我给你发个 Y 你能收到么。<br>——第二次【SYN=1、ACK=1、ack=X+1、seq=Y】<br>客户端：好的，我这次从 X+1 开始发，我收到你的 Y 了。<br>——第三次【SYN=1、ACK=1、seq=X+1、ack=Y+1】</p>\n<p>至此 TCP 连接建立完成，开始传输数据。</p>\n<h4 id=\"三次握手的目的\"><a href=\"#三次握手的目的\" class=\"headerlink\" title=\"三次握手的目的\"></a>三次握手的目的</h4><p>建立数据安全连接</p>\n<h4 id=\"为啥二次握手不行，带来的问题？\"><a href=\"#为啥二次握手不行，带来的问题？\" class=\"headerlink\" title=\"为啥二次握手不行，带来的问题？\"></a>为啥二次握手不行，带来的问题？</h4><p>二次握手，如果连接存在网络延迟，过期的连接发送到了服务器（在延迟时间时，客户端已经和服务器完成了数据交互），服务器收到经过两次握手完成连接继续进行数据交互，由于客户端是没有响应的，此时服务器向客户端发送数据，会超时而继续发送，将导致不必要的错误和资源的浪费。</p>\n<h4 id=\"三次握手第二、三次失败会怎么样？\"><a href=\"#三次握手第二、三次失败会怎么样？\" class=\"headerlink\" title=\"三次握手第二、三次失败会怎么样？\"></a>三次握手第二、三次失败会怎么样？</h4><p>服务器在没有收到客户端的ACK确认报文，会在一定的时间（可以设置）重新发送SYN和ACK=1的第二次握手信息，继续完成三次握手，但是在一定的尝试次数后，如果还是没有收到第三次握手的确认信息，则会放弃连接。</p>\n<h2 id=\"三、传输数据\"><a href=\"#三、传输数据\" class=\"headerlink\" title=\"三、传输数据\"></a>三、传输数据</h2><p>与服务器已建立连接，此时客户端发起 http 请求，取得具体数据。</p>\n<h3 id=\"请求报文\"><a href=\"#请求报文\" class=\"headerlink\" title=\"请求报文\"></a>请求报文</h3><p>一般 HTTP 请求报文有以下四个部分组成：</p>\n<h4 id=\"1-请求行\"><a href=\"#1-请求行\" class=\"headerlink\" title=\"1. 请求行\"></a>1. 请求行</h4><ul>\n<li><p>请求方法（GET、POST、PUT、DELETE、PATCH、HEAD、OPTIONS、TRACE）</p>\n</li>\n<li><p>请求地址（例如：<a href=\"http://baidu.com:80/index\" target=\"_blank\" rel=\"noopener\">http://baidu.com:80/index</a> ）</p>\n<blockquote>\n<p>协议、主机、端口、路径，通常 http 请求端口可省略，默认为 80</p>\n</blockquote>\n</li>\n<li><p>协议版本（HTTP/1.0、HTTP/1.1、HTTP/2.0）</p>\n</li>\n</ul>\n<h4 id=\"2-请求头\"><a href=\"#2-请求头\" class=\"headerlink\" title=\"2. 请求头\"></a>2. 请求头</h4><p><img src=\"../images/httpreqheader.jpeg\" alt></p>\n<h4 id=\"3-请求空行\"><a href=\"#3-请求空行\" class=\"headerlink\" title=\"3. 请求空行\"></a>3. 请求空行</h4><ul>\n<li>表示请求头结束，下面是请求数据</li>\n</ul>\n<h4 id=\"4-请求数据\"><a href=\"#4-请求数据\" class=\"headerlink\" title=\"4. 请求数据\"></a>4. 请求数据</h4><ul>\n<li>可选，如 get 请求可无请求数据</li>\n</ul>\n<h3 id=\"响应报文\"><a href=\"#响应报文\" class=\"headerlink\" title=\"响应报文\"></a>响应报文</h3><p>响应报文也由四个部分组成</p>\n<h4 id=\"1-状态行\"><a href=\"#1-状态行\" class=\"headerlink\" title=\"1. 状态行\"></a>1. 状态行</h4><ul>\n<li>协议版本（HTTP/1.0、HTTP/1.1、HTTP/2.0）</li>\n<li>状态码<ul>\n<li>1xx:继续处理</li>\n<li>2xx:成功【200】</li>\n<li>3xx:重定向【304（Not Modified）】</li>\n<li>4xx:客户端错误【400（Bad Request）、404（Not Found）、403（Forbidden）、401（Unauthorized）】</li>\n<li>5xx:服务端错误【500】</li>\n</ul>\n</li>\n<li>状态描述 （对状态码的简单描述）</li>\n</ul>\n<h4 id=\"2-响应头\"><a href=\"#2-响应头\" class=\"headerlink\" title=\"2. 响应头\"></a>2. 响应头</h4><p><img src=\"../images/httpresheader.jpeg\" alt=\"avatar\"></p>\n<h4 id=\"3-响应空行\"><a href=\"#3-响应空行\" class=\"headerlink\" title=\"3. 响应空行\"></a>3. 响应空行</h4><ul>\n<li>表示响应头结束，下面是响应数据</li>\n</ul>\n<h4 id=\"4-响应数据\"><a href=\"#4-响应数据\" class=\"headerlink\" title=\"4. 响应数据\"></a>4. 响应数据</h4><ul>\n<li>以请求<code>http://baidu.com/index</code>为例，响应数据为 html 文档</li>\n</ul>\n<h2 id=\"四、四次挥手\"><a href=\"#四、四次挥手\" class=\"headerlink\" title=\"四、四次挥手\"></a>四、四次挥手</h2><p>述： C向S发送FIN请求断开数据包，S收到后向C发送ACK=1，并继续传输剩下的数据，发送完后在向C发送FIN断开连接，C收到之后，再向S发送ACK=1确认信号，S收到后马上关闭，C在一个时间后自动关闭</p>\n<p>客户端：我没有要发的报文了，我要关闭连接了<br>——第一次【FIN=1、ACK=0、ack=Z、seq=X】<br>服务器：我同意，我还没发完，你再等一会。<br>——第二次【ACK=1、ack=X+1、seq=Z】<br>服务器：我发完了，可以关闭连接了<br>——第三次【FIN=1、ACK=1、ack=X、seq=Y】<br>客户端：真的要关了，再见了。<br>——第四次【ACK=1、seq=X、ack=Y】</p>\n<p>至此 TCP 连接断开</p>\n<h4 id=\"为啥连接是三次握手，断开连接却是要四次挥手？\"><a href=\"#为啥连接是三次握手，断开连接却是要四次挥手？\" class=\"headerlink\" title=\"为啥连接是三次握手，断开连接却是要四次挥手？\"></a>为啥连接是三次握手，断开连接却是要四次挥手？</h4><p>连接三次握手刚好可以保证安全连接；而四次挥手，是因为服务器在给客户端传输数据可能没有完成，所以第二次挥手会告诉客户端已经收到了客户端的断开请求，然后继续传输剩下没有完成的数据，传输完成后才发送第三次挥手FIN确认断开连接</p>\n<h4 id=\"第四次挥手时，为啥客户端要休2个时间才关闭客户端？\"><a href=\"#第四次挥手时，为啥客户端要休2个时间才关闭客户端？\" class=\"headerlink\" title=\"第四次挥手时，为啥客户端要休2个时间才关闭客户端？\"></a>第四次挥手时，为啥客户端要休2个时间才关闭客户端？</h4><p>确保在服务器收到了断开请求ACK，才断开。如果服务器没有收到请求，它会认为客户端没有收到它的FIN，所以它会在两个时间内会再次发送FIN请求，C收到后会重置时间，再发送一次ACK，反复</p>\n<h2 id=\"五、浏览器解析-HTML\"><a href=\"#五、浏览器解析-HTML\" class=\"headerlink\" title=\"五、浏览器解析 HTML\"></a>五、浏览器解析 HTML</h2><h4 id=\"1-生成-DOM-树\"><a href=\"#1-生成-DOM-树\" class=\"headerlink\" title=\"1.生成 DOM 树\"></a>1.生成 DOM 树</h4><p>解析器输出解析树，采用堆栈的方式（遇到开始标签压入，遇到结束标签推出）将 html 文档解析成 dom 树</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">  &lt;head&gt;</span><br><span class=\"line\">    &lt;title&gt;这里是title&lt;<span class=\"regexp\">/title&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  &lt;/</span>head&gt;</span><br><span class=\"line\">  &lt;body&gt;</span><br><span class=\"line\">    &lt;div&gt;</span><br><span class=\"line\">      &lt;p&gt;这里是内容&lt;<span class=\"regexp\">/p&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;/</span>div&gt;</span><br><span class=\"line\">  &lt;<span class=\"regexp\">/body&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;/</span>html&gt;</span><br></pre></td></tr></table></figure>\n\n<p>解析如下:<br><img src=\"../images/htmldom.jpg\" alt=\"avatar\"></p>\n<h4 id=\"2-生成-CSSOM-树\"><a href=\"#2-生成-CSSOM-树\" class=\"headerlink\" title=\"2.生成 CSSOM 树\"></a>2.生成 CSSOM 树</h4><p><img src=\"../images/cssdom.jpg\" alt=\"avatar\"></p>\n<h4 id=\"3-合并-DOM-树和-CSSOM-树\"><a href=\"#3-合并-DOM-树和-CSSOM-树\" class=\"headerlink\" title=\"3.合并 DOM 树和 CSSOM 树\"></a>3.合并 DOM 树和 CSSOM 树</h4><p>合并成渲染树，渲染树只包含渲染网页所需的节点</p>\n<h2 id=\"六、布局渲染\"><a href=\"#六、布局渲染\" class=\"headerlink\" title=\"六、布局渲染\"></a>六、布局渲染</h2><p>根据渲染树计算 CSS 样式，即每个节点在页面中的大小和位置<br>html 默认是流式布局，这里面有两个重要的概念：</p>\n<ol>\n<li>重排（reflow）： 节点尺寸发生变化</li>\n<li>重绘（repaint）：节点尺寸没变，例如颜色变了，但不影响整体布局<br>通常说的 dom 操作的优化就是减少reflow和repaint</li>\n</ol>\n"},{"title":"从零搭建一个博客","date":"2019-09-05T06:36:21.000Z","_content":"## 前言\n搭建博客前，首先要知道几个配置文件和做好准备工作\n\n## 准备工作\n* 下载nodejs,npm并且安装\n* 下载git并且安装\n* 必须有一个github账号,没有去注册一个\n\n## 目录结构\n``` bash\nnode_modules：是依赖包\npublic：存放的是生成的页面\nscaffolds：命令生成文章等的模板\nsource：用命令创建的各种文章\nthemes：主题\n_config.yml：整个博客的配置\ndb.json：source解析所得到的\npackage.json：项目所需模块项目的配置信息\n```\n\n## 快速开始\n\n### 新建一篇文章—(在./source目录执行)\n\n``` bash\n$ hexo new \"build-blog\"\n```\n## github创建项目 \n在github上创建项目project,命名格式必须为:用户名.github.io(eg:acmwln.github.io)\n\n## 安装Hexo基本框架和Hexo基本命令\n\n```bash\nmkdir wangln_website #创建文件夹 比如我的叫wangln_website\nnpm install -g hexo #全局安装hexo\n\bcd wangln_website\nhexo init #初始化hexo框架\nhexo server #启动本地服务,默认端口是4000\nhexo clean #清理缓存文件\nhexo generate  #编译生成静态页面 简写hexo g\nhexo publish #发布草稿\nhexo delopy #发布静态文件 简写hexo d\n```\n\n访问 localhost:4000 就可以看到默认的页面\n\n## 博客关联到Github仓库\n\n修改wangln_website下面的_config.yml \n\n```bash\n## Docs: https://hexo.io/docs/deployment.html\ndeploy:\n  type: git\n  repo: https://github.com/用户名/用户名.github.io.git  ##eg.https://github.com/acmwln/acmwln.github.io.git\n  branch: master\n  message: blog\n\n```\n\n## 安装 hexo-deployer-git\n```bash\nnpm install hexo-deployer-git --save #安装 hexo-deployer-git,快速把代码托管到 GitHub 上\nhexo clean #清理缓存文件\nhexo generate  #编译生成静态页面 简写hexo g\nhexo delopy #自动提交,将 hexo 项目托管到 GitHub 上,简写 hexo d\n\n```\n\n打开 https://用户名.github.io就可以了(eg:https://acmwln.github.io)\n\n\n\n","source":"_posts/build-blog.md","raw":"---\ntitle: 从零搭建一个博客\ncategories: 笔记\ntags: 笔记\ndate: 2019-09-05 14:36:21\n---\n## 前言\n搭建博客前，首先要知道几个配置文件和做好准备工作\n\n## 准备工作\n* 下载nodejs,npm并且安装\n* 下载git并且安装\n* 必须有一个github账号,没有去注册一个\n\n## 目录结构\n``` bash\nnode_modules：是依赖包\npublic：存放的是生成的页面\nscaffolds：命令生成文章等的模板\nsource：用命令创建的各种文章\nthemes：主题\n_config.yml：整个博客的配置\ndb.json：source解析所得到的\npackage.json：项目所需模块项目的配置信息\n```\n\n## 快速开始\n\n### 新建一篇文章—(在./source目录执行)\n\n``` bash\n$ hexo new \"build-blog\"\n```\n## github创建项目 \n在github上创建项目project,命名格式必须为:用户名.github.io(eg:acmwln.github.io)\n\n## 安装Hexo基本框架和Hexo基本命令\n\n```bash\nmkdir wangln_website #创建文件夹 比如我的叫wangln_website\nnpm install -g hexo #全局安装hexo\n\bcd wangln_website\nhexo init #初始化hexo框架\nhexo server #启动本地服务,默认端口是4000\nhexo clean #清理缓存文件\nhexo generate  #编译生成静态页面 简写hexo g\nhexo publish #发布草稿\nhexo delopy #发布静态文件 简写hexo d\n```\n\n访问 localhost:4000 就可以看到默认的页面\n\n## 博客关联到Github仓库\n\n修改wangln_website下面的_config.yml \n\n```bash\n## Docs: https://hexo.io/docs/deployment.html\ndeploy:\n  type: git\n  repo: https://github.com/用户名/用户名.github.io.git  ##eg.https://github.com/acmwln/acmwln.github.io.git\n  branch: master\n  message: blog\n\n```\n\n## 安装 hexo-deployer-git\n```bash\nnpm install hexo-deployer-git --save #安装 hexo-deployer-git,快速把代码托管到 GitHub 上\nhexo clean #清理缓存文件\nhexo generate  #编译生成静态页面 简写hexo g\nhexo delopy #自动提交,将 hexo 项目托管到 GitHub 上,简写 hexo d\n\n```\n\n打开 https://用户名.github.io就可以了(eg:https://acmwln.github.io)\n\n\n\n","slug":"build-blog","published":1,"updated":"2020-03-15T09:51:03.789Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7t6o2ve0008psuckiriw14w","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>搭建博客前，首先要知道几个配置文件和做好准备工作</p>\n<h2 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h2><ul>\n<li>下载nodejs,npm并且安装</li>\n<li>下载git并且安装</li>\n<li>必须有一个github账号,没有去注册一个</li>\n</ul>\n<h2 id=\"目录结构\"><a href=\"#目录结构\" class=\"headerlink\" title=\"目录结构\"></a>目录结构</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">node_modules：是依赖包</span><br><span class=\"line\">public：存放的是生成的页面</span><br><span class=\"line\">scaffolds：命令生成文章等的模板</span><br><span class=\"line\"><span class=\"built_in\">source</span>：用命令创建的各种文章</span><br><span class=\"line\">themes：主题</span><br><span class=\"line\">_config.yml：整个博客的配置</span><br><span class=\"line\">db.json：<span class=\"built_in\">source</span>解析所得到的</span><br><span class=\"line\">package.json：项目所需模块项目的配置信息</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"快速开始\"><a href=\"#快速开始\" class=\"headerlink\" title=\"快速开始\"></a>快速开始</h2><h3 id=\"新建一篇文章—-在-source目录执行\"><a href=\"#新建一篇文章—-在-source目录执行\" class=\"headerlink\" title=\"新建一篇文章—(在./source目录执行)\"></a>新建一篇文章—(在./source目录执行)</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"build-blog\"</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"github创建项目\"><a href=\"#github创建项目\" class=\"headerlink\" title=\"github创建项目\"></a>github创建项目</h2><p>在github上创建项目project,命名格式必须为:用户名.github.io(eg:acmwln.github.io)</p>\n<h2 id=\"安装Hexo基本框架和Hexo基本命令\"><a href=\"#安装Hexo基本框架和Hexo基本命令\" class=\"headerlink\" title=\"安装Hexo基本框架和Hexo基本命令\"></a>安装Hexo基本框架和Hexo基本命令</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir wangln_website <span class=\"comment\">#创建文件夹 比如我的叫wangln_website</span></span><br><span class=\"line\">npm install -g hexo <span class=\"comment\">#全局安装hexo</span></span><br><span class=\"line\">\b<span class=\"built_in\">cd</span> wangln_website</span><br><span class=\"line\">hexo init <span class=\"comment\">#初始化hexo框架</span></span><br><span class=\"line\">hexo server <span class=\"comment\">#启动本地服务,默认端口是4000</span></span><br><span class=\"line\">hexo clean <span class=\"comment\">#清理缓存文件</span></span><br><span class=\"line\">hexo generate  <span class=\"comment\">#编译生成静态页面 简写hexo g</span></span><br><span class=\"line\">hexo publish <span class=\"comment\">#发布草稿</span></span><br><span class=\"line\">hexo delopy <span class=\"comment\">#发布静态文件 简写hexo d</span></span><br></pre></td></tr></table></figure>\n\n<p>访问 localhost:4000 就可以看到默认的页面</p>\n<h2 id=\"博客关联到Github仓库\"><a href=\"#博客关联到Github仓库\" class=\"headerlink\" title=\"博客关联到Github仓库\"></a>博客关联到Github仓库</h2><p>修改wangln_website下面的_config.yml </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">## Docs: https://hexo.io/docs/deployment.html</span></span><br><span class=\"line\">deploy:</span><br><span class=\"line\">  <span class=\"built_in\">type</span>: git</span><br><span class=\"line\">  repo: https://github.com/用户名/用户名.github.io.git  <span class=\"comment\">##eg.https://github.com/acmwln/acmwln.github.io.git</span></span><br><span class=\"line\">  branch: master</span><br><span class=\"line\">  message: blog</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"安装-hexo-deployer-git\"><a href=\"#安装-hexo-deployer-git\" class=\"headerlink\" title=\"安装 hexo-deployer-git\"></a>安装 hexo-deployer-git</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-deployer-git --save <span class=\"comment\">#安装 hexo-deployer-git,快速把代码托管到 GitHub 上</span></span><br><span class=\"line\">hexo clean <span class=\"comment\">#清理缓存文件</span></span><br><span class=\"line\">hexo generate  <span class=\"comment\">#编译生成静态页面 简写hexo g</span></span><br><span class=\"line\">hexo delopy <span class=\"comment\">#自动提交,将 hexo 项目托管到 GitHub 上,简写 hexo d</span></span><br></pre></td></tr></table></figure>\n\n<p>打开 https://用户名.github.io就可以了(eg:<a href=\"https://acmwln.github.io\" target=\"_blank\" rel=\"noopener\">https://acmwln.github.io</a>)</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>搭建博客前，首先要知道几个配置文件和做好准备工作</p>\n<h2 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h2><ul>\n<li>下载nodejs,npm并且安装</li>\n<li>下载git并且安装</li>\n<li>必须有一个github账号,没有去注册一个</li>\n</ul>\n<h2 id=\"目录结构\"><a href=\"#目录结构\" class=\"headerlink\" title=\"目录结构\"></a>目录结构</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">node_modules：是依赖包</span><br><span class=\"line\">public：存放的是生成的页面</span><br><span class=\"line\">scaffolds：命令生成文章等的模板</span><br><span class=\"line\"><span class=\"built_in\">source</span>：用命令创建的各种文章</span><br><span class=\"line\">themes：主题</span><br><span class=\"line\">_config.yml：整个博客的配置</span><br><span class=\"line\">db.json：<span class=\"built_in\">source</span>解析所得到的</span><br><span class=\"line\">package.json：项目所需模块项目的配置信息</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"快速开始\"><a href=\"#快速开始\" class=\"headerlink\" title=\"快速开始\"></a>快速开始</h2><h3 id=\"新建一篇文章—-在-source目录执行\"><a href=\"#新建一篇文章—-在-source目录执行\" class=\"headerlink\" title=\"新建一篇文章—(在./source目录执行)\"></a>新建一篇文章—(在./source目录执行)</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"build-blog\"</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"github创建项目\"><a href=\"#github创建项目\" class=\"headerlink\" title=\"github创建项目\"></a>github创建项目</h2><p>在github上创建项目project,命名格式必须为:用户名.github.io(eg:acmwln.github.io)</p>\n<h2 id=\"安装Hexo基本框架和Hexo基本命令\"><a href=\"#安装Hexo基本框架和Hexo基本命令\" class=\"headerlink\" title=\"安装Hexo基本框架和Hexo基本命令\"></a>安装Hexo基本框架和Hexo基本命令</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir wangln_website <span class=\"comment\">#创建文件夹 比如我的叫wangln_website</span></span><br><span class=\"line\">npm install -g hexo <span class=\"comment\">#全局安装hexo</span></span><br><span class=\"line\">\b<span class=\"built_in\">cd</span> wangln_website</span><br><span class=\"line\">hexo init <span class=\"comment\">#初始化hexo框架</span></span><br><span class=\"line\">hexo server <span class=\"comment\">#启动本地服务,默认端口是4000</span></span><br><span class=\"line\">hexo clean <span class=\"comment\">#清理缓存文件</span></span><br><span class=\"line\">hexo generate  <span class=\"comment\">#编译生成静态页面 简写hexo g</span></span><br><span class=\"line\">hexo publish <span class=\"comment\">#发布草稿</span></span><br><span class=\"line\">hexo delopy <span class=\"comment\">#发布静态文件 简写hexo d</span></span><br></pre></td></tr></table></figure>\n\n<p>访问 localhost:4000 就可以看到默认的页面</p>\n<h2 id=\"博客关联到Github仓库\"><a href=\"#博客关联到Github仓库\" class=\"headerlink\" title=\"博客关联到Github仓库\"></a>博客关联到Github仓库</h2><p>修改wangln_website下面的_config.yml </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">## Docs: https://hexo.io/docs/deployment.html</span></span><br><span class=\"line\">deploy:</span><br><span class=\"line\">  <span class=\"built_in\">type</span>: git</span><br><span class=\"line\">  repo: https://github.com/用户名/用户名.github.io.git  <span class=\"comment\">##eg.https://github.com/acmwln/acmwln.github.io.git</span></span><br><span class=\"line\">  branch: master</span><br><span class=\"line\">  message: blog</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"安装-hexo-deployer-git\"><a href=\"#安装-hexo-deployer-git\" class=\"headerlink\" title=\"安装 hexo-deployer-git\"></a>安装 hexo-deployer-git</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-deployer-git --save <span class=\"comment\">#安装 hexo-deployer-git,快速把代码托管到 GitHub 上</span></span><br><span class=\"line\">hexo clean <span class=\"comment\">#清理缓存文件</span></span><br><span class=\"line\">hexo generate  <span class=\"comment\">#编译生成静态页面 简写hexo g</span></span><br><span class=\"line\">hexo delopy <span class=\"comment\">#自动提交,将 hexo 项目托管到 GitHub 上,简写 hexo d</span></span><br></pre></td></tr></table></figure>\n\n<p>打开 https://用户名.github.io就可以了(eg:<a href=\"https://acmwln.github.io\" target=\"_blank\" rel=\"noopener\">https://acmwln.github.io</a>)</p>\n"},{"title":"9种跨域解决方案","date":"2020-03-04T03:25:55.000Z","_content":"## 序\n跨域，相信大家无论是在工作中还是在面试中经常遇到这个问题，常常在网上看到别人所整理的一些方法，看似知道是怎么回事，但如果没有动手实践过，总觉得自己没有真正的掌握，在这里，通过自己认真思考整理一些常用的方法。\n\n## 跨域的产生\n相信大家都知道跨域是因为浏览器的同源策略所导致的。所谓同源是指\"协议+域名+端口\"三者相同，即便两个不同的域名指向同一个ip地址，也非同源。浏览器引入同源策略主要是为了防止XSS，CSRF攻击。\n> CSRF（Cross-site request forgery），跨站请求伪造，也被称为：one click attack/session riding，缩写为：CSRF/XSRF。\n\n## 跨域的解决方案\n### 1.通过jsonp跨域\n首先说一下jsonp的原理，例如我们平时写html的时候常常会使用\n`<script src=\"www.b.com/js/jquery.js\"></script>`这种方式去取放在另外服务器上的静态资源，这个是不受同源策略所限制的，所以我们利用这一点可以解决跨域的问题。\n#### 原生实现\n```javascript\n//在www.a.com域名写下如下代码，去请求www.b.com域名的数据\nvar script = document.creatElement('script');\nscript.type = 'text/javascript';\nscript.src = 'http://www.b.com/getdata?callback=demo';\n\nfunction demo(res){\n    console.log(res);\n}\n```\n这里，我们利用动态脚本的src属性，变相地发送了一个`http://www.b.com/getdata?callback=demo`,这时候，`b.com`页面接受到这个请求时，如果没有JSONP,会正常返回`json`的数据结果，像这样：`{ msg: 'helloworld' }`,而利用`JSONP`,服务端会接受这个`callback`参数，然后用这个参数值包装要返回的数据：`demo({msg: 'helloworld'})`;\n\n这时候，如果a.com的页面上正好有一个`demo` 的函数：\n```javascript\nfunction demo(){\n    console.log(res);\n}\n```\n当远程数据一返回的时候，随着动态脚本的执行，这个`demo`函数就会被执行。\n\n#### jquery ajax请求实现\n```javascript\n//客户端\n$.ajax({\n    url:'http:127.0.0.1:8001/list',\n    method:'get',\n    dataType:'jsonp', // 请求方式为jsonp\n    success:res=>{\n        console.log(res)\n    }\n})\n\n```\n\n```javascript\n//服务器serverJsonp.js\nlet express = require('express')\napp = express()\napp.listen(8001,()=>{\n    console.log('ok!')\n})\napp.get('list',(req,res)=>{\n    let {} = req.query\n    let data = {\n        data:0,\n        message:''\n    }\n    res.send('${callback}(${JSON.stringify(data)})')\n})\n\n```\n\n### 2.CORS跨域资源共享\n所有浏览器都支持该功能，IE浏览器不能低于`IE10`。\n#### 2.1 简单请求和非简单请求\n浏览器将`CORS`请求分成两类：简单请求`（simple request）`和非简单请求`（not-so-simple request)`.\n\n##### 简单请求同时满足以下条件,只要不满足以下条件的则为非简单请求\n\n![](../images/post01.png)\n\n#### 2.2 进行带有身份凭证的CORS请求\n- 默认情况下的跨域请求都是不会把`cookie`发送给服务器的，在需要发送的情况下，如果是`xhr`，那么需要设置`xhr.withCredentials=true`\n- 如果是采用fetch获取的话，那么需要在`request`里面设置 `credentials:'include'`\n- 但是如果服务器在预请求的时候没返回`Access-Control-Allow-Crenditials:true`的话，那么在实际请求的时候，cookie是不会被发送给服务器端的，要特别注意对于简单的get请求，不会有预请求的过程\n- 那么在实际请求的时候，如果服务器没有返回`Access-Control-Allow-Crenditials:true`的话那么响应结果浏览器也不会交给请求者\n对于附带身份凭证的请求，服务器不得设置 `Access-Control-Allow-Origin` 的值为“*”。\n这是因为请求的首部中携带了 `Cookie` 信息，如果 `Access-Control-Allow-Origin`\n的值为“*”，请求将会失败。而将 `Access-Control-Allow-Origin` 的值设置为\n`http://www.a.com`，则请求将成功执行。\n\n####  2.3 HTTP响应首部字段\n- `Access-Control-Allow-Origin`: <origin> | *\n- `Access-Control-Expose-Headers` 头让服务器把允许浏览器访问的头放入白名单\n- `Access-Control-Max-Age` 头指定了preflight请求的结果能够被缓存多久\n- `Access-Control-Allow-Credentials` 头指定了当浏览器的`credentials`设置为`true`时是否允许浏览器读取`response`的内容\n- `Access-Control-Allow-Methods` 首部字段用于预检请求的响应。其指明了实际请求所允许使用的`HTTP`方法。\n- `Access-Control-Allow-Headers` 首部字段用于预检请求的响应。其指明了实际请求中允许携带的首部字段。\n#### 2.2 以nodejs express为例，说明如何使用cors解决跨域\n```javascript\n//server\n    var express=require('express');\n    var url=require('url');\n    var app=express();\n    var allowCrossDomain = function(req, res, next) {\n        //设置哪个源可以访问我\n        res.setHeader('Access-Control-Allow-Origin', 'http://localhost:9001');\n        //允许哪个方法访问我\n        res.setHeader('Access-Control-Allow-Methods', 'GET,PUT,POST,DELETE');\n        //允许携带哪个头访问我\n        res.setHeader('Access-Control-Allow-Headers', 'Content-Type');\n        //允许携带cookie\n        res.setHeader('Access-Control-Allow-Credentials','true');\n        //预检的存活时间\n        res.setHeader('Access-Control-Max-Age',6);\n        //允许前端获取哪个头\n        res.setHeader('Access-Control-Expose-Headers','name');\n        next();\n    };\n    app.use(allowCrossDomain);\n    app.get('/getData',function (req,res,next) {\n        var queryValue=url.parse(req.url).query;\n        if(queryValue==='fortunewheel@sina.com'){\n            res.send(true);\n        }else {\n            res.send(false);\n        }\n\n    });\n    app.listen(3001);\n\n```\n\n\n### 3.http proxy （http代理）\n```javascript\nwebpack+webpack-dev-server\ndevServer:{\n    proxy:{\n        '/':{\n            target:'http:127.0.0.1',\n            changeOrigin:true    //设置此属性走跨域\n        }\n    }\n}\n```\n\n\n### 4. nginx反向代理\n```javascript\nserver{\n    // 监听8080端口\n    listen 8080\n    // 域名是localhost\n    server_name localhost\n    // 凡是localhost:8080/api这个样子的，都转发到真正的服务端的地址http://www.b.com:8080\n    location ^~ /api{\n        proxy_pass  http://www.b.com:8080\n    }\n}\n\n```\n配置之后就不需要前端做什么修改了，一般我们在前后端分离项目中开发阶段会采用这种方式，但不是所有场景都能这样做，例如后端接口是一个公共的`API`，比如一些公共服务获取天气什么的。\n\n### 5. window.postMessage\n`postMessage`是`HTML5 XMLHttpRequest Level 2`中的`API`，且是为数不多可以跨域操作的`window`属性之一，它可用于解决以下方面的问题：\n\n- `iframe`嵌套页面跨域通信\n- 页面和其打开的新窗口的通信\n- 多窗口之间消息传递\n\n用法：\n`postMessage(data,origin)`方法接受两个参数，\n\ndata：需要传递的数据，html5规范支持任意基本类型或可复制的对象，但部分浏览器只支持字符串，所以传参时最好用`JSON.stringify()`序列化。\norigin：协议+主机+端口号，也可以设置为\"*\"，表示可以传递给任意窗口，如果要指定和当前窗口同源的话设置为\"/\"。\n\n\n```javascript\n//http://www.a.com/a.html\n<ifram id=\"iframe\" src=\"http://www.b.com/b.html\" style=\"display:none\"></iframe>\nvar iframe = document.getElementById('iframe');\niframe.onload = function(){\n    var data = {\n        name:'wanglina'\n    }\n    //向http://www.b.com传递跨域数据\n    iframe.contentWindow.postMessage(JSON.stringify(data),'http://www.b.com');\n};\n```\n\n\n```javascript\n//http://www.b.com/b.html\nwindow.addEventListener('message', function(ev) {    //接收http://www.a.com/a.html的数据\n    alert('data from http://www.a.com/a.html---> ' + ev.data);\n    var data = JSON.parse(ev.data);\n    if (data) {\n        data.number = 16;\n        // 处理后再发回http://www.a.com/a.html\n        // window.parent.postMessage(JSON.stringify(data), 'http://www.a.com');\n        ev.source.postMessage(JSON.stringify(data), 'http://www.a.com')\n    }\n}, false);\n\n```\n\n### 6. document.domain + iframe\n这种方式只适合主域名相同，但子域名不同的`iframe`跨域。\n实现原理：两个页面都通过`js`强制设置`document.domain`为基础主域，就实现了同域。\n使用方式：\n```javascript\n//http://www.a.com/a.html\n<iframe id=\"iframe\" src=\"http://www.child.a.com/b.html\" style=\"display:none;\"></iframe>\ndocument.domain = 'a.com'; \nvar a = 'hello world';\n```\n\n```javascript\n//http://www.child.a.com/b.html\ndocument.domain = 'a.com'; \nvar b = window.parent.a;\nconsole.log(b);\n\n```\n### 7. window.name + iframe\n\n`window.name` 传输技术的基本原理：\n当在浏览器中打开一个页面，或者在页面中添加一个`iframe`时即会创建一个对应的`window`对象，当页面加载另一个新的页面时，`window.name`的属性是不会变的。这样就可以利用在页面动态添加一个`iframe`然后加载数据页面，在数据页面将需要的数据赋值给`window.name`。然而此时承载的`iframe`的`parent`页面还是不能直接访问不在同一域下的`iframe`的那么属性，这时，只需要将iframe再加载一个与承载页面同域的空白页面，即可对`window.name`进行数据读取。\n`window.name`属性的独特之处：`name`值在不同的页面（甚至不同域名）加载后依旧存在，并且可以支持非常长的`name`值（2MB)\n总结：通过iframe的src属性由外域转向本地域，跨域数据即由iframe的window.name从外域传递到本地域。这个就巧妙地绕过了浏览器的跨域访问限制，但同时它又是安全操作。\n\n\n具体实现：\n`http://www.a.com/a.html` 主页面\n`http://www.b.com/b.html` 数据页面\n`http://www.a.com/proxy.html` 代理页面\n\n- `http://www.a.com/a.html`代码：\n```javascript\nfunction crossDomainGetData(url,callback){\n    var state = 0;\n    var iframe = document.createElement('iframe');\n    iframe.src = url;\n    iframe.onload = function(){\n        if(state === 1){\n            var data = iframe.contentWindow.name;//代理页面成功过后，读取window.name\n            callback&&callback(data);\n\n            //销毁iframe\n            iframe.contentWindow.document.write('');\n            iframe.contentWindow.close();\n            document.body.removeChild(iframe);\n        }\n    }\n}\n```\n\n- `http://www.b.com/b.html`代码：\n```javascript\nwindow.name = '123'\n```\n\n- `http://www.a.com/proxy.html`   （中间代理页，与`a.html`同域，内容为空即可）\n\n\n### 8.location.hash + iframe\n实现原理： `a`欲与`b`跨域相互通信，通过中间页`c`来实现。 三个页面，不同域之间利用`iframe`的`location.hash`传值，相同域之间直接`js`访问来通信。\n\n具体实现：A域：`a.html` -> B域：`b.html` -> A域：`c.html`，a与b不同域只能通过hash值单向通信，b与c也不同域也只能单向通信，但c与a同域，所以c可通过parent.parent访问a页面所有对象。\n- `a.html：(http://www.domain1.com/a.html)`\n```javascript\n\n<iframe id=\"iframe\" src=\"http://www.domain2.com/b.html\" style=\"display:none;\"></iframe>\nvar iframe = document.getElementById('iframe');\n\n// 向b.html传hash值\nsetTimeout(function() {\n    iframe.src = iframe.src + '#user=admin';\n}, 1000);\n\n// 开放给同域c.html的回调方法\nfunction onCallback(res) {\n    alert('data from c.html ---> ' + res);\n}\n```\n- `b.html：(http://www.domain2.com/b.html)`\n```javascript\n\n<iframe id=\"iframe\" src=\"http://www.domain1.com/c.html\" style=\"display:none;\"></iframe>\nvar iframe = document.getElementById('iframe');\n\n// 监听a.html传来的hash值，再传给c.html\nwindow.onhashchange = function () {\n    iframe.src = iframe.src + location.hash;\n};\n```\n- `c.html：(http://www.domain1.com/c.html)`\n```javascript\n// 监听b.html传来的hash值\nwindow.onhashchange = function () {\n    // 再通过操作同域a.html的js回调，将结果传回\n    window.parent.parent.onCallback('hello: ' + location.hash.replace('#user=', ''));\n};\n```\n\n### 9. websocket协议跨域\n`websoket`协议天然支持跨域，你只需要学会如何使用它即可[websocket协议](https://segmentfault.com/a/1190000017086942)","source":"_posts/crossDomain.md","raw":"---\ntitle: 9种跨域解决方案\ndate: 2020-03-04 11:25:55\ncategories: 网络\ntags:\n    - 网络\n---\n## 序\n跨域，相信大家无论是在工作中还是在面试中经常遇到这个问题，常常在网上看到别人所整理的一些方法，看似知道是怎么回事，但如果没有动手实践过，总觉得自己没有真正的掌握，在这里，通过自己认真思考整理一些常用的方法。\n\n## 跨域的产生\n相信大家都知道跨域是因为浏览器的同源策略所导致的。所谓同源是指\"协议+域名+端口\"三者相同，即便两个不同的域名指向同一个ip地址，也非同源。浏览器引入同源策略主要是为了防止XSS，CSRF攻击。\n> CSRF（Cross-site request forgery），跨站请求伪造，也被称为：one click attack/session riding，缩写为：CSRF/XSRF。\n\n## 跨域的解决方案\n### 1.通过jsonp跨域\n首先说一下jsonp的原理，例如我们平时写html的时候常常会使用\n`<script src=\"www.b.com/js/jquery.js\"></script>`这种方式去取放在另外服务器上的静态资源，这个是不受同源策略所限制的，所以我们利用这一点可以解决跨域的问题。\n#### 原生实现\n```javascript\n//在www.a.com域名写下如下代码，去请求www.b.com域名的数据\nvar script = document.creatElement('script');\nscript.type = 'text/javascript';\nscript.src = 'http://www.b.com/getdata?callback=demo';\n\nfunction demo(res){\n    console.log(res);\n}\n```\n这里，我们利用动态脚本的src属性，变相地发送了一个`http://www.b.com/getdata?callback=demo`,这时候，`b.com`页面接受到这个请求时，如果没有JSONP,会正常返回`json`的数据结果，像这样：`{ msg: 'helloworld' }`,而利用`JSONP`,服务端会接受这个`callback`参数，然后用这个参数值包装要返回的数据：`demo({msg: 'helloworld'})`;\n\n这时候，如果a.com的页面上正好有一个`demo` 的函数：\n```javascript\nfunction demo(){\n    console.log(res);\n}\n```\n当远程数据一返回的时候，随着动态脚本的执行，这个`demo`函数就会被执行。\n\n#### jquery ajax请求实现\n```javascript\n//客户端\n$.ajax({\n    url:'http:127.0.0.1:8001/list',\n    method:'get',\n    dataType:'jsonp', // 请求方式为jsonp\n    success:res=>{\n        console.log(res)\n    }\n})\n\n```\n\n```javascript\n//服务器serverJsonp.js\nlet express = require('express')\napp = express()\napp.listen(8001,()=>{\n    console.log('ok!')\n})\napp.get('list',(req,res)=>{\n    let {} = req.query\n    let data = {\n        data:0,\n        message:''\n    }\n    res.send('${callback}(${JSON.stringify(data)})')\n})\n\n```\n\n### 2.CORS跨域资源共享\n所有浏览器都支持该功能，IE浏览器不能低于`IE10`。\n#### 2.1 简单请求和非简单请求\n浏览器将`CORS`请求分成两类：简单请求`（simple request）`和非简单请求`（not-so-simple request)`.\n\n##### 简单请求同时满足以下条件,只要不满足以下条件的则为非简单请求\n\n![](../images/post01.png)\n\n#### 2.2 进行带有身份凭证的CORS请求\n- 默认情况下的跨域请求都是不会把`cookie`发送给服务器的，在需要发送的情况下，如果是`xhr`，那么需要设置`xhr.withCredentials=true`\n- 如果是采用fetch获取的话，那么需要在`request`里面设置 `credentials:'include'`\n- 但是如果服务器在预请求的时候没返回`Access-Control-Allow-Crenditials:true`的话，那么在实际请求的时候，cookie是不会被发送给服务器端的，要特别注意对于简单的get请求，不会有预请求的过程\n- 那么在实际请求的时候，如果服务器没有返回`Access-Control-Allow-Crenditials:true`的话那么响应结果浏览器也不会交给请求者\n对于附带身份凭证的请求，服务器不得设置 `Access-Control-Allow-Origin` 的值为“*”。\n这是因为请求的首部中携带了 `Cookie` 信息，如果 `Access-Control-Allow-Origin`\n的值为“*”，请求将会失败。而将 `Access-Control-Allow-Origin` 的值设置为\n`http://www.a.com`，则请求将成功执行。\n\n####  2.3 HTTP响应首部字段\n- `Access-Control-Allow-Origin`: <origin> | *\n- `Access-Control-Expose-Headers` 头让服务器把允许浏览器访问的头放入白名单\n- `Access-Control-Max-Age` 头指定了preflight请求的结果能够被缓存多久\n- `Access-Control-Allow-Credentials` 头指定了当浏览器的`credentials`设置为`true`时是否允许浏览器读取`response`的内容\n- `Access-Control-Allow-Methods` 首部字段用于预检请求的响应。其指明了实际请求所允许使用的`HTTP`方法。\n- `Access-Control-Allow-Headers` 首部字段用于预检请求的响应。其指明了实际请求中允许携带的首部字段。\n#### 2.2 以nodejs express为例，说明如何使用cors解决跨域\n```javascript\n//server\n    var express=require('express');\n    var url=require('url');\n    var app=express();\n    var allowCrossDomain = function(req, res, next) {\n        //设置哪个源可以访问我\n        res.setHeader('Access-Control-Allow-Origin', 'http://localhost:9001');\n        //允许哪个方法访问我\n        res.setHeader('Access-Control-Allow-Methods', 'GET,PUT,POST,DELETE');\n        //允许携带哪个头访问我\n        res.setHeader('Access-Control-Allow-Headers', 'Content-Type');\n        //允许携带cookie\n        res.setHeader('Access-Control-Allow-Credentials','true');\n        //预检的存活时间\n        res.setHeader('Access-Control-Max-Age',6);\n        //允许前端获取哪个头\n        res.setHeader('Access-Control-Expose-Headers','name');\n        next();\n    };\n    app.use(allowCrossDomain);\n    app.get('/getData',function (req,res,next) {\n        var queryValue=url.parse(req.url).query;\n        if(queryValue==='fortunewheel@sina.com'){\n            res.send(true);\n        }else {\n            res.send(false);\n        }\n\n    });\n    app.listen(3001);\n\n```\n\n\n### 3.http proxy （http代理）\n```javascript\nwebpack+webpack-dev-server\ndevServer:{\n    proxy:{\n        '/':{\n            target:'http:127.0.0.1',\n            changeOrigin:true    //设置此属性走跨域\n        }\n    }\n}\n```\n\n\n### 4. nginx反向代理\n```javascript\nserver{\n    // 监听8080端口\n    listen 8080\n    // 域名是localhost\n    server_name localhost\n    // 凡是localhost:8080/api这个样子的，都转发到真正的服务端的地址http://www.b.com:8080\n    location ^~ /api{\n        proxy_pass  http://www.b.com:8080\n    }\n}\n\n```\n配置之后就不需要前端做什么修改了，一般我们在前后端分离项目中开发阶段会采用这种方式，但不是所有场景都能这样做，例如后端接口是一个公共的`API`，比如一些公共服务获取天气什么的。\n\n### 5. window.postMessage\n`postMessage`是`HTML5 XMLHttpRequest Level 2`中的`API`，且是为数不多可以跨域操作的`window`属性之一，它可用于解决以下方面的问题：\n\n- `iframe`嵌套页面跨域通信\n- 页面和其打开的新窗口的通信\n- 多窗口之间消息传递\n\n用法：\n`postMessage(data,origin)`方法接受两个参数，\n\ndata：需要传递的数据，html5规范支持任意基本类型或可复制的对象，但部分浏览器只支持字符串，所以传参时最好用`JSON.stringify()`序列化。\norigin：协议+主机+端口号，也可以设置为\"*\"，表示可以传递给任意窗口，如果要指定和当前窗口同源的话设置为\"/\"。\n\n\n```javascript\n//http://www.a.com/a.html\n<ifram id=\"iframe\" src=\"http://www.b.com/b.html\" style=\"display:none\"></iframe>\nvar iframe = document.getElementById('iframe');\niframe.onload = function(){\n    var data = {\n        name:'wanglina'\n    }\n    //向http://www.b.com传递跨域数据\n    iframe.contentWindow.postMessage(JSON.stringify(data),'http://www.b.com');\n};\n```\n\n\n```javascript\n//http://www.b.com/b.html\nwindow.addEventListener('message', function(ev) {    //接收http://www.a.com/a.html的数据\n    alert('data from http://www.a.com/a.html---> ' + ev.data);\n    var data = JSON.parse(ev.data);\n    if (data) {\n        data.number = 16;\n        // 处理后再发回http://www.a.com/a.html\n        // window.parent.postMessage(JSON.stringify(data), 'http://www.a.com');\n        ev.source.postMessage(JSON.stringify(data), 'http://www.a.com')\n    }\n}, false);\n\n```\n\n### 6. document.domain + iframe\n这种方式只适合主域名相同，但子域名不同的`iframe`跨域。\n实现原理：两个页面都通过`js`强制设置`document.domain`为基础主域，就实现了同域。\n使用方式：\n```javascript\n//http://www.a.com/a.html\n<iframe id=\"iframe\" src=\"http://www.child.a.com/b.html\" style=\"display:none;\"></iframe>\ndocument.domain = 'a.com'; \nvar a = 'hello world';\n```\n\n```javascript\n//http://www.child.a.com/b.html\ndocument.domain = 'a.com'; \nvar b = window.parent.a;\nconsole.log(b);\n\n```\n### 7. window.name + iframe\n\n`window.name` 传输技术的基本原理：\n当在浏览器中打开一个页面，或者在页面中添加一个`iframe`时即会创建一个对应的`window`对象，当页面加载另一个新的页面时，`window.name`的属性是不会变的。这样就可以利用在页面动态添加一个`iframe`然后加载数据页面，在数据页面将需要的数据赋值给`window.name`。然而此时承载的`iframe`的`parent`页面还是不能直接访问不在同一域下的`iframe`的那么属性，这时，只需要将iframe再加载一个与承载页面同域的空白页面，即可对`window.name`进行数据读取。\n`window.name`属性的独特之处：`name`值在不同的页面（甚至不同域名）加载后依旧存在，并且可以支持非常长的`name`值（2MB)\n总结：通过iframe的src属性由外域转向本地域，跨域数据即由iframe的window.name从外域传递到本地域。这个就巧妙地绕过了浏览器的跨域访问限制，但同时它又是安全操作。\n\n\n具体实现：\n`http://www.a.com/a.html` 主页面\n`http://www.b.com/b.html` 数据页面\n`http://www.a.com/proxy.html` 代理页面\n\n- `http://www.a.com/a.html`代码：\n```javascript\nfunction crossDomainGetData(url,callback){\n    var state = 0;\n    var iframe = document.createElement('iframe');\n    iframe.src = url;\n    iframe.onload = function(){\n        if(state === 1){\n            var data = iframe.contentWindow.name;//代理页面成功过后，读取window.name\n            callback&&callback(data);\n\n            //销毁iframe\n            iframe.contentWindow.document.write('');\n            iframe.contentWindow.close();\n            document.body.removeChild(iframe);\n        }\n    }\n}\n```\n\n- `http://www.b.com/b.html`代码：\n```javascript\nwindow.name = '123'\n```\n\n- `http://www.a.com/proxy.html`   （中间代理页，与`a.html`同域，内容为空即可）\n\n\n### 8.location.hash + iframe\n实现原理： `a`欲与`b`跨域相互通信，通过中间页`c`来实现。 三个页面，不同域之间利用`iframe`的`location.hash`传值，相同域之间直接`js`访问来通信。\n\n具体实现：A域：`a.html` -> B域：`b.html` -> A域：`c.html`，a与b不同域只能通过hash值单向通信，b与c也不同域也只能单向通信，但c与a同域，所以c可通过parent.parent访问a页面所有对象。\n- `a.html：(http://www.domain1.com/a.html)`\n```javascript\n\n<iframe id=\"iframe\" src=\"http://www.domain2.com/b.html\" style=\"display:none;\"></iframe>\nvar iframe = document.getElementById('iframe');\n\n// 向b.html传hash值\nsetTimeout(function() {\n    iframe.src = iframe.src + '#user=admin';\n}, 1000);\n\n// 开放给同域c.html的回调方法\nfunction onCallback(res) {\n    alert('data from c.html ---> ' + res);\n}\n```\n- `b.html：(http://www.domain2.com/b.html)`\n```javascript\n\n<iframe id=\"iframe\" src=\"http://www.domain1.com/c.html\" style=\"display:none;\"></iframe>\nvar iframe = document.getElementById('iframe');\n\n// 监听a.html传来的hash值，再传给c.html\nwindow.onhashchange = function () {\n    iframe.src = iframe.src + location.hash;\n};\n```\n- `c.html：(http://www.domain1.com/c.html)`\n```javascript\n// 监听b.html传来的hash值\nwindow.onhashchange = function () {\n    // 再通过操作同域a.html的js回调，将结果传回\n    window.parent.parent.onCallback('hello: ' + location.hash.replace('#user=', ''));\n};\n```\n\n### 9. websocket协议跨域\n`websoket`协议天然支持跨域，你只需要学会如何使用它即可[websocket协议](https://segmentfault.com/a/1190000017086942)","slug":"crossDomain","published":1,"updated":"2020-03-15T09:51:03.792Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7t6o2vj000apsucl7iqwabx","content":"<h2 id=\"序\"><a href=\"#序\" class=\"headerlink\" title=\"序\"></a>序</h2><p>跨域，相信大家无论是在工作中还是在面试中经常遇到这个问题，常常在网上看到别人所整理的一些方法，看似知道是怎么回事，但如果没有动手实践过，总觉得自己没有真正的掌握，在这里，通过自己认真思考整理一些常用的方法。</p>\n<h2 id=\"跨域的产生\"><a href=\"#跨域的产生\" class=\"headerlink\" title=\"跨域的产生\"></a>跨域的产生</h2><p>相信大家都知道跨域是因为浏览器的同源策略所导致的。所谓同源是指”协议+域名+端口”三者相同，即便两个不同的域名指向同一个ip地址，也非同源。浏览器引入同源策略主要是为了防止XSS，CSRF攻击。</p>\n<blockquote>\n<p>CSRF（Cross-site request forgery），跨站请求伪造，也被称为：one click attack/session riding，缩写为：CSRF/XSRF。</p>\n</blockquote>\n<h2 id=\"跨域的解决方案\"><a href=\"#跨域的解决方案\" class=\"headerlink\" title=\"跨域的解决方案\"></a>跨域的解决方案</h2><h3 id=\"1-通过jsonp跨域\"><a href=\"#1-通过jsonp跨域\" class=\"headerlink\" title=\"1.通过jsonp跨域\"></a>1.通过jsonp跨域</h3><p>首先说一下jsonp的原理，例如我们平时写html的时候常常会使用<br><code>&lt;script src=&quot;www.b.com/js/jquery.js&quot;&gt;&lt;/script&gt;</code>这种方式去取放在另外服务器上的静态资源，这个是不受同源策略所限制的，所以我们利用这一点可以解决跨域的问题。</p>\n<h4 id=\"原生实现\"><a href=\"#原生实现\" class=\"headerlink\" title=\"原生实现\"></a>原生实现</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//在www.a.com域名写下如下代码，去请求www.b.com域名的数据</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> script = <span class=\"built_in\">document</span>.creatElement(<span class=\"string\">'script'</span>);</span><br><span class=\"line\">script.type = <span class=\"string\">'text/javascript'</span>;</span><br><span class=\"line\">script.src = <span class=\"string\">'http://www.b.com/getdata?callback=demo'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">demo</span>(<span class=\"params\">res</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(res);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这里，我们利用动态脚本的src属性，变相地发送了一个<code>http://www.b.com/getdata?callback=demo</code>,这时候，<code>b.com</code>页面接受到这个请求时，如果没有JSONP,会正常返回<code>json</code>的数据结果，像这样：<code>{ msg: &#39;helloworld&#39; }</code>,而利用<code>JSONP</code>,服务端会接受这个<code>callback</code>参数，然后用这个参数值包装要返回的数据：<code>demo({msg: &#39;helloworld&#39;})</code>;</p>\n<p>这时候，如果a.com的页面上正好有一个<code>demo</code> 的函数：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">demo</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(res);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>当远程数据一返回的时候，随着动态脚本的执行，这个<code>demo</code>函数就会被执行。</p>\n<h4 id=\"jquery-ajax请求实现\"><a href=\"#jquery-ajax请求实现\" class=\"headerlink\" title=\"jquery ajax请求实现\"></a>jquery ajax请求实现</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//客户端</span></span><br><span class=\"line\">$.ajax(&#123;</span><br><span class=\"line\">    url:<span class=\"string\">'http:127.0.0.1:8001/list'</span>,</span><br><span class=\"line\">    method:<span class=\"string\">'get'</span>,</span><br><span class=\"line\">    dataType:<span class=\"string\">'jsonp'</span>, <span class=\"comment\">// 请求方式为jsonp</span></span><br><span class=\"line\">    success:<span class=\"function\"><span class=\"params\">res</span>=&gt;</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(res)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//服务器serverJsonp.js</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">'express'</span>)</span><br><span class=\"line\">app = express()</span><br><span class=\"line\">app.listen(<span class=\"number\">8001</span>,()=&gt;&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'ok!'</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">app.get(<span class=\"string\">'list'</span>,(req,res)=&gt;&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> &#123;&#125; = req.query</span><br><span class=\"line\">    <span class=\"keyword\">let</span> data = &#123;</span><br><span class=\"line\">        data:<span class=\"number\">0</span>,</span><br><span class=\"line\">        message:<span class=\"string\">''</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    res.send(<span class=\"string\">'$&#123;callback&#125;($&#123;JSON.stringify(data)&#125;)'</span>)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-CORS跨域资源共享\"><a href=\"#2-CORS跨域资源共享\" class=\"headerlink\" title=\"2.CORS跨域资源共享\"></a>2.CORS跨域资源共享</h3><p>所有浏览器都支持该功能，IE浏览器不能低于<code>IE10</code>。</p>\n<h4 id=\"2-1-简单请求和非简单请求\"><a href=\"#2-1-简单请求和非简单请求\" class=\"headerlink\" title=\"2.1 简单请求和非简单请求\"></a>2.1 简单请求和非简单请求</h4><p>浏览器将<code>CORS</code>请求分成两类：简单请求<code>（simple request）</code>和非简单请求<code>（not-so-simple request)</code>.</p>\n<h5 id=\"简单请求同时满足以下条件-只要不满足以下条件的则为非简单请求\"><a href=\"#简单请求同时满足以下条件-只要不满足以下条件的则为非简单请求\" class=\"headerlink\" title=\"简单请求同时满足以下条件,只要不满足以下条件的则为非简单请求\"></a>简单请求同时满足以下条件,只要不满足以下条件的则为非简单请求</h5><p><img src=\"../images/post01.png\" alt></p>\n<h4 id=\"2-2-进行带有身份凭证的CORS请求\"><a href=\"#2-2-进行带有身份凭证的CORS请求\" class=\"headerlink\" title=\"2.2 进行带有身份凭证的CORS请求\"></a>2.2 进行带有身份凭证的CORS请求</h4><ul>\n<li>默认情况下的跨域请求都是不会把<code>cookie</code>发送给服务器的，在需要发送的情况下，如果是<code>xhr</code>，那么需要设置<code>xhr.withCredentials=true</code></li>\n<li>如果是采用fetch获取的话，那么需要在<code>request</code>里面设置 <code>credentials:&#39;include&#39;</code></li>\n<li>但是如果服务器在预请求的时候没返回<code>Access-Control-Allow-Crenditials:true</code>的话，那么在实际请求的时候，cookie是不会被发送给服务器端的，要特别注意对于简单的get请求，不会有预请求的过程</li>\n<li>那么在实际请求的时候，如果服务器没有返回<code>Access-Control-Allow-Crenditials:true</code>的话那么响应结果浏览器也不会交给请求者<br>对于附带身份凭证的请求，服务器不得设置 <code>Access-Control-Allow-Origin</code> 的值为“<em>”。<br>这是因为请求的首部中携带了 <code>Cookie</code> 信息，如果 <code>Access-Control-Allow-Origin</code><br>的值为“</em>”，请求将会失败。而将 <code>Access-Control-Allow-Origin</code> 的值设置为<br><code>http://www.a.com</code>，则请求将成功执行。</li>\n</ul>\n<h4 id=\"2-3-HTTP响应首部字段\"><a href=\"#2-3-HTTP响应首部字段\" class=\"headerlink\" title=\"2.3 HTTP响应首部字段\"></a>2.3 HTTP响应首部字段</h4><ul>\n<li><code>Access-Control-Allow-Origin</code>: <origin> | *</origin></li>\n<li><code>Access-Control-Expose-Headers</code> 头让服务器把允许浏览器访问的头放入白名单</li>\n<li><code>Access-Control-Max-Age</code> 头指定了preflight请求的结果能够被缓存多久</li>\n<li><code>Access-Control-Allow-Credentials</code> 头指定了当浏览器的<code>credentials</code>设置为<code>true</code>时是否允许浏览器读取<code>response</code>的内容</li>\n<li><code>Access-Control-Allow-Methods</code> 首部字段用于预检请求的响应。其指明了实际请求所允许使用的<code>HTTP</code>方法。</li>\n<li><code>Access-Control-Allow-Headers</code> 首部字段用于预检请求的响应。其指明了实际请求中允许携带的首部字段。<h4 id=\"2-2-以nodejs-express为例，说明如何使用cors解决跨域\"><a href=\"#2-2-以nodejs-express为例，说明如何使用cors解决跨域\" class=\"headerlink\" title=\"2.2 以nodejs express为例，说明如何使用cors解决跨域\"></a>2.2 以nodejs express为例，说明如何使用cors解决跨域</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//server</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> express=<span class=\"built_in\">require</span>(<span class=\"string\">'express'</span>);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> url=<span class=\"built_in\">require</span>(<span class=\"string\">'url'</span>);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> app=express();</span><br><span class=\"line\">    <span class=\"keyword\">var</span> allowCrossDomain = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res, next</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//设置哪个源可以访问我</span></span><br><span class=\"line\">        res.setHeader(<span class=\"string\">'Access-Control-Allow-Origin'</span>, <span class=\"string\">'http://localhost:9001'</span>);</span><br><span class=\"line\">        <span class=\"comment\">//允许哪个方法访问我</span></span><br><span class=\"line\">        res.setHeader(<span class=\"string\">'Access-Control-Allow-Methods'</span>, <span class=\"string\">'GET,PUT,POST,DELETE'</span>);</span><br><span class=\"line\">        <span class=\"comment\">//允许携带哪个头访问我</span></span><br><span class=\"line\">        res.setHeader(<span class=\"string\">'Access-Control-Allow-Headers'</span>, <span class=\"string\">'Content-Type'</span>);</span><br><span class=\"line\">        <span class=\"comment\">//允许携带cookie</span></span><br><span class=\"line\">        res.setHeader(<span class=\"string\">'Access-Control-Allow-Credentials'</span>,<span class=\"string\">'true'</span>);</span><br><span class=\"line\">        <span class=\"comment\">//预检的存活时间</span></span><br><span class=\"line\">        res.setHeader(<span class=\"string\">'Access-Control-Max-Age'</span>,<span class=\"number\">6</span>);</span><br><span class=\"line\">        <span class=\"comment\">//允许前端获取哪个头</span></span><br><span class=\"line\">        res.setHeader(<span class=\"string\">'Access-Control-Expose-Headers'</span>,<span class=\"string\">'name'</span>);</span><br><span class=\"line\">        next();</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    app.use(allowCrossDomain);</span><br><span class=\"line\">    app.get(<span class=\"string\">'/getData'</span>,<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req,res,next</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> queryValue=url.parse(req.url).query;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(queryValue===<span class=\"string\">'fortunewheel@sina.com'</span>)&#123;</span><br><span class=\"line\">            res.send(<span class=\"literal\">true</span>);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            res.send(<span class=\"literal\">false</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    app.listen(<span class=\"number\">3001</span>);</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h3 id=\"3-http-proxy-（http代理）\"><a href=\"#3-http-proxy-（http代理）\" class=\"headerlink\" title=\"3.http proxy （http代理）\"></a>3.http proxy （http代理）</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">webpack+webpack-dev-server</span><br><span class=\"line\">devServer:&#123;</span><br><span class=\"line\">    proxy:&#123;</span><br><span class=\"line\">        <span class=\"string\">'/'</span>:&#123;</span><br><span class=\"line\">            target:<span class=\"string\">'http:127.0.0.1'</span>,</span><br><span class=\"line\">            changeOrigin:<span class=\"literal\">true</span>    <span class=\"comment\">//设置此属性走跨域</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-nginx反向代理\"><a href=\"#4-nginx反向代理\" class=\"headerlink\" title=\"4. nginx反向代理\"></a>4. nginx反向代理</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 监听8080端口</span></span><br><span class=\"line\">    listen <span class=\"number\">8080</span></span><br><span class=\"line\">    <span class=\"comment\">// 域名是localhost</span></span><br><span class=\"line\">    server_name localhost</span><br><span class=\"line\">    <span class=\"comment\">// 凡是localhost:8080/api这个样子的，都转发到真正的服务端的地址http://www.b.com:8080</span></span><br><span class=\"line\">    location ^~ <span class=\"regexp\">/api&#123;</span></span><br><span class=\"line\"><span class=\"regexp\">        proxy_pass  http:/</span><span class=\"regexp\">/www.b.com:8080</span></span><br><span class=\"line\"><span class=\"regexp\">    &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>配置之后就不需要前端做什么修改了，一般我们在前后端分离项目中开发阶段会采用这种方式，但不是所有场景都能这样做，例如后端接口是一个公共的<code>API</code>，比如一些公共服务获取天气什么的。</p>\n<h3 id=\"5-window-postMessage\"><a href=\"#5-window-postMessage\" class=\"headerlink\" title=\"5. window.postMessage\"></a>5. window.postMessage</h3><p><code>postMessage</code>是<code>HTML5 XMLHttpRequest Level 2</code>中的<code>API</code>，且是为数不多可以跨域操作的<code>window</code>属性之一，它可用于解决以下方面的问题：</p>\n<ul>\n<li><code>iframe</code>嵌套页面跨域通信</li>\n<li>页面和其打开的新窗口的通信</li>\n<li>多窗口之间消息传递</li>\n</ul>\n<p>用法：<br><code>postMessage(data,origin)</code>方法接受两个参数，</p>\n<p>data：需要传递的数据，html5规范支持任意基本类型或可复制的对象，但部分浏览器只支持字符串，所以传参时最好用<code>JSON.stringify()</code>序列化。<br>origin：协议+主机+端口号，也可以设置为”*”，表示可以传递给任意窗口，如果要指定和当前窗口同源的话设置为”/“。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//http://www.a.com/a.html</span></span><br><span class=\"line\">&lt;ifram id=<span class=\"string\">\"iframe\"</span> src=<span class=\"string\">\"http://www.b.com/b.html\"</span> style=<span class=\"string\">\"display:none\"</span>&gt;&lt;/iframe&gt;</span><br><span class=\"line\"><span class=\"keyword\">var</span> iframe = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'iframe'</span>);</span><br><span class=\"line\">iframe.onload = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> data = &#123;</span><br><span class=\"line\">        name:<span class=\"string\">'wanglina'</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//向http://www.b.com传递跨域数据</span></span><br><span class=\"line\">    iframe.contentWindow.postMessage(<span class=\"built_in\">JSON</span>.stringify(data),<span class=\"string\">'http://www.b.com'</span>);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//http://www.b.com/b.html</span></span><br><span class=\"line\"><span class=\"built_in\">window</span>.addEventListener(<span class=\"string\">'message'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">ev</span>) </span>&#123;    <span class=\"comment\">//接收http://www.a.com/a.html的数据</span></span><br><span class=\"line\">    alert(<span class=\"string\">'data from http://www.a.com/a.html---&gt; '</span> + ev.data);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> data = <span class=\"built_in\">JSON</span>.parse(ev.data);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (data) &#123;</span><br><span class=\"line\">        data.number = <span class=\"number\">16</span>;</span><br><span class=\"line\">        <span class=\"comment\">// 处理后再发回http://www.a.com/a.html</span></span><br><span class=\"line\">        <span class=\"comment\">// window.parent.postMessage(JSON.stringify(data), 'http://www.a.com');</span></span><br><span class=\"line\">        ev.source.postMessage(<span class=\"built_in\">JSON</span>.stringify(data), <span class=\"string\">'http://www.a.com'</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;, <span class=\"literal\">false</span>);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"6-document-domain-iframe\"><a href=\"#6-document-domain-iframe\" class=\"headerlink\" title=\"6. document.domain + iframe\"></a>6. document.domain + iframe</h3><p>这种方式只适合主域名相同，但子域名不同的<code>iframe</code>跨域。<br>实现原理：两个页面都通过<code>js</code>强制设置<code>document.domain</code>为基础主域，就实现了同域。<br>使用方式：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//http://www.a.com/a.html</span></span><br><span class=\"line\">&lt;iframe id=<span class=\"string\">\"iframe\"</span> src=<span class=\"string\">\"http://www.child.a.com/b.html\"</span> style=<span class=\"string\">\"display:none;\"</span>&gt;&lt;/iframe&gt;</span><br><span class=\"line\"><span class=\"built_in\">document</span>.domain = <span class=\"string\">'a.com'</span>; </span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"string\">'hello world'</span>;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//http://www.child.a.com/b.html</span></span><br><span class=\"line\"><span class=\"built_in\">document</span>.domain = <span class=\"string\">'a.com'</span>; </span><br><span class=\"line\"><span class=\"keyword\">var</span> b = <span class=\"built_in\">window</span>.parent.a;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(b);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"7-window-name-iframe\"><a href=\"#7-window-name-iframe\" class=\"headerlink\" title=\"7. window.name + iframe\"></a>7. window.name + iframe</h3><p><code>window.name</code> 传输技术的基本原理：<br>当在浏览器中打开一个页面，或者在页面中添加一个<code>iframe</code>时即会创建一个对应的<code>window</code>对象，当页面加载另一个新的页面时，<code>window.name</code>的属性是不会变的。这样就可以利用在页面动态添加一个<code>iframe</code>然后加载数据页面，在数据页面将需要的数据赋值给<code>window.name</code>。然而此时承载的<code>iframe</code>的<code>parent</code>页面还是不能直接访问不在同一域下的<code>iframe</code>的那么属性，这时，只需要将iframe再加载一个与承载页面同域的空白页面，即可对<code>window.name</code>进行数据读取。<br><code>window.name</code>属性的独特之处：<code>name</code>值在不同的页面（甚至不同域名）加载后依旧存在，并且可以支持非常长的<code>name</code>值（2MB)<br>总结：通过iframe的src属性由外域转向本地域，跨域数据即由iframe的window.name从外域传递到本地域。这个就巧妙地绕过了浏览器的跨域访问限制，但同时它又是安全操作。</p>\n<p>具体实现：<br><code>http://www.a.com/a.html</code> 主页面<br><code>http://www.b.com/b.html</code> 数据页面<br><code>http://www.a.com/proxy.html</code> 代理页面</p>\n<ul>\n<li><p><code>http://www.a.com/a.html</code>代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">crossDomainGetData</span>(<span class=\"params\">url,callback</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> state = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> iframe = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'iframe'</span>);</span><br><span class=\"line\">    iframe.src = url;</span><br><span class=\"line\">    iframe.onload = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(state === <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> data = iframe.contentWindow.name;<span class=\"comment\">//代理页面成功过后，读取window.name</span></span><br><span class=\"line\">            callback&amp;&amp;callback(data);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">//销毁iframe</span></span><br><span class=\"line\">            iframe.contentWindow.document.write(<span class=\"string\">''</span>);</span><br><span class=\"line\">            iframe.contentWindow.close();</span><br><span class=\"line\">            <span class=\"built_in\">document</span>.body.removeChild(iframe);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>http://www.b.com/b.html</code>代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">window</span>.name = <span class=\"string\">'123'</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>http://www.a.com/proxy.html</code>   （中间代理页，与<code>a.html</code>同域，内容为空即可）</p>\n</li>\n</ul>\n<h3 id=\"8-location-hash-iframe\"><a href=\"#8-location-hash-iframe\" class=\"headerlink\" title=\"8.location.hash + iframe\"></a>8.location.hash + iframe</h3><p>实现原理： <code>a</code>欲与<code>b</code>跨域相互通信，通过中间页<code>c</code>来实现。 三个页面，不同域之间利用<code>iframe</code>的<code>location.hash</code>传值，相同域之间直接<code>js</code>访问来通信。</p>\n<p>具体实现：A域：<code>a.html</code> -&gt; B域：<code>b.html</code> -&gt; A域：<code>c.html</code>，a与b不同域只能通过hash值单向通信，b与c也不同域也只能单向通信，但c与a同域，所以c可通过parent.parent访问a页面所有对象。</p>\n<ul>\n<li><p><code>a.html：(http://www.domain1.com/a.html)</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&lt;iframe id=<span class=\"string\">\"iframe\"</span> src=<span class=\"string\">\"http://www.domain2.com/b.html\"</span> style=<span class=\"string\">\"display:none;\"</span>&gt;&lt;/iframe&gt;</span><br><span class=\"line\"><span class=\"keyword\">var</span> iframe = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'iframe'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 向b.html传hash值</span></span><br><span class=\"line\">setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    iframe.src = iframe.src + <span class=\"string\">'#user=admin'</span>;</span><br><span class=\"line\">&#125;, <span class=\"number\">1000</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 开放给同域c.html的回调方法</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">onCallback</span>(<span class=\"params\">res</span>) </span>&#123;</span><br><span class=\"line\">    alert(<span class=\"string\">'data from c.html ---&gt; '</span> + res);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>b.html：(http://www.domain2.com/b.html)</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&lt;iframe id=<span class=\"string\">\"iframe\"</span> src=<span class=\"string\">\"http://www.domain1.com/c.html\"</span> style=<span class=\"string\">\"display:none;\"</span>&gt;&lt;/iframe&gt;</span><br><span class=\"line\"><span class=\"keyword\">var</span> iframe = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'iframe'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 监听a.html传来的hash值，再传给c.html</span></span><br><span class=\"line\"><span class=\"built_in\">window</span>.onhashchange = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    iframe.src = iframe.src + location.hash;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>c.html：(http://www.domain1.com/c.html)</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 监听b.html传来的hash值</span></span><br><span class=\"line\"><span class=\"built_in\">window</span>.onhashchange = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 再通过操作同域a.html的js回调，将结果传回</span></span><br><span class=\"line\">    <span class=\"built_in\">window</span>.parent.parent.onCallback(<span class=\"string\">'hello: '</span> + location.hash.replace(<span class=\"string\">'#user='</span>, <span class=\"string\">''</span>));</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h3 id=\"9-websocket协议跨域\"><a href=\"#9-websocket协议跨域\" class=\"headerlink\" title=\"9. websocket协议跨域\"></a>9. websocket协议跨域</h3><p><code>websoket</code>协议天然支持跨域，你只需要学会如何使用它即可<a href=\"https://segmentfault.com/a/1190000017086942\" target=\"_blank\" rel=\"noopener\">websocket协议</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"序\"><a href=\"#序\" class=\"headerlink\" title=\"序\"></a>序</h2><p>跨域，相信大家无论是在工作中还是在面试中经常遇到这个问题，常常在网上看到别人所整理的一些方法，看似知道是怎么回事，但如果没有动手实践过，总觉得自己没有真正的掌握，在这里，通过自己认真思考整理一些常用的方法。</p>\n<h2 id=\"跨域的产生\"><a href=\"#跨域的产生\" class=\"headerlink\" title=\"跨域的产生\"></a>跨域的产生</h2><p>相信大家都知道跨域是因为浏览器的同源策略所导致的。所谓同源是指”协议+域名+端口”三者相同，即便两个不同的域名指向同一个ip地址，也非同源。浏览器引入同源策略主要是为了防止XSS，CSRF攻击。</p>\n<blockquote>\n<p>CSRF（Cross-site request forgery），跨站请求伪造，也被称为：one click attack/session riding，缩写为：CSRF/XSRF。</p>\n</blockquote>\n<h2 id=\"跨域的解决方案\"><a href=\"#跨域的解决方案\" class=\"headerlink\" title=\"跨域的解决方案\"></a>跨域的解决方案</h2><h3 id=\"1-通过jsonp跨域\"><a href=\"#1-通过jsonp跨域\" class=\"headerlink\" title=\"1.通过jsonp跨域\"></a>1.通过jsonp跨域</h3><p>首先说一下jsonp的原理，例如我们平时写html的时候常常会使用<br><code>&lt;script src=&quot;www.b.com/js/jquery.js&quot;&gt;&lt;/script&gt;</code>这种方式去取放在另外服务器上的静态资源，这个是不受同源策略所限制的，所以我们利用这一点可以解决跨域的问题。</p>\n<h4 id=\"原生实现\"><a href=\"#原生实现\" class=\"headerlink\" title=\"原生实现\"></a>原生实现</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//在www.a.com域名写下如下代码，去请求www.b.com域名的数据</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> script = <span class=\"built_in\">document</span>.creatElement(<span class=\"string\">'script'</span>);</span><br><span class=\"line\">script.type = <span class=\"string\">'text/javascript'</span>;</span><br><span class=\"line\">script.src = <span class=\"string\">'http://www.b.com/getdata?callback=demo'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">demo</span>(<span class=\"params\">res</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(res);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这里，我们利用动态脚本的src属性，变相地发送了一个<code>http://www.b.com/getdata?callback=demo</code>,这时候，<code>b.com</code>页面接受到这个请求时，如果没有JSONP,会正常返回<code>json</code>的数据结果，像这样：<code>{ msg: &#39;helloworld&#39; }</code>,而利用<code>JSONP</code>,服务端会接受这个<code>callback</code>参数，然后用这个参数值包装要返回的数据：<code>demo({msg: &#39;helloworld&#39;})</code>;</p>\n<p>这时候，如果a.com的页面上正好有一个<code>demo</code> 的函数：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">demo</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(res);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>当远程数据一返回的时候，随着动态脚本的执行，这个<code>demo</code>函数就会被执行。</p>\n<h4 id=\"jquery-ajax请求实现\"><a href=\"#jquery-ajax请求实现\" class=\"headerlink\" title=\"jquery ajax请求实现\"></a>jquery ajax请求实现</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//客户端</span></span><br><span class=\"line\">$.ajax(&#123;</span><br><span class=\"line\">    url:<span class=\"string\">'http:127.0.0.1:8001/list'</span>,</span><br><span class=\"line\">    method:<span class=\"string\">'get'</span>,</span><br><span class=\"line\">    dataType:<span class=\"string\">'jsonp'</span>, <span class=\"comment\">// 请求方式为jsonp</span></span><br><span class=\"line\">    success:<span class=\"function\"><span class=\"params\">res</span>=&gt;</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(res)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//服务器serverJsonp.js</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">'express'</span>)</span><br><span class=\"line\">app = express()</span><br><span class=\"line\">app.listen(<span class=\"number\">8001</span>,()=&gt;&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'ok!'</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">app.get(<span class=\"string\">'list'</span>,(req,res)=&gt;&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> &#123;&#125; = req.query</span><br><span class=\"line\">    <span class=\"keyword\">let</span> data = &#123;</span><br><span class=\"line\">        data:<span class=\"number\">0</span>,</span><br><span class=\"line\">        message:<span class=\"string\">''</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    res.send(<span class=\"string\">'$&#123;callback&#125;($&#123;JSON.stringify(data)&#125;)'</span>)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-CORS跨域资源共享\"><a href=\"#2-CORS跨域资源共享\" class=\"headerlink\" title=\"2.CORS跨域资源共享\"></a>2.CORS跨域资源共享</h3><p>所有浏览器都支持该功能，IE浏览器不能低于<code>IE10</code>。</p>\n<h4 id=\"2-1-简单请求和非简单请求\"><a href=\"#2-1-简单请求和非简单请求\" class=\"headerlink\" title=\"2.1 简单请求和非简单请求\"></a>2.1 简单请求和非简单请求</h4><p>浏览器将<code>CORS</code>请求分成两类：简单请求<code>（simple request）</code>和非简单请求<code>（not-so-simple request)</code>.</p>\n<h5 id=\"简单请求同时满足以下条件-只要不满足以下条件的则为非简单请求\"><a href=\"#简单请求同时满足以下条件-只要不满足以下条件的则为非简单请求\" class=\"headerlink\" title=\"简单请求同时满足以下条件,只要不满足以下条件的则为非简单请求\"></a>简单请求同时满足以下条件,只要不满足以下条件的则为非简单请求</h5><p><img src=\"../images/post01.png\" alt></p>\n<h4 id=\"2-2-进行带有身份凭证的CORS请求\"><a href=\"#2-2-进行带有身份凭证的CORS请求\" class=\"headerlink\" title=\"2.2 进行带有身份凭证的CORS请求\"></a>2.2 进行带有身份凭证的CORS请求</h4><ul>\n<li>默认情况下的跨域请求都是不会把<code>cookie</code>发送给服务器的，在需要发送的情况下，如果是<code>xhr</code>，那么需要设置<code>xhr.withCredentials=true</code></li>\n<li>如果是采用fetch获取的话，那么需要在<code>request</code>里面设置 <code>credentials:&#39;include&#39;</code></li>\n<li>但是如果服务器在预请求的时候没返回<code>Access-Control-Allow-Crenditials:true</code>的话，那么在实际请求的时候，cookie是不会被发送给服务器端的，要特别注意对于简单的get请求，不会有预请求的过程</li>\n<li>那么在实际请求的时候，如果服务器没有返回<code>Access-Control-Allow-Crenditials:true</code>的话那么响应结果浏览器也不会交给请求者<br>对于附带身份凭证的请求，服务器不得设置 <code>Access-Control-Allow-Origin</code> 的值为“<em>”。<br>这是因为请求的首部中携带了 <code>Cookie</code> 信息，如果 <code>Access-Control-Allow-Origin</code><br>的值为“</em>”，请求将会失败。而将 <code>Access-Control-Allow-Origin</code> 的值设置为<br><code>http://www.a.com</code>，则请求将成功执行。</li>\n</ul>\n<h4 id=\"2-3-HTTP响应首部字段\"><a href=\"#2-3-HTTP响应首部字段\" class=\"headerlink\" title=\"2.3 HTTP响应首部字段\"></a>2.3 HTTP响应首部字段</h4><ul>\n<li><code>Access-Control-Allow-Origin</code>: <origin> | *</origin></li>\n<li><code>Access-Control-Expose-Headers</code> 头让服务器把允许浏览器访问的头放入白名单</li>\n<li><code>Access-Control-Max-Age</code> 头指定了preflight请求的结果能够被缓存多久</li>\n<li><code>Access-Control-Allow-Credentials</code> 头指定了当浏览器的<code>credentials</code>设置为<code>true</code>时是否允许浏览器读取<code>response</code>的内容</li>\n<li><code>Access-Control-Allow-Methods</code> 首部字段用于预检请求的响应。其指明了实际请求所允许使用的<code>HTTP</code>方法。</li>\n<li><code>Access-Control-Allow-Headers</code> 首部字段用于预检请求的响应。其指明了实际请求中允许携带的首部字段。<h4 id=\"2-2-以nodejs-express为例，说明如何使用cors解决跨域\"><a href=\"#2-2-以nodejs-express为例，说明如何使用cors解决跨域\" class=\"headerlink\" title=\"2.2 以nodejs express为例，说明如何使用cors解决跨域\"></a>2.2 以nodejs express为例，说明如何使用cors解决跨域</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//server</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> express=<span class=\"built_in\">require</span>(<span class=\"string\">'express'</span>);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> url=<span class=\"built_in\">require</span>(<span class=\"string\">'url'</span>);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> app=express();</span><br><span class=\"line\">    <span class=\"keyword\">var</span> allowCrossDomain = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res, next</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//设置哪个源可以访问我</span></span><br><span class=\"line\">        res.setHeader(<span class=\"string\">'Access-Control-Allow-Origin'</span>, <span class=\"string\">'http://localhost:9001'</span>);</span><br><span class=\"line\">        <span class=\"comment\">//允许哪个方法访问我</span></span><br><span class=\"line\">        res.setHeader(<span class=\"string\">'Access-Control-Allow-Methods'</span>, <span class=\"string\">'GET,PUT,POST,DELETE'</span>);</span><br><span class=\"line\">        <span class=\"comment\">//允许携带哪个头访问我</span></span><br><span class=\"line\">        res.setHeader(<span class=\"string\">'Access-Control-Allow-Headers'</span>, <span class=\"string\">'Content-Type'</span>);</span><br><span class=\"line\">        <span class=\"comment\">//允许携带cookie</span></span><br><span class=\"line\">        res.setHeader(<span class=\"string\">'Access-Control-Allow-Credentials'</span>,<span class=\"string\">'true'</span>);</span><br><span class=\"line\">        <span class=\"comment\">//预检的存活时间</span></span><br><span class=\"line\">        res.setHeader(<span class=\"string\">'Access-Control-Max-Age'</span>,<span class=\"number\">6</span>);</span><br><span class=\"line\">        <span class=\"comment\">//允许前端获取哪个头</span></span><br><span class=\"line\">        res.setHeader(<span class=\"string\">'Access-Control-Expose-Headers'</span>,<span class=\"string\">'name'</span>);</span><br><span class=\"line\">        next();</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    app.use(allowCrossDomain);</span><br><span class=\"line\">    app.get(<span class=\"string\">'/getData'</span>,<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req,res,next</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> queryValue=url.parse(req.url).query;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(queryValue===<span class=\"string\">'fortunewheel@sina.com'</span>)&#123;</span><br><span class=\"line\">            res.send(<span class=\"literal\">true</span>);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            res.send(<span class=\"literal\">false</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    app.listen(<span class=\"number\">3001</span>);</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h3 id=\"3-http-proxy-（http代理）\"><a href=\"#3-http-proxy-（http代理）\" class=\"headerlink\" title=\"3.http proxy （http代理）\"></a>3.http proxy （http代理）</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">webpack+webpack-dev-server</span><br><span class=\"line\">devServer:&#123;</span><br><span class=\"line\">    proxy:&#123;</span><br><span class=\"line\">        <span class=\"string\">'/'</span>:&#123;</span><br><span class=\"line\">            target:<span class=\"string\">'http:127.0.0.1'</span>,</span><br><span class=\"line\">            changeOrigin:<span class=\"literal\">true</span>    <span class=\"comment\">//设置此属性走跨域</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-nginx反向代理\"><a href=\"#4-nginx反向代理\" class=\"headerlink\" title=\"4. nginx反向代理\"></a>4. nginx反向代理</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 监听8080端口</span></span><br><span class=\"line\">    listen <span class=\"number\">8080</span></span><br><span class=\"line\">    <span class=\"comment\">// 域名是localhost</span></span><br><span class=\"line\">    server_name localhost</span><br><span class=\"line\">    <span class=\"comment\">// 凡是localhost:8080/api这个样子的，都转发到真正的服务端的地址http://www.b.com:8080</span></span><br><span class=\"line\">    location ^~ <span class=\"regexp\">/api&#123;</span></span><br><span class=\"line\"><span class=\"regexp\">        proxy_pass  http:/</span><span class=\"regexp\">/www.b.com:8080</span></span><br><span class=\"line\"><span class=\"regexp\">    &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>配置之后就不需要前端做什么修改了，一般我们在前后端分离项目中开发阶段会采用这种方式，但不是所有场景都能这样做，例如后端接口是一个公共的<code>API</code>，比如一些公共服务获取天气什么的。</p>\n<h3 id=\"5-window-postMessage\"><a href=\"#5-window-postMessage\" class=\"headerlink\" title=\"5. window.postMessage\"></a>5. window.postMessage</h3><p><code>postMessage</code>是<code>HTML5 XMLHttpRequest Level 2</code>中的<code>API</code>，且是为数不多可以跨域操作的<code>window</code>属性之一，它可用于解决以下方面的问题：</p>\n<ul>\n<li><code>iframe</code>嵌套页面跨域通信</li>\n<li>页面和其打开的新窗口的通信</li>\n<li>多窗口之间消息传递</li>\n</ul>\n<p>用法：<br><code>postMessage(data,origin)</code>方法接受两个参数，</p>\n<p>data：需要传递的数据，html5规范支持任意基本类型或可复制的对象，但部分浏览器只支持字符串，所以传参时最好用<code>JSON.stringify()</code>序列化。<br>origin：协议+主机+端口号，也可以设置为”*”，表示可以传递给任意窗口，如果要指定和当前窗口同源的话设置为”/“。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//http://www.a.com/a.html</span></span><br><span class=\"line\">&lt;ifram id=<span class=\"string\">\"iframe\"</span> src=<span class=\"string\">\"http://www.b.com/b.html\"</span> style=<span class=\"string\">\"display:none\"</span>&gt;&lt;/iframe&gt;</span><br><span class=\"line\"><span class=\"keyword\">var</span> iframe = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'iframe'</span>);</span><br><span class=\"line\">iframe.onload = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> data = &#123;</span><br><span class=\"line\">        name:<span class=\"string\">'wanglina'</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//向http://www.b.com传递跨域数据</span></span><br><span class=\"line\">    iframe.contentWindow.postMessage(<span class=\"built_in\">JSON</span>.stringify(data),<span class=\"string\">'http://www.b.com'</span>);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//http://www.b.com/b.html</span></span><br><span class=\"line\"><span class=\"built_in\">window</span>.addEventListener(<span class=\"string\">'message'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">ev</span>) </span>&#123;    <span class=\"comment\">//接收http://www.a.com/a.html的数据</span></span><br><span class=\"line\">    alert(<span class=\"string\">'data from http://www.a.com/a.html---&gt; '</span> + ev.data);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> data = <span class=\"built_in\">JSON</span>.parse(ev.data);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (data) &#123;</span><br><span class=\"line\">        data.number = <span class=\"number\">16</span>;</span><br><span class=\"line\">        <span class=\"comment\">// 处理后再发回http://www.a.com/a.html</span></span><br><span class=\"line\">        <span class=\"comment\">// window.parent.postMessage(JSON.stringify(data), 'http://www.a.com');</span></span><br><span class=\"line\">        ev.source.postMessage(<span class=\"built_in\">JSON</span>.stringify(data), <span class=\"string\">'http://www.a.com'</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;, <span class=\"literal\">false</span>);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"6-document-domain-iframe\"><a href=\"#6-document-domain-iframe\" class=\"headerlink\" title=\"6. document.domain + iframe\"></a>6. document.domain + iframe</h3><p>这种方式只适合主域名相同，但子域名不同的<code>iframe</code>跨域。<br>实现原理：两个页面都通过<code>js</code>强制设置<code>document.domain</code>为基础主域，就实现了同域。<br>使用方式：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//http://www.a.com/a.html</span></span><br><span class=\"line\">&lt;iframe id=<span class=\"string\">\"iframe\"</span> src=<span class=\"string\">\"http://www.child.a.com/b.html\"</span> style=<span class=\"string\">\"display:none;\"</span>&gt;&lt;/iframe&gt;</span><br><span class=\"line\"><span class=\"built_in\">document</span>.domain = <span class=\"string\">'a.com'</span>; </span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"string\">'hello world'</span>;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//http://www.child.a.com/b.html</span></span><br><span class=\"line\"><span class=\"built_in\">document</span>.domain = <span class=\"string\">'a.com'</span>; </span><br><span class=\"line\"><span class=\"keyword\">var</span> b = <span class=\"built_in\">window</span>.parent.a;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(b);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"7-window-name-iframe\"><a href=\"#7-window-name-iframe\" class=\"headerlink\" title=\"7. window.name + iframe\"></a>7. window.name + iframe</h3><p><code>window.name</code> 传输技术的基本原理：<br>当在浏览器中打开一个页面，或者在页面中添加一个<code>iframe</code>时即会创建一个对应的<code>window</code>对象，当页面加载另一个新的页面时，<code>window.name</code>的属性是不会变的。这样就可以利用在页面动态添加一个<code>iframe</code>然后加载数据页面，在数据页面将需要的数据赋值给<code>window.name</code>。然而此时承载的<code>iframe</code>的<code>parent</code>页面还是不能直接访问不在同一域下的<code>iframe</code>的那么属性，这时，只需要将iframe再加载一个与承载页面同域的空白页面，即可对<code>window.name</code>进行数据读取。<br><code>window.name</code>属性的独特之处：<code>name</code>值在不同的页面（甚至不同域名）加载后依旧存在，并且可以支持非常长的<code>name</code>值（2MB)<br>总结：通过iframe的src属性由外域转向本地域，跨域数据即由iframe的window.name从外域传递到本地域。这个就巧妙地绕过了浏览器的跨域访问限制，但同时它又是安全操作。</p>\n<p>具体实现：<br><code>http://www.a.com/a.html</code> 主页面<br><code>http://www.b.com/b.html</code> 数据页面<br><code>http://www.a.com/proxy.html</code> 代理页面</p>\n<ul>\n<li><p><code>http://www.a.com/a.html</code>代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">crossDomainGetData</span>(<span class=\"params\">url,callback</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> state = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> iframe = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'iframe'</span>);</span><br><span class=\"line\">    iframe.src = url;</span><br><span class=\"line\">    iframe.onload = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(state === <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> data = iframe.contentWindow.name;<span class=\"comment\">//代理页面成功过后，读取window.name</span></span><br><span class=\"line\">            callback&amp;&amp;callback(data);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">//销毁iframe</span></span><br><span class=\"line\">            iframe.contentWindow.document.write(<span class=\"string\">''</span>);</span><br><span class=\"line\">            iframe.contentWindow.close();</span><br><span class=\"line\">            <span class=\"built_in\">document</span>.body.removeChild(iframe);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>http://www.b.com/b.html</code>代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">window</span>.name = <span class=\"string\">'123'</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>http://www.a.com/proxy.html</code>   （中间代理页，与<code>a.html</code>同域，内容为空即可）</p>\n</li>\n</ul>\n<h3 id=\"8-location-hash-iframe\"><a href=\"#8-location-hash-iframe\" class=\"headerlink\" title=\"8.location.hash + iframe\"></a>8.location.hash + iframe</h3><p>实现原理： <code>a</code>欲与<code>b</code>跨域相互通信，通过中间页<code>c</code>来实现。 三个页面，不同域之间利用<code>iframe</code>的<code>location.hash</code>传值，相同域之间直接<code>js</code>访问来通信。</p>\n<p>具体实现：A域：<code>a.html</code> -&gt; B域：<code>b.html</code> -&gt; A域：<code>c.html</code>，a与b不同域只能通过hash值单向通信，b与c也不同域也只能单向通信，但c与a同域，所以c可通过parent.parent访问a页面所有对象。</p>\n<ul>\n<li><p><code>a.html：(http://www.domain1.com/a.html)</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&lt;iframe id=<span class=\"string\">\"iframe\"</span> src=<span class=\"string\">\"http://www.domain2.com/b.html\"</span> style=<span class=\"string\">\"display:none;\"</span>&gt;&lt;/iframe&gt;</span><br><span class=\"line\"><span class=\"keyword\">var</span> iframe = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'iframe'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 向b.html传hash值</span></span><br><span class=\"line\">setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    iframe.src = iframe.src + <span class=\"string\">'#user=admin'</span>;</span><br><span class=\"line\">&#125;, <span class=\"number\">1000</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 开放给同域c.html的回调方法</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">onCallback</span>(<span class=\"params\">res</span>) </span>&#123;</span><br><span class=\"line\">    alert(<span class=\"string\">'data from c.html ---&gt; '</span> + res);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>b.html：(http://www.domain2.com/b.html)</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&lt;iframe id=<span class=\"string\">\"iframe\"</span> src=<span class=\"string\">\"http://www.domain1.com/c.html\"</span> style=<span class=\"string\">\"display:none;\"</span>&gt;&lt;/iframe&gt;</span><br><span class=\"line\"><span class=\"keyword\">var</span> iframe = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'iframe'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 监听a.html传来的hash值，再传给c.html</span></span><br><span class=\"line\"><span class=\"built_in\">window</span>.onhashchange = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    iframe.src = iframe.src + location.hash;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>c.html：(http://www.domain1.com/c.html)</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 监听b.html传来的hash值</span></span><br><span class=\"line\"><span class=\"built_in\">window</span>.onhashchange = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 再通过操作同域a.html的js回调，将结果传回</span></span><br><span class=\"line\">    <span class=\"built_in\">window</span>.parent.parent.onCallback(<span class=\"string\">'hello: '</span> + location.hash.replace(<span class=\"string\">'#user='</span>, <span class=\"string\">''</span>));</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h3 id=\"9-websocket协议跨域\"><a href=\"#9-websocket协议跨域\" class=\"headerlink\" title=\"9. websocket协议跨域\"></a>9. websocket协议跨域</h3><p><code>websoket</code>协议天然支持跨域，你只需要学会如何使用它即可<a href=\"https://segmentfault.com/a/1190000017086942\" target=\"_blank\" rel=\"noopener\">websocket协议</a></p>\n"},{"title":"essay","date":"2020-02-29T17:52:53.000Z","_content":"\n\n## 序\n随笔。。。。。\n这是一个测试这是一个测试这是一个测试\n\n\n","source":"_posts/essay.md","raw":"---\ntitle: essay\ndate: 2020-03-01 01:52:53\ncategories: 随笔\ntags: 随笔\n---\n\n\n## 序\n随笔。。。。。\n这是一个测试这是一个测试这是一个测试\n\n\n","slug":"essay","published":1,"updated":"2020-03-15T15:05:26.453Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7t6o2vr000epsucau3irs2v","content":"<h2 id=\"序\"><a href=\"#序\" class=\"headerlink\" title=\"序\"></a>序</h2><p>随笔。。。。。<br>这是一个测试这是一个测试这是一个测试</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"序\"><a href=\"#序\" class=\"headerlink\" title=\"序\"></a>序</h2><p>随笔。。。。。<br>这是一个测试这是一个测试这是一个测试</p>\n"},{"title":"浅谈cookie，session和localStorage，sessionStorage的区别及cookie安全方面","date":"2020-03-02T02:47:14.000Z","_content":"\n## 序\n浅谈`cookie`，`session`和`localStorage`，`sessionStorage`的区别，既然是浅谈，就不会详细从底层原理解释这几个的区别，就简单地聊一下，这几个的区别，优缺点，应用场景\n\n## 介绍\n\n浏览器的缓存机制提供了可以将用户数据存储在客户端上的方式，可以利用`cookie`和`session`跟服务端进行数据交互。\n`cookie`和`session`都是用来跟踪浏览器用户身份的会话方式，`cookie`通过在客户端记录信息确定用户身份；session通过在服务器端记录信息确定用户身份，但是`session`的实现依赖于`cookie`。`sessionId`（`session`的唯一标识需要存放在客户端）\n## cookie和session的区别\n\n### 1.使用方式\n\n##### cookie机制：\n- 不设置过期时间的`cookie`，存储在内存中，生命周期在会话期间，关闭浏览器窗口，`cookie`就消失。称为会话`cookie`\n- 设置了过期时间的cookie，会在硬盘中，关闭了浏览器再次打开还是会读取`cookie`，只要不超过时间\n- cookie是服务端发给客户端的特殊信息，`cookie`是以文本的方式保存在客户端，每次请求时都带上它\n\n##### session机制：\n当服务器收到请求需要创建`session`对象时，首先会检查客户端请求中是否包含`sessionid`。如果有`sessionid`，服务器将根据该id返回对应`session`对象。如果客户端请求中没有`sessionid`，服务器会创建新的`session`对象，并把`sessionid`在本次响应中返回给客户端。通常使用cookie方式存储sessionid到客户端，在交互中浏览器按照规则将`sessionid`发送给服务器。如果用户禁用`cookie`，则要使用`URL`重写，可以通过`response.encodeURL(url)`进行实现；`API`对`encodeURL`的解释为，当浏览器支持`cookie`时，`url`不做任何处理；当浏览器不支持`cookie`的时候，将会重写`URL`将`sessionid`拼接到访问地址后。\n\n### 2.保持状态\n`cookie`保存在浏览器端\n`session`保存在服务器端\n\n### 3.存储的大小\n单个`cookie`保存的数据不能超过`4kb`；很多浏览器都限制一个站点最多保存20个`cookie`。\n`session`大小没有限制。\n\n### 4.存储内容\n`cookie`只能保存字符串类型，以文本的方式。\n`session`通过类似与`Hashtable`的数据结构来保存，能支持任何类型的对象（`session`中可含有多个对象）\n\n### 5.安全性\n`session`的安全性大于`cookie`。原因如下：\n- `sessionid`存储在`cookie`中，若要攻破`session`首先要攻破`cookie`；\n- `sessionid`是要有人登录，或者启动`session_start`才会有，所以攻破`cookie`也不一定能得到`sessionid`；\n- 第二次启动`session_start`后，前一次的`sessionid`就是失效了，`session`过期后，`sessionid`也随之失效。\n- `sessionid`是加密的。\n- `cookie`不是很安全，别人可以分析存放在本地的`cookie`并进行`cookie`欺骗，考虑到安全应当使用`session`\n综上所述，攻击者必须在短时间内攻破加密的`sessionid`，这很难。\n\n### 6.性能\n`session`会在一定时间内保存在服务器上。当访问增多，会比较占用你服务器的性能，考虑到减轻服务器性能方面，应当使用`cookie`。\n\n### 7.应用场景\n##### cookie`:\n- 判断用户是否登录过网站，以便下次登录时能够实现自动登录（或者记住密码）。\n- 保存上次登录的时间等信息。\n- 保存上次查看的页面\n- 浏览计数\n\n##### session：\n- 网上商城中的购物车：添加了商品之后客户端处可以知道添加了哪些商品，而服务器端如何判别呢，所以也需要存储一些信息就用到了`session`\n- 保存用户登录信息\n- 将某些数据放入`session`中，供同一用户的不同页面使用\n- 防止用户非法登录\n- 购物车最好使用`cookie`，但是`cookie`是可以在客户端禁用的，这时候我们要使用`cookie+`数据库的方式实现，当从`cookie`中不能取出数据时，就从数据库获取。\n\n### 8.缺点\n##### cookie：\n- 大小受限\n- 用户可以操作（禁用）cookie，使功能受限\n- 安全性较低\n- 有些状态不可能保存在客户端\n- 每次访问都要传送cookie给服务器，浪费宽带\n- cookie数据有路径（path）的概念，可以限制cookie只属于某个路径下。\n\n##### session：\n- `session`保存的东西越多，就越占用服务器内存，对于用户在线人数较多的网站，服务器的内存压力会比较大\n- 依赖于`cookie`（`sessionid`保存在`cookie`），如果禁用`cookie`，则要使用URL重写\n- 创建`session`变量有很大的随意性，可随时调用，不需要开发者做精确地处理，所以过度的使用`session`变量将会导致代码不可读而且不好维护。\n\n## cookie和session的相同点\n- `session`和`cookie`都是由服务器生成的\n- `session`和`cookie`都是键值对，即`session`和`cookie`就是用来保存特定的值的一种技术\n\n\n##  cookie机制(一个cookie的设置以及发送过程分为以下四步)：\n- 客户端发送一个`http`请求到服务器端\n- 服务器端发送一个`http`响应到客户端，其中包含`Set-Cookie`头部\n- 客户端发送一个`http`请求到服务器端，其中包含`Cookie`头部\n- 服务器端发送一个`http`响应到客户端\n\n## cookie属性项\n<table width=\"100%\">\n   <tr>\n      <td>属性项</td>\n      <td>属性项介绍</td>\n   </tr>\n   <tr>\n      <td>NAME=VALUE</td>\n      <td>键值对，可以设置要保存的 Key/Value，注意这里的 NAME 不能和其他属性项的名字一样</td>\n   </tr>\n   <tr>\n      <td>Expires</td>\n      <td>过期时间，在设置的某个时间点后该 Cookie 就会失效</td>\n   </tr>\n   <tr>\n      <td>Domain</td>\n      <td>生成该 Cookie 的域名，如 domain=\"www.baidu.com\"</td>\n   </tr>\n   <tr>\n      <td>Path</td>\n      <td>该 Cookie 是在当前的哪个路径下生成的，如 path=/wp-admin/</td>\n   </tr>\n   <tr>\n      <td>Secure</td>\n      <td>如果设置了这个属性，那么只会在 SSH 连接时才会回传该 Cookie</td>\n   </tr>\n</table>\n\n## 设置cookie\n\n```javascript\nfunction setCookie(json,time){\n    var date = new Date(new Date().getTime()+time*24*60*60*1000).toUTCString();\n    for(var key in json){\n        document.cookie = key+\"=\"+json[key]+\";expires=\"+date\n    }\n}\nsetCookie({\n    name:'wanglina',\n    sex:'female'\n},7);\n\n```\n\n## 获取cookie\n```javascript\nfunction getCookie(attr){\n    return document.cookie.match(new RegExp(\"(^|\\\\s)\"+attr+\"=([^;]+)(;|$)\"))\n}\n```\n\n\n## 清除cookie\n```javascript\nfunction removeCookie(attr){\n    var json = {};\n    json[attr] = \"\";\n    setCookie(json,-1)\n}\n```\n\n## javascript如何判断浏览器是否禁用cookie\n语法：`navigator.cookieEnabled`；\n如果浏览器启用了`cookie`，该属性值为`true`。如果禁用了`cookie`，则值为`false`。\n\n`navigator`：\n `JavaScript`中的一个独立的对象，他用于提供用户所使用的浏览器以及操作系统等信息，以`navigator`对象属性的形式来提供。\n\n\n## 防止javascript脚本读取cookie信息\n\n1.设置HttpOnly\n如果您在cookie中设置了HttpOnly属性，那么通过js脚本将无法读取到cookie信息，这样能有效的防止XSS攻击。\n\n2.HttpOnly的设置样例\n\n```javascript\nresponse.setHeader(\"Set-Cookie\", \"cookiename=value;Path=/;Domain=domainvalue;Max-Age=seconds;HTTPOnly\");\n```\n```bash\n//设置http的cookie\nresponse.setHeader(\"Set-Cookie\", \"uid=112; Path=/; HttpOnly\");\n```\n```bash\n//设置https的cookie\nresponse.setHeader(\"Set-Cookie\", \"uid=112; Path=/; Secure; HttpOnly\");\n```\n \n\n ## WebStorage\n `WebStorage`的目的是克服由`cookie`所带来的一些限制，当数据需要被严格控制在客户端时，不需要持续的将数据发回服务器。\n\n#### WebStorage两个主要目标：\n1.提供一种在`cookie`之外存储会话数据的路径\n2.提供一种存储大量可以跨会话存在的数据的机制\n\n`HTML5`的`WebStorage`提供了两种`API`：`localStorage`（本地存储）和`sessionStorage`（会话存储）\n\n### localStorage和sessionStorage的区别\n\n##### 1.生命周期\n\n`localStorage`的生命周期是永久的，关闭页面或浏览器之后`localStorage`中的数据也不会消失。`localStorage`除非主动删除数据，否则数据永远不会消失。\n`sessionStorage`的生命周期是仅在当前会话下有效。`sessionStorage`引入了一个“浏览器窗口”的概念，`sessionStorage`是在同源的窗口中始终存在的数据。只要这个浏览器窗口没有关闭，即使刷新页面或者进入同源另一个页面，数据依然存在。但是`sessionStorage`在关闭了浏览器窗口后就会被销毁。同时独立的打开同一个窗口同一个页面，`sessionStorage`也是不一样的。\n\n##### 2.存储大小\n`localStorage`和`sessionStorage`的存储数据大小一般都是：5MB\n\n##### 3.存储位置\n`localStorage`和`sessionStorage`都保存在客户端，不与服务器进行交互通信\n\n##### 4.存储内容类型\n`localStorage`和`sessionStorage`只能存储字符串类型，对于复杂的对象可以使用`ECMAScript`提供的`JSON`对象的`stringify`和`parse`来处理\n\n##### 5.获取方式\n```bash\nlocalStorage：window.localStorage\nsessionStorage：window.sessionStorage\n```\n##### 6.应用场景\n`localStorage`：常用于长期登录（+判断用户是否已登录），适合长期保存在本地的数据\n`sessionStorage`：敏感账号一次性登录\n\n## WebStorage的优点\n- 存储空间更大：`cookie`为4KB，而`WebStorage`是5MB\n- 节省网络流量：`WebStorage`不会传送到服务器，存储在本地的数据可以直接获取，也不会像`cookie`一样每次请求都会传送到服务器，所以减少了客户端和服务端的交互，节省了网络流量\n- 对于那种只需要在用户浏览一组页面期间保存而关闭浏览器后就可以丢弃的数据，`sessionStorage`会非常方便\n- 快速显示：有的数据存储在`WebStorage`上再加上浏览器本身的缓存。获取数据时可以从本地获取会比从服务器端获取快得多，所以速度更快\n- 安全性：`WebStorage`不会随着`HTTP header`发送到服务器端，所以安全性相对于`cookie`来说会比较高一些，不会担心截获，但是仍然存在伪造问题\n- `WebStorage`提供了一些方法，数据操作比`cookie`方便\n```bash\nsetItem(key, value) —— 保存数据，以键值对的方式存储信息\ngetItem(key) —— 获取数据，将键值传入，即可获取到对应的value值\nremoveItem(key) —— 删除单个数据，根据键值移除对应的信息\nclear() —— 删除所有的数据\nkey(index) —— 获取某个索引的key\n```\n\n","source":"_posts/cookeVsSession.md","raw":"---\ntitle: 浅谈cookie，session和localStorage，sessionStorage的区别及cookie安全方面\ndate: 2020-03-02 10:47:14\ncategories: 前端\ntags:\n    - 前端\n---\n\n## 序\n浅谈`cookie`，`session`和`localStorage`，`sessionStorage`的区别，既然是浅谈，就不会详细从底层原理解释这几个的区别，就简单地聊一下，这几个的区别，优缺点，应用场景\n\n## 介绍\n\n浏览器的缓存机制提供了可以将用户数据存储在客户端上的方式，可以利用`cookie`和`session`跟服务端进行数据交互。\n`cookie`和`session`都是用来跟踪浏览器用户身份的会话方式，`cookie`通过在客户端记录信息确定用户身份；session通过在服务器端记录信息确定用户身份，但是`session`的实现依赖于`cookie`。`sessionId`（`session`的唯一标识需要存放在客户端）\n## cookie和session的区别\n\n### 1.使用方式\n\n##### cookie机制：\n- 不设置过期时间的`cookie`，存储在内存中，生命周期在会话期间，关闭浏览器窗口，`cookie`就消失。称为会话`cookie`\n- 设置了过期时间的cookie，会在硬盘中，关闭了浏览器再次打开还是会读取`cookie`，只要不超过时间\n- cookie是服务端发给客户端的特殊信息，`cookie`是以文本的方式保存在客户端，每次请求时都带上它\n\n##### session机制：\n当服务器收到请求需要创建`session`对象时，首先会检查客户端请求中是否包含`sessionid`。如果有`sessionid`，服务器将根据该id返回对应`session`对象。如果客户端请求中没有`sessionid`，服务器会创建新的`session`对象，并把`sessionid`在本次响应中返回给客户端。通常使用cookie方式存储sessionid到客户端，在交互中浏览器按照规则将`sessionid`发送给服务器。如果用户禁用`cookie`，则要使用`URL`重写，可以通过`response.encodeURL(url)`进行实现；`API`对`encodeURL`的解释为，当浏览器支持`cookie`时，`url`不做任何处理；当浏览器不支持`cookie`的时候，将会重写`URL`将`sessionid`拼接到访问地址后。\n\n### 2.保持状态\n`cookie`保存在浏览器端\n`session`保存在服务器端\n\n### 3.存储的大小\n单个`cookie`保存的数据不能超过`4kb`；很多浏览器都限制一个站点最多保存20个`cookie`。\n`session`大小没有限制。\n\n### 4.存储内容\n`cookie`只能保存字符串类型，以文本的方式。\n`session`通过类似与`Hashtable`的数据结构来保存，能支持任何类型的对象（`session`中可含有多个对象）\n\n### 5.安全性\n`session`的安全性大于`cookie`。原因如下：\n- `sessionid`存储在`cookie`中，若要攻破`session`首先要攻破`cookie`；\n- `sessionid`是要有人登录，或者启动`session_start`才会有，所以攻破`cookie`也不一定能得到`sessionid`；\n- 第二次启动`session_start`后，前一次的`sessionid`就是失效了，`session`过期后，`sessionid`也随之失效。\n- `sessionid`是加密的。\n- `cookie`不是很安全，别人可以分析存放在本地的`cookie`并进行`cookie`欺骗，考虑到安全应当使用`session`\n综上所述，攻击者必须在短时间内攻破加密的`sessionid`，这很难。\n\n### 6.性能\n`session`会在一定时间内保存在服务器上。当访问增多，会比较占用你服务器的性能，考虑到减轻服务器性能方面，应当使用`cookie`。\n\n### 7.应用场景\n##### cookie`:\n- 判断用户是否登录过网站，以便下次登录时能够实现自动登录（或者记住密码）。\n- 保存上次登录的时间等信息。\n- 保存上次查看的页面\n- 浏览计数\n\n##### session：\n- 网上商城中的购物车：添加了商品之后客户端处可以知道添加了哪些商品，而服务器端如何判别呢，所以也需要存储一些信息就用到了`session`\n- 保存用户登录信息\n- 将某些数据放入`session`中，供同一用户的不同页面使用\n- 防止用户非法登录\n- 购物车最好使用`cookie`，但是`cookie`是可以在客户端禁用的，这时候我们要使用`cookie+`数据库的方式实现，当从`cookie`中不能取出数据时，就从数据库获取。\n\n### 8.缺点\n##### cookie：\n- 大小受限\n- 用户可以操作（禁用）cookie，使功能受限\n- 安全性较低\n- 有些状态不可能保存在客户端\n- 每次访问都要传送cookie给服务器，浪费宽带\n- cookie数据有路径（path）的概念，可以限制cookie只属于某个路径下。\n\n##### session：\n- `session`保存的东西越多，就越占用服务器内存，对于用户在线人数较多的网站，服务器的内存压力会比较大\n- 依赖于`cookie`（`sessionid`保存在`cookie`），如果禁用`cookie`，则要使用URL重写\n- 创建`session`变量有很大的随意性，可随时调用，不需要开发者做精确地处理，所以过度的使用`session`变量将会导致代码不可读而且不好维护。\n\n## cookie和session的相同点\n- `session`和`cookie`都是由服务器生成的\n- `session`和`cookie`都是键值对，即`session`和`cookie`就是用来保存特定的值的一种技术\n\n\n##  cookie机制(一个cookie的设置以及发送过程分为以下四步)：\n- 客户端发送一个`http`请求到服务器端\n- 服务器端发送一个`http`响应到客户端，其中包含`Set-Cookie`头部\n- 客户端发送一个`http`请求到服务器端，其中包含`Cookie`头部\n- 服务器端发送一个`http`响应到客户端\n\n## cookie属性项\n<table width=\"100%\">\n   <tr>\n      <td>属性项</td>\n      <td>属性项介绍</td>\n   </tr>\n   <tr>\n      <td>NAME=VALUE</td>\n      <td>键值对，可以设置要保存的 Key/Value，注意这里的 NAME 不能和其他属性项的名字一样</td>\n   </tr>\n   <tr>\n      <td>Expires</td>\n      <td>过期时间，在设置的某个时间点后该 Cookie 就会失效</td>\n   </tr>\n   <tr>\n      <td>Domain</td>\n      <td>生成该 Cookie 的域名，如 domain=\"www.baidu.com\"</td>\n   </tr>\n   <tr>\n      <td>Path</td>\n      <td>该 Cookie 是在当前的哪个路径下生成的，如 path=/wp-admin/</td>\n   </tr>\n   <tr>\n      <td>Secure</td>\n      <td>如果设置了这个属性，那么只会在 SSH 连接时才会回传该 Cookie</td>\n   </tr>\n</table>\n\n## 设置cookie\n\n```javascript\nfunction setCookie(json,time){\n    var date = new Date(new Date().getTime()+time*24*60*60*1000).toUTCString();\n    for(var key in json){\n        document.cookie = key+\"=\"+json[key]+\";expires=\"+date\n    }\n}\nsetCookie({\n    name:'wanglina',\n    sex:'female'\n},7);\n\n```\n\n## 获取cookie\n```javascript\nfunction getCookie(attr){\n    return document.cookie.match(new RegExp(\"(^|\\\\s)\"+attr+\"=([^;]+)(;|$)\"))\n}\n```\n\n\n## 清除cookie\n```javascript\nfunction removeCookie(attr){\n    var json = {};\n    json[attr] = \"\";\n    setCookie(json,-1)\n}\n```\n\n## javascript如何判断浏览器是否禁用cookie\n语法：`navigator.cookieEnabled`；\n如果浏览器启用了`cookie`，该属性值为`true`。如果禁用了`cookie`，则值为`false`。\n\n`navigator`：\n `JavaScript`中的一个独立的对象，他用于提供用户所使用的浏览器以及操作系统等信息，以`navigator`对象属性的形式来提供。\n\n\n## 防止javascript脚本读取cookie信息\n\n1.设置HttpOnly\n如果您在cookie中设置了HttpOnly属性，那么通过js脚本将无法读取到cookie信息，这样能有效的防止XSS攻击。\n\n2.HttpOnly的设置样例\n\n```javascript\nresponse.setHeader(\"Set-Cookie\", \"cookiename=value;Path=/;Domain=domainvalue;Max-Age=seconds;HTTPOnly\");\n```\n```bash\n//设置http的cookie\nresponse.setHeader(\"Set-Cookie\", \"uid=112; Path=/; HttpOnly\");\n```\n```bash\n//设置https的cookie\nresponse.setHeader(\"Set-Cookie\", \"uid=112; Path=/; Secure; HttpOnly\");\n```\n \n\n ## WebStorage\n `WebStorage`的目的是克服由`cookie`所带来的一些限制，当数据需要被严格控制在客户端时，不需要持续的将数据发回服务器。\n\n#### WebStorage两个主要目标：\n1.提供一种在`cookie`之外存储会话数据的路径\n2.提供一种存储大量可以跨会话存在的数据的机制\n\n`HTML5`的`WebStorage`提供了两种`API`：`localStorage`（本地存储）和`sessionStorage`（会话存储）\n\n### localStorage和sessionStorage的区别\n\n##### 1.生命周期\n\n`localStorage`的生命周期是永久的，关闭页面或浏览器之后`localStorage`中的数据也不会消失。`localStorage`除非主动删除数据，否则数据永远不会消失。\n`sessionStorage`的生命周期是仅在当前会话下有效。`sessionStorage`引入了一个“浏览器窗口”的概念，`sessionStorage`是在同源的窗口中始终存在的数据。只要这个浏览器窗口没有关闭，即使刷新页面或者进入同源另一个页面，数据依然存在。但是`sessionStorage`在关闭了浏览器窗口后就会被销毁。同时独立的打开同一个窗口同一个页面，`sessionStorage`也是不一样的。\n\n##### 2.存储大小\n`localStorage`和`sessionStorage`的存储数据大小一般都是：5MB\n\n##### 3.存储位置\n`localStorage`和`sessionStorage`都保存在客户端，不与服务器进行交互通信\n\n##### 4.存储内容类型\n`localStorage`和`sessionStorage`只能存储字符串类型，对于复杂的对象可以使用`ECMAScript`提供的`JSON`对象的`stringify`和`parse`来处理\n\n##### 5.获取方式\n```bash\nlocalStorage：window.localStorage\nsessionStorage：window.sessionStorage\n```\n##### 6.应用场景\n`localStorage`：常用于长期登录（+判断用户是否已登录），适合长期保存在本地的数据\n`sessionStorage`：敏感账号一次性登录\n\n## WebStorage的优点\n- 存储空间更大：`cookie`为4KB，而`WebStorage`是5MB\n- 节省网络流量：`WebStorage`不会传送到服务器，存储在本地的数据可以直接获取，也不会像`cookie`一样每次请求都会传送到服务器，所以减少了客户端和服务端的交互，节省了网络流量\n- 对于那种只需要在用户浏览一组页面期间保存而关闭浏览器后就可以丢弃的数据，`sessionStorage`会非常方便\n- 快速显示：有的数据存储在`WebStorage`上再加上浏览器本身的缓存。获取数据时可以从本地获取会比从服务器端获取快得多，所以速度更快\n- 安全性：`WebStorage`不会随着`HTTP header`发送到服务器端，所以安全性相对于`cookie`来说会比较高一些，不会担心截获，但是仍然存在伪造问题\n- `WebStorage`提供了一些方法，数据操作比`cookie`方便\n```bash\nsetItem(key, value) —— 保存数据，以键值对的方式存储信息\ngetItem(key) —— 获取数据，将键值传入，即可获取到对应的value值\nremoveItem(key) —— 删除单个数据，根据键值移除对应的信息\nclear() —— 删除所有的数据\nkey(index) —— 获取某个索引的key\n```\n\n","slug":"cookeVsSession","published":1,"updated":"2020-03-15T09:51:03.791Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7t6o2vv000fpsuc2v8p4f81","content":"<h2 id=\"序\"><a href=\"#序\" class=\"headerlink\" title=\"序\"></a>序</h2><p>浅谈<code>cookie</code>，<code>session</code>和<code>localStorage</code>，<code>sessionStorage</code>的区别，既然是浅谈，就不会详细从底层原理解释这几个的区别，就简单地聊一下，这几个的区别，优缺点，应用场景</p>\n<h2 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h2><p>浏览器的缓存机制提供了可以将用户数据存储在客户端上的方式，可以利用<code>cookie</code>和<code>session</code>跟服务端进行数据交互。<br><code>cookie</code>和<code>session</code>都是用来跟踪浏览器用户身份的会话方式，<code>cookie</code>通过在客户端记录信息确定用户身份；session通过在服务器端记录信息确定用户身份，但是<code>session</code>的实现依赖于<code>cookie</code>。<code>sessionId</code>（<code>session</code>的唯一标识需要存放在客户端）</p>\n<h2 id=\"cookie和session的区别\"><a href=\"#cookie和session的区别\" class=\"headerlink\" title=\"cookie和session的区别\"></a>cookie和session的区别</h2><h3 id=\"1-使用方式\"><a href=\"#1-使用方式\" class=\"headerlink\" title=\"1.使用方式\"></a>1.使用方式</h3><h5 id=\"cookie机制：\"><a href=\"#cookie机制：\" class=\"headerlink\" title=\"cookie机制：\"></a>cookie机制：</h5><ul>\n<li>不设置过期时间的<code>cookie</code>，存储在内存中，生命周期在会话期间，关闭浏览器窗口，<code>cookie</code>就消失。称为会话<code>cookie</code></li>\n<li>设置了过期时间的cookie，会在硬盘中，关闭了浏览器再次打开还是会读取<code>cookie</code>，只要不超过时间</li>\n<li>cookie是服务端发给客户端的特殊信息，<code>cookie</code>是以文本的方式保存在客户端，每次请求时都带上它</li>\n</ul>\n<h5 id=\"session机制：\"><a href=\"#session机制：\" class=\"headerlink\" title=\"session机制：\"></a>session机制：</h5><p>当服务器收到请求需要创建<code>session</code>对象时，首先会检查客户端请求中是否包含<code>sessionid</code>。如果有<code>sessionid</code>，服务器将根据该id返回对应<code>session</code>对象。如果客户端请求中没有<code>sessionid</code>，服务器会创建新的<code>session</code>对象，并把<code>sessionid</code>在本次响应中返回给客户端。通常使用cookie方式存储sessionid到客户端，在交互中浏览器按照规则将<code>sessionid</code>发送给服务器。如果用户禁用<code>cookie</code>，则要使用<code>URL</code>重写，可以通过<code>response.encodeURL(url)</code>进行实现；<code>API</code>对<code>encodeURL</code>的解释为，当浏览器支持<code>cookie</code>时，<code>url</code>不做任何处理；当浏览器不支持<code>cookie</code>的时候，将会重写<code>URL</code>将<code>sessionid</code>拼接到访问地址后。</p>\n<h3 id=\"2-保持状态\"><a href=\"#2-保持状态\" class=\"headerlink\" title=\"2.保持状态\"></a>2.保持状态</h3><p><code>cookie</code>保存在浏览器端<br><code>session</code>保存在服务器端</p>\n<h3 id=\"3-存储的大小\"><a href=\"#3-存储的大小\" class=\"headerlink\" title=\"3.存储的大小\"></a>3.存储的大小</h3><p>单个<code>cookie</code>保存的数据不能超过<code>4kb</code>；很多浏览器都限制一个站点最多保存20个<code>cookie</code>。<br><code>session</code>大小没有限制。</p>\n<h3 id=\"4-存储内容\"><a href=\"#4-存储内容\" class=\"headerlink\" title=\"4.存储内容\"></a>4.存储内容</h3><p><code>cookie</code>只能保存字符串类型，以文本的方式。<br><code>session</code>通过类似与<code>Hashtable</code>的数据结构来保存，能支持任何类型的对象（<code>session</code>中可含有多个对象）</p>\n<h3 id=\"5-安全性\"><a href=\"#5-安全性\" class=\"headerlink\" title=\"5.安全性\"></a>5.安全性</h3><p><code>session</code>的安全性大于<code>cookie</code>。原因如下：</p>\n<ul>\n<li><code>sessionid</code>存储在<code>cookie</code>中，若要攻破<code>session</code>首先要攻破<code>cookie</code>；</li>\n<li><code>sessionid</code>是要有人登录，或者启动<code>session_start</code>才会有，所以攻破<code>cookie</code>也不一定能得到<code>sessionid</code>；</li>\n<li>第二次启动<code>session_start</code>后，前一次的<code>sessionid</code>就是失效了，<code>session</code>过期后，<code>sessionid</code>也随之失效。</li>\n<li><code>sessionid</code>是加密的。</li>\n<li><code>cookie</code>不是很安全，别人可以分析存放在本地的<code>cookie</code>并进行<code>cookie</code>欺骗，考虑到安全应当使用<code>session</code><br>综上所述，攻击者必须在短时间内攻破加密的<code>sessionid</code>，这很难。</li>\n</ul>\n<h3 id=\"6-性能\"><a href=\"#6-性能\" class=\"headerlink\" title=\"6.性能\"></a>6.性能</h3><p><code>session</code>会在一定时间内保存在服务器上。当访问增多，会比较占用你服务器的性能，考虑到减轻服务器性能方面，应当使用<code>cookie</code>。</p>\n<h3 id=\"7-应用场景\"><a href=\"#7-应用场景\" class=\"headerlink\" title=\"7.应用场景\"></a>7.应用场景</h3><h5 id=\"cookie\"><a href=\"#cookie\" class=\"headerlink\" title=\"cookie`:\"></a>cookie`:</h5><ul>\n<li>判断用户是否登录过网站，以便下次登录时能够实现自动登录（或者记住密码）。</li>\n<li>保存上次登录的时间等信息。</li>\n<li>保存上次查看的页面</li>\n<li>浏览计数</li>\n</ul>\n<h5 id=\"session：\"><a href=\"#session：\" class=\"headerlink\" title=\"session：\"></a>session：</h5><ul>\n<li>网上商城中的购物车：添加了商品之后客户端处可以知道添加了哪些商品，而服务器端如何判别呢，所以也需要存储一些信息就用到了<code>session</code></li>\n<li>保存用户登录信息</li>\n<li>将某些数据放入<code>session</code>中，供同一用户的不同页面使用</li>\n<li>防止用户非法登录</li>\n<li>购物车最好使用<code>cookie</code>，但是<code>cookie</code>是可以在客户端禁用的，这时候我们要使用<code>cookie+</code>数据库的方式实现，当从<code>cookie</code>中不能取出数据时，就从数据库获取。</li>\n</ul>\n<h3 id=\"8-缺点\"><a href=\"#8-缺点\" class=\"headerlink\" title=\"8.缺点\"></a>8.缺点</h3><h5 id=\"cookie：\"><a href=\"#cookie：\" class=\"headerlink\" title=\"cookie：\"></a>cookie：</h5><ul>\n<li>大小受限</li>\n<li>用户可以操作（禁用）cookie，使功能受限</li>\n<li>安全性较低</li>\n<li>有些状态不可能保存在客户端</li>\n<li>每次访问都要传送cookie给服务器，浪费宽带</li>\n<li>cookie数据有路径（path）的概念，可以限制cookie只属于某个路径下。</li>\n</ul>\n<h5 id=\"session：-1\"><a href=\"#session：-1\" class=\"headerlink\" title=\"session：\"></a>session：</h5><ul>\n<li><code>session</code>保存的东西越多，就越占用服务器内存，对于用户在线人数较多的网站，服务器的内存压力会比较大</li>\n<li>依赖于<code>cookie</code>（<code>sessionid</code>保存在<code>cookie</code>），如果禁用<code>cookie</code>，则要使用URL重写</li>\n<li>创建<code>session</code>变量有很大的随意性，可随时调用，不需要开发者做精确地处理，所以过度的使用<code>session</code>变量将会导致代码不可读而且不好维护。</li>\n</ul>\n<h2 id=\"cookie和session的相同点\"><a href=\"#cookie和session的相同点\" class=\"headerlink\" title=\"cookie和session的相同点\"></a>cookie和session的相同点</h2><ul>\n<li><code>session</code>和<code>cookie</code>都是由服务器生成的</li>\n<li><code>session</code>和<code>cookie</code>都是键值对，即<code>session</code>和<code>cookie</code>就是用来保存特定的值的一种技术</li>\n</ul>\n<h2 id=\"cookie机制-一个cookie的设置以及发送过程分为以下四步-：\"><a href=\"#cookie机制-一个cookie的设置以及发送过程分为以下四步-：\" class=\"headerlink\" title=\"cookie机制(一个cookie的设置以及发送过程分为以下四步)：\"></a>cookie机制(一个cookie的设置以及发送过程分为以下四步)：</h2><ul>\n<li>客户端发送一个<code>http</code>请求到服务器端</li>\n<li>服务器端发送一个<code>http</code>响应到客户端，其中包含<code>Set-Cookie</code>头部</li>\n<li>客户端发送一个<code>http</code>请求到服务器端，其中包含<code>Cookie</code>头部</li>\n<li>服务器端发送一个<code>http</code>响应到客户端</li>\n</ul>\n<h2 id=\"cookie属性项\"><a href=\"#cookie属性项\" class=\"headerlink\" title=\"cookie属性项\"></a>cookie属性项</h2><table width=\"100%\">\n   <tr>\n      <td>属性项</td>\n      <td>属性项介绍</td>\n   </tr>\n   <tr>\n      <td>NAME=VALUE</td>\n      <td>键值对，可以设置要保存的 Key/Value，注意这里的 NAME 不能和其他属性项的名字一样</td>\n   </tr>\n   <tr>\n      <td>Expires</td>\n      <td>过期时间，在设置的某个时间点后该 Cookie 就会失效</td>\n   </tr>\n   <tr>\n      <td>Domain</td>\n      <td>生成该 Cookie 的域名，如 domain=\"www.baidu.com\"</td>\n   </tr>\n   <tr>\n      <td>Path</td>\n      <td>该 Cookie 是在当前的哪个路径下生成的，如 path=/wp-admin/</td>\n   </tr>\n   <tr>\n      <td>Secure</td>\n      <td>如果设置了这个属性，那么只会在 SSH 连接时才会回传该 Cookie</td>\n   </tr>\n</table>\n\n<h2 id=\"设置cookie\"><a href=\"#设置cookie\" class=\"headerlink\" title=\"设置cookie\"></a>设置cookie</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">setCookie</span>(<span class=\"params\">json,time</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> date = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getTime()+time*<span class=\"number\">24</span>*<span class=\"number\">60</span>*<span class=\"number\">60</span>*<span class=\"number\">1000</span>).toUTCString();</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> key <span class=\"keyword\">in</span> json)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">document</span>.cookie = key+<span class=\"string\">\"=\"</span>+json[key]+<span class=\"string\">\";expires=\"</span>+date</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">setCookie(&#123;</span><br><span class=\"line\">    name:<span class=\"string\">'wanglina'</span>,</span><br><span class=\"line\">    sex:<span class=\"string\">'female'</span></span><br><span class=\"line\">&#125;,<span class=\"number\">7</span>);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"获取cookie\"><a href=\"#获取cookie\" class=\"headerlink\" title=\"获取cookie\"></a>获取cookie</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getCookie</span>(<span class=\"params\">attr</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">document</span>.cookie.match(<span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(<span class=\"string\">\"(^|\\\\s)\"</span>+attr+<span class=\"string\">\"=([^;]+)(;|$)\"</span>))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"清除cookie\"><a href=\"#清除cookie\" class=\"headerlink\" title=\"清除cookie\"></a>清除cookie</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">removeCookie</span>(<span class=\"params\">attr</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> json = &#123;&#125;;</span><br><span class=\"line\">    json[attr] = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">    setCookie(json,<span class=\"number\">-1</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"javascript如何判断浏览器是否禁用cookie\"><a href=\"#javascript如何判断浏览器是否禁用cookie\" class=\"headerlink\" title=\"javascript如何判断浏览器是否禁用cookie\"></a>javascript如何判断浏览器是否禁用cookie</h2><p>语法：<code>navigator.cookieEnabled</code>；<br>如果浏览器启用了<code>cookie</code>，该属性值为<code>true</code>。如果禁用了<code>cookie</code>，则值为<code>false</code>。</p>\n<p><code>navigator</code>：<br> <code>JavaScript</code>中的一个独立的对象，他用于提供用户所使用的浏览器以及操作系统等信息，以<code>navigator</code>对象属性的形式来提供。</p>\n<h2 id=\"防止javascript脚本读取cookie信息\"><a href=\"#防止javascript脚本读取cookie信息\" class=\"headerlink\" title=\"防止javascript脚本读取cookie信息\"></a>防止javascript脚本读取cookie信息</h2><p>1.设置HttpOnly<br>如果您在cookie中设置了HttpOnly属性，那么通过js脚本将无法读取到cookie信息，这样能有效的防止XSS攻击。</p>\n<p>2.HttpOnly的设置样例</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">response.setHeader(<span class=\"string\">\"Set-Cookie\"</span>, <span class=\"string\">\"cookiename=value;Path=/;Domain=domainvalue;Max-Age=seconds;HTTPOnly\"</span>);</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//设置http的cookie</span><br><span class=\"line\">response.setHeader(<span class=\"string\">\"Set-Cookie\"</span>, <span class=\"string\">\"uid=112; Path=/; HttpOnly\"</span>);</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//设置https的cookie</span><br><span class=\"line\">response.setHeader(<span class=\"string\">\"Set-Cookie\"</span>, <span class=\"string\">\"uid=112; Path=/; Secure; HttpOnly\"</span>);</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"WebStorage\"><a href=\"#WebStorage\" class=\"headerlink\" title=\"WebStorage\"></a>WebStorage</h2><p> <code>WebStorage</code>的目的是克服由<code>cookie</code>所带来的一些限制，当数据需要被严格控制在客户端时，不需要持续的将数据发回服务器。</p>\n<h4 id=\"WebStorage两个主要目标：\"><a href=\"#WebStorage两个主要目标：\" class=\"headerlink\" title=\"WebStorage两个主要目标：\"></a>WebStorage两个主要目标：</h4><p>1.提供一种在<code>cookie</code>之外存储会话数据的路径<br>2.提供一种存储大量可以跨会话存在的数据的机制</p>\n<p><code>HTML5</code>的<code>WebStorage</code>提供了两种<code>API</code>：<code>localStorage</code>（本地存储）和<code>sessionStorage</code>（会话存储）</p>\n<h3 id=\"localStorage和sessionStorage的区别\"><a href=\"#localStorage和sessionStorage的区别\" class=\"headerlink\" title=\"localStorage和sessionStorage的区别\"></a>localStorage和sessionStorage的区别</h3><h5 id=\"1-生命周期\"><a href=\"#1-生命周期\" class=\"headerlink\" title=\"1.生命周期\"></a>1.生命周期</h5><p><code>localStorage</code>的生命周期是永久的，关闭页面或浏览器之后<code>localStorage</code>中的数据也不会消失。<code>localStorage</code>除非主动删除数据，否则数据永远不会消失。<br><code>sessionStorage</code>的生命周期是仅在当前会话下有效。<code>sessionStorage</code>引入了一个“浏览器窗口”的概念，<code>sessionStorage</code>是在同源的窗口中始终存在的数据。只要这个浏览器窗口没有关闭，即使刷新页面或者进入同源另一个页面，数据依然存在。但是<code>sessionStorage</code>在关闭了浏览器窗口后就会被销毁。同时独立的打开同一个窗口同一个页面，<code>sessionStorage</code>也是不一样的。</p>\n<h5 id=\"2-存储大小\"><a href=\"#2-存储大小\" class=\"headerlink\" title=\"2.存储大小\"></a>2.存储大小</h5><p><code>localStorage</code>和<code>sessionStorage</code>的存储数据大小一般都是：5MB</p>\n<h5 id=\"3-存储位置\"><a href=\"#3-存储位置\" class=\"headerlink\" title=\"3.存储位置\"></a>3.存储位置</h5><p><code>localStorage</code>和<code>sessionStorage</code>都保存在客户端，不与服务器进行交互通信</p>\n<h5 id=\"4-存储内容类型\"><a href=\"#4-存储内容类型\" class=\"headerlink\" title=\"4.存储内容类型\"></a>4.存储内容类型</h5><p><code>localStorage</code>和<code>sessionStorage</code>只能存储字符串类型，对于复杂的对象可以使用<code>ECMAScript</code>提供的<code>JSON</code>对象的<code>stringify</code>和<code>parse</code>来处理</p>\n<h5 id=\"5-获取方式\"><a href=\"#5-获取方式\" class=\"headerlink\" title=\"5.获取方式\"></a>5.获取方式</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">localStorage：window.localStorage</span><br><span class=\"line\">sessionStorage：window.sessionStorage</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"6-应用场景\"><a href=\"#6-应用场景\" class=\"headerlink\" title=\"6.应用场景\"></a>6.应用场景</h5><p><code>localStorage</code>：常用于长期登录（+判断用户是否已登录），适合长期保存在本地的数据<br><code>sessionStorage</code>：敏感账号一次性登录</p>\n<h2 id=\"WebStorage的优点\"><a href=\"#WebStorage的优点\" class=\"headerlink\" title=\"WebStorage的优点\"></a>WebStorage的优点</h2><ul>\n<li>存储空间更大：<code>cookie</code>为4KB，而<code>WebStorage</code>是5MB</li>\n<li>节省网络流量：<code>WebStorage</code>不会传送到服务器，存储在本地的数据可以直接获取，也不会像<code>cookie</code>一样每次请求都会传送到服务器，所以减少了客户端和服务端的交互，节省了网络流量</li>\n<li>对于那种只需要在用户浏览一组页面期间保存而关闭浏览器后就可以丢弃的数据，<code>sessionStorage</code>会非常方便</li>\n<li>快速显示：有的数据存储在<code>WebStorage</code>上再加上浏览器本身的缓存。获取数据时可以从本地获取会比从服务器端获取快得多，所以速度更快</li>\n<li>安全性：<code>WebStorage</code>不会随着<code>HTTP header</code>发送到服务器端，所以安全性相对于<code>cookie</code>来说会比较高一些，不会担心截获，但是仍然存在伪造问题</li>\n<li><code>WebStorage</code>提供了一些方法，数据操作比<code>cookie</code>方便<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">setItem(key, value) —— 保存数据，以键值对的方式存储信息</span><br><span class=\"line\">getItem(key) —— 获取数据，将键值传入，即可获取到对应的value值</span><br><span class=\"line\">removeItem(key) —— 删除单个数据，根据键值移除对应的信息</span><br><span class=\"line\">clear() —— 删除所有的数据</span><br><span class=\"line\">key(index) —— 获取某个索引的key</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"序\"><a href=\"#序\" class=\"headerlink\" title=\"序\"></a>序</h2><p>浅谈<code>cookie</code>，<code>session</code>和<code>localStorage</code>，<code>sessionStorage</code>的区别，既然是浅谈，就不会详细从底层原理解释这几个的区别，就简单地聊一下，这几个的区别，优缺点，应用场景</p>\n<h2 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h2><p>浏览器的缓存机制提供了可以将用户数据存储在客户端上的方式，可以利用<code>cookie</code>和<code>session</code>跟服务端进行数据交互。<br><code>cookie</code>和<code>session</code>都是用来跟踪浏览器用户身份的会话方式，<code>cookie</code>通过在客户端记录信息确定用户身份；session通过在服务器端记录信息确定用户身份，但是<code>session</code>的实现依赖于<code>cookie</code>。<code>sessionId</code>（<code>session</code>的唯一标识需要存放在客户端）</p>\n<h2 id=\"cookie和session的区别\"><a href=\"#cookie和session的区别\" class=\"headerlink\" title=\"cookie和session的区别\"></a>cookie和session的区别</h2><h3 id=\"1-使用方式\"><a href=\"#1-使用方式\" class=\"headerlink\" title=\"1.使用方式\"></a>1.使用方式</h3><h5 id=\"cookie机制：\"><a href=\"#cookie机制：\" class=\"headerlink\" title=\"cookie机制：\"></a>cookie机制：</h5><ul>\n<li>不设置过期时间的<code>cookie</code>，存储在内存中，生命周期在会话期间，关闭浏览器窗口，<code>cookie</code>就消失。称为会话<code>cookie</code></li>\n<li>设置了过期时间的cookie，会在硬盘中，关闭了浏览器再次打开还是会读取<code>cookie</code>，只要不超过时间</li>\n<li>cookie是服务端发给客户端的特殊信息，<code>cookie</code>是以文本的方式保存在客户端，每次请求时都带上它</li>\n</ul>\n<h5 id=\"session机制：\"><a href=\"#session机制：\" class=\"headerlink\" title=\"session机制：\"></a>session机制：</h5><p>当服务器收到请求需要创建<code>session</code>对象时，首先会检查客户端请求中是否包含<code>sessionid</code>。如果有<code>sessionid</code>，服务器将根据该id返回对应<code>session</code>对象。如果客户端请求中没有<code>sessionid</code>，服务器会创建新的<code>session</code>对象，并把<code>sessionid</code>在本次响应中返回给客户端。通常使用cookie方式存储sessionid到客户端，在交互中浏览器按照规则将<code>sessionid</code>发送给服务器。如果用户禁用<code>cookie</code>，则要使用<code>URL</code>重写，可以通过<code>response.encodeURL(url)</code>进行实现；<code>API</code>对<code>encodeURL</code>的解释为，当浏览器支持<code>cookie</code>时，<code>url</code>不做任何处理；当浏览器不支持<code>cookie</code>的时候，将会重写<code>URL</code>将<code>sessionid</code>拼接到访问地址后。</p>\n<h3 id=\"2-保持状态\"><a href=\"#2-保持状态\" class=\"headerlink\" title=\"2.保持状态\"></a>2.保持状态</h3><p><code>cookie</code>保存在浏览器端<br><code>session</code>保存在服务器端</p>\n<h3 id=\"3-存储的大小\"><a href=\"#3-存储的大小\" class=\"headerlink\" title=\"3.存储的大小\"></a>3.存储的大小</h3><p>单个<code>cookie</code>保存的数据不能超过<code>4kb</code>；很多浏览器都限制一个站点最多保存20个<code>cookie</code>。<br><code>session</code>大小没有限制。</p>\n<h3 id=\"4-存储内容\"><a href=\"#4-存储内容\" class=\"headerlink\" title=\"4.存储内容\"></a>4.存储内容</h3><p><code>cookie</code>只能保存字符串类型，以文本的方式。<br><code>session</code>通过类似与<code>Hashtable</code>的数据结构来保存，能支持任何类型的对象（<code>session</code>中可含有多个对象）</p>\n<h3 id=\"5-安全性\"><a href=\"#5-安全性\" class=\"headerlink\" title=\"5.安全性\"></a>5.安全性</h3><p><code>session</code>的安全性大于<code>cookie</code>。原因如下：</p>\n<ul>\n<li><code>sessionid</code>存储在<code>cookie</code>中，若要攻破<code>session</code>首先要攻破<code>cookie</code>；</li>\n<li><code>sessionid</code>是要有人登录，或者启动<code>session_start</code>才会有，所以攻破<code>cookie</code>也不一定能得到<code>sessionid</code>；</li>\n<li>第二次启动<code>session_start</code>后，前一次的<code>sessionid</code>就是失效了，<code>session</code>过期后，<code>sessionid</code>也随之失效。</li>\n<li><code>sessionid</code>是加密的。</li>\n<li><code>cookie</code>不是很安全，别人可以分析存放在本地的<code>cookie</code>并进行<code>cookie</code>欺骗，考虑到安全应当使用<code>session</code><br>综上所述，攻击者必须在短时间内攻破加密的<code>sessionid</code>，这很难。</li>\n</ul>\n<h3 id=\"6-性能\"><a href=\"#6-性能\" class=\"headerlink\" title=\"6.性能\"></a>6.性能</h3><p><code>session</code>会在一定时间内保存在服务器上。当访问增多，会比较占用你服务器的性能，考虑到减轻服务器性能方面，应当使用<code>cookie</code>。</p>\n<h3 id=\"7-应用场景\"><a href=\"#7-应用场景\" class=\"headerlink\" title=\"7.应用场景\"></a>7.应用场景</h3><h5 id=\"cookie\"><a href=\"#cookie\" class=\"headerlink\" title=\"cookie`:\"></a>cookie`:</h5><ul>\n<li>判断用户是否登录过网站，以便下次登录时能够实现自动登录（或者记住密码）。</li>\n<li>保存上次登录的时间等信息。</li>\n<li>保存上次查看的页面</li>\n<li>浏览计数</li>\n</ul>\n<h5 id=\"session：\"><a href=\"#session：\" class=\"headerlink\" title=\"session：\"></a>session：</h5><ul>\n<li>网上商城中的购物车：添加了商品之后客户端处可以知道添加了哪些商品，而服务器端如何判别呢，所以也需要存储一些信息就用到了<code>session</code></li>\n<li>保存用户登录信息</li>\n<li>将某些数据放入<code>session</code>中，供同一用户的不同页面使用</li>\n<li>防止用户非法登录</li>\n<li>购物车最好使用<code>cookie</code>，但是<code>cookie</code>是可以在客户端禁用的，这时候我们要使用<code>cookie+</code>数据库的方式实现，当从<code>cookie</code>中不能取出数据时，就从数据库获取。</li>\n</ul>\n<h3 id=\"8-缺点\"><a href=\"#8-缺点\" class=\"headerlink\" title=\"8.缺点\"></a>8.缺点</h3><h5 id=\"cookie：\"><a href=\"#cookie：\" class=\"headerlink\" title=\"cookie：\"></a>cookie：</h5><ul>\n<li>大小受限</li>\n<li>用户可以操作（禁用）cookie，使功能受限</li>\n<li>安全性较低</li>\n<li>有些状态不可能保存在客户端</li>\n<li>每次访问都要传送cookie给服务器，浪费宽带</li>\n<li>cookie数据有路径（path）的概念，可以限制cookie只属于某个路径下。</li>\n</ul>\n<h5 id=\"session：-1\"><a href=\"#session：-1\" class=\"headerlink\" title=\"session：\"></a>session：</h5><ul>\n<li><code>session</code>保存的东西越多，就越占用服务器内存，对于用户在线人数较多的网站，服务器的内存压力会比较大</li>\n<li>依赖于<code>cookie</code>（<code>sessionid</code>保存在<code>cookie</code>），如果禁用<code>cookie</code>，则要使用URL重写</li>\n<li>创建<code>session</code>变量有很大的随意性，可随时调用，不需要开发者做精确地处理，所以过度的使用<code>session</code>变量将会导致代码不可读而且不好维护。</li>\n</ul>\n<h2 id=\"cookie和session的相同点\"><a href=\"#cookie和session的相同点\" class=\"headerlink\" title=\"cookie和session的相同点\"></a>cookie和session的相同点</h2><ul>\n<li><code>session</code>和<code>cookie</code>都是由服务器生成的</li>\n<li><code>session</code>和<code>cookie</code>都是键值对，即<code>session</code>和<code>cookie</code>就是用来保存特定的值的一种技术</li>\n</ul>\n<h2 id=\"cookie机制-一个cookie的设置以及发送过程分为以下四步-：\"><a href=\"#cookie机制-一个cookie的设置以及发送过程分为以下四步-：\" class=\"headerlink\" title=\"cookie机制(一个cookie的设置以及发送过程分为以下四步)：\"></a>cookie机制(一个cookie的设置以及发送过程分为以下四步)：</h2><ul>\n<li>客户端发送一个<code>http</code>请求到服务器端</li>\n<li>服务器端发送一个<code>http</code>响应到客户端，其中包含<code>Set-Cookie</code>头部</li>\n<li>客户端发送一个<code>http</code>请求到服务器端，其中包含<code>Cookie</code>头部</li>\n<li>服务器端发送一个<code>http</code>响应到客户端</li>\n</ul>\n<h2 id=\"cookie属性项\"><a href=\"#cookie属性项\" class=\"headerlink\" title=\"cookie属性项\"></a>cookie属性项</h2><table width=\"100%\">\n   <tr>\n      <td>属性项</td>\n      <td>属性项介绍</td>\n   </tr>\n   <tr>\n      <td>NAME=VALUE</td>\n      <td>键值对，可以设置要保存的 Key/Value，注意这里的 NAME 不能和其他属性项的名字一样</td>\n   </tr>\n   <tr>\n      <td>Expires</td>\n      <td>过期时间，在设置的某个时间点后该 Cookie 就会失效</td>\n   </tr>\n   <tr>\n      <td>Domain</td>\n      <td>生成该 Cookie 的域名，如 domain=\"www.baidu.com\"</td>\n   </tr>\n   <tr>\n      <td>Path</td>\n      <td>该 Cookie 是在当前的哪个路径下生成的，如 path=/wp-admin/</td>\n   </tr>\n   <tr>\n      <td>Secure</td>\n      <td>如果设置了这个属性，那么只会在 SSH 连接时才会回传该 Cookie</td>\n   </tr>\n</table>\n\n<h2 id=\"设置cookie\"><a href=\"#设置cookie\" class=\"headerlink\" title=\"设置cookie\"></a>设置cookie</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">setCookie</span>(<span class=\"params\">json,time</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> date = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getTime()+time*<span class=\"number\">24</span>*<span class=\"number\">60</span>*<span class=\"number\">60</span>*<span class=\"number\">1000</span>).toUTCString();</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> key <span class=\"keyword\">in</span> json)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">document</span>.cookie = key+<span class=\"string\">\"=\"</span>+json[key]+<span class=\"string\">\";expires=\"</span>+date</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">setCookie(&#123;</span><br><span class=\"line\">    name:<span class=\"string\">'wanglina'</span>,</span><br><span class=\"line\">    sex:<span class=\"string\">'female'</span></span><br><span class=\"line\">&#125;,<span class=\"number\">7</span>);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"获取cookie\"><a href=\"#获取cookie\" class=\"headerlink\" title=\"获取cookie\"></a>获取cookie</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getCookie</span>(<span class=\"params\">attr</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">document</span>.cookie.match(<span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(<span class=\"string\">\"(^|\\\\s)\"</span>+attr+<span class=\"string\">\"=([^;]+)(;|$)\"</span>))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"清除cookie\"><a href=\"#清除cookie\" class=\"headerlink\" title=\"清除cookie\"></a>清除cookie</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">removeCookie</span>(<span class=\"params\">attr</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> json = &#123;&#125;;</span><br><span class=\"line\">    json[attr] = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">    setCookie(json,<span class=\"number\">-1</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"javascript如何判断浏览器是否禁用cookie\"><a href=\"#javascript如何判断浏览器是否禁用cookie\" class=\"headerlink\" title=\"javascript如何判断浏览器是否禁用cookie\"></a>javascript如何判断浏览器是否禁用cookie</h2><p>语法：<code>navigator.cookieEnabled</code>；<br>如果浏览器启用了<code>cookie</code>，该属性值为<code>true</code>。如果禁用了<code>cookie</code>，则值为<code>false</code>。</p>\n<p><code>navigator</code>：<br> <code>JavaScript</code>中的一个独立的对象，他用于提供用户所使用的浏览器以及操作系统等信息，以<code>navigator</code>对象属性的形式来提供。</p>\n<h2 id=\"防止javascript脚本读取cookie信息\"><a href=\"#防止javascript脚本读取cookie信息\" class=\"headerlink\" title=\"防止javascript脚本读取cookie信息\"></a>防止javascript脚本读取cookie信息</h2><p>1.设置HttpOnly<br>如果您在cookie中设置了HttpOnly属性，那么通过js脚本将无法读取到cookie信息，这样能有效的防止XSS攻击。</p>\n<p>2.HttpOnly的设置样例</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">response.setHeader(<span class=\"string\">\"Set-Cookie\"</span>, <span class=\"string\">\"cookiename=value;Path=/;Domain=domainvalue;Max-Age=seconds;HTTPOnly\"</span>);</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//设置http的cookie</span><br><span class=\"line\">response.setHeader(<span class=\"string\">\"Set-Cookie\"</span>, <span class=\"string\">\"uid=112; Path=/; HttpOnly\"</span>);</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//设置https的cookie</span><br><span class=\"line\">response.setHeader(<span class=\"string\">\"Set-Cookie\"</span>, <span class=\"string\">\"uid=112; Path=/; Secure; HttpOnly\"</span>);</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"WebStorage\"><a href=\"#WebStorage\" class=\"headerlink\" title=\"WebStorage\"></a>WebStorage</h2><p> <code>WebStorage</code>的目的是克服由<code>cookie</code>所带来的一些限制，当数据需要被严格控制在客户端时，不需要持续的将数据发回服务器。</p>\n<h4 id=\"WebStorage两个主要目标：\"><a href=\"#WebStorage两个主要目标：\" class=\"headerlink\" title=\"WebStorage两个主要目标：\"></a>WebStorage两个主要目标：</h4><p>1.提供一种在<code>cookie</code>之外存储会话数据的路径<br>2.提供一种存储大量可以跨会话存在的数据的机制</p>\n<p><code>HTML5</code>的<code>WebStorage</code>提供了两种<code>API</code>：<code>localStorage</code>（本地存储）和<code>sessionStorage</code>（会话存储）</p>\n<h3 id=\"localStorage和sessionStorage的区别\"><a href=\"#localStorage和sessionStorage的区别\" class=\"headerlink\" title=\"localStorage和sessionStorage的区别\"></a>localStorage和sessionStorage的区别</h3><h5 id=\"1-生命周期\"><a href=\"#1-生命周期\" class=\"headerlink\" title=\"1.生命周期\"></a>1.生命周期</h5><p><code>localStorage</code>的生命周期是永久的，关闭页面或浏览器之后<code>localStorage</code>中的数据也不会消失。<code>localStorage</code>除非主动删除数据，否则数据永远不会消失。<br><code>sessionStorage</code>的生命周期是仅在当前会话下有效。<code>sessionStorage</code>引入了一个“浏览器窗口”的概念，<code>sessionStorage</code>是在同源的窗口中始终存在的数据。只要这个浏览器窗口没有关闭，即使刷新页面或者进入同源另一个页面，数据依然存在。但是<code>sessionStorage</code>在关闭了浏览器窗口后就会被销毁。同时独立的打开同一个窗口同一个页面，<code>sessionStorage</code>也是不一样的。</p>\n<h5 id=\"2-存储大小\"><a href=\"#2-存储大小\" class=\"headerlink\" title=\"2.存储大小\"></a>2.存储大小</h5><p><code>localStorage</code>和<code>sessionStorage</code>的存储数据大小一般都是：5MB</p>\n<h5 id=\"3-存储位置\"><a href=\"#3-存储位置\" class=\"headerlink\" title=\"3.存储位置\"></a>3.存储位置</h5><p><code>localStorage</code>和<code>sessionStorage</code>都保存在客户端，不与服务器进行交互通信</p>\n<h5 id=\"4-存储内容类型\"><a href=\"#4-存储内容类型\" class=\"headerlink\" title=\"4.存储内容类型\"></a>4.存储内容类型</h5><p><code>localStorage</code>和<code>sessionStorage</code>只能存储字符串类型，对于复杂的对象可以使用<code>ECMAScript</code>提供的<code>JSON</code>对象的<code>stringify</code>和<code>parse</code>来处理</p>\n<h5 id=\"5-获取方式\"><a href=\"#5-获取方式\" class=\"headerlink\" title=\"5.获取方式\"></a>5.获取方式</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">localStorage：window.localStorage</span><br><span class=\"line\">sessionStorage：window.sessionStorage</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"6-应用场景\"><a href=\"#6-应用场景\" class=\"headerlink\" title=\"6.应用场景\"></a>6.应用场景</h5><p><code>localStorage</code>：常用于长期登录（+判断用户是否已登录），适合长期保存在本地的数据<br><code>sessionStorage</code>：敏感账号一次性登录</p>\n<h2 id=\"WebStorage的优点\"><a href=\"#WebStorage的优点\" class=\"headerlink\" title=\"WebStorage的优点\"></a>WebStorage的优点</h2><ul>\n<li>存储空间更大：<code>cookie</code>为4KB，而<code>WebStorage</code>是5MB</li>\n<li>节省网络流量：<code>WebStorage</code>不会传送到服务器，存储在本地的数据可以直接获取，也不会像<code>cookie</code>一样每次请求都会传送到服务器，所以减少了客户端和服务端的交互，节省了网络流量</li>\n<li>对于那种只需要在用户浏览一组页面期间保存而关闭浏览器后就可以丢弃的数据，<code>sessionStorage</code>会非常方便</li>\n<li>快速显示：有的数据存储在<code>WebStorage</code>上再加上浏览器本身的缓存。获取数据时可以从本地获取会比从服务器端获取快得多，所以速度更快</li>\n<li>安全性：<code>WebStorage</code>不会随着<code>HTTP header</code>发送到服务器端，所以安全性相对于<code>cookie</code>来说会比较高一些，不会担心截获，但是仍然存在伪造问题</li>\n<li><code>WebStorage</code>提供了一些方法，数据操作比<code>cookie</code>方便<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">setItem(key, value) —— 保存数据，以键值对的方式存储信息</span><br><span class=\"line\">getItem(key) —— 获取数据，将键值传入，即可获取到对应的value值</span><br><span class=\"line\">removeItem(key) —— 删除单个数据，根据键值移除对应的信息</span><br><span class=\"line\">clear() —— 删除所有的数据</span><br><span class=\"line\">key(index) —— 获取某个索引的key</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n"},{"title":"框架/类库的比较","date":"2020-03-10T07:35:03.000Z","_content":"\n## 序\n你使用过哪些前端框架/类库，其各有什么优缺点？\n\n### 1. React\n#### 优点：\n 1. 速度快：通过在vdom的操作实现真实dom的局部更新\n 2. 跨浏览器兼容\n 3. 模块化\n 4. 单向数据流\n 5. 同构,接近原生的js\n 6. 和打包工具配合使用兼容性好\n\n#### 缺点：\nReact本身知识一个v而已，并不是一个完整的框架，如果大型项目中如果需要一套完整的框架的话需要搭配react-router使用。\n\n\n### 2. Vue\n是一个构建数据驱动的web界面的渐进式MVVM框架\n#### 优点：\n 1. 性能好\n 2. 简单易用\n 3. 前后端分离\n 4. 单页面应用用户体验好\n 5. 组件化\n 6. MVVM\n\n#### 缺点：\n1. 不适于seo优化，而且封装的比较厉害，报错不明显，适合单人开发，适合中小型项目\n2. 导航不可用，如果一定要导航需要自行实现前进、后退。（由于是单页面不能用浏览器的前进后退功能，所以需要自己建立堆栈管理）。\n3. 初次加载时耗时多。\n4. 页面复杂度提高很多。\n\n\n### 3. Angular\n#### 优点：\n 1. 模块功能强大丰富，自带了极其丰富的angular指令\n 2. 是一个比较完善的前端框架，包含服务，模版，数据双向绑定，模块化，路由等。。。\n 3. 可以自定义指令，可以在项目中多次使用\n\n#### 缺点：\n1. 入门很容易，深入学习后概念很多，较难理解\n2. 对IE6/7兼容性不好\n3. 很灵活，指令应用最佳实践教程少\n\n### 4. Jquery\n#### 优点：\n 1. 代码简洁\n 2. 脚本与页面分离\n 3. 丰富的插件开发\n 4. 性能支持好\n 5. 节约学习成本\n 6. 是各大厂商使用类库的标准\n\n#### 缺点：\n1. 不能向后兼容，不能兼容早期版本，早期的插件不可用\n2. 同一个页面不能使用多个插件，会有冲突\n3. 版本更新较快，不稳定\n\n\n### 5. Nodejs\n#### 优点：\n 1. 高并发\n 2. 适合I/O密集型应用\n\n#### 缺点：\n1. 不适合CPU密集型应用\n2. 只支持单核CPU\n3. 可靠性低，一旦代码某个环节崩溃，整个系统都崩溃\n4. 更新快\n5. Debug不方便，错误没有stack trace\n\n\n### 6. Express\n#### 优点：\n 历史悠久，文档资料多并且完整，容易学习\n\n#### 缺点：\ncallback比较多\n\n### 7. lodash\n\n#### 优点：\n 1. 内部封装了很多字符串，数组，对象等常见数据类型的处理函数\n 2. 不是在原有数据上进行操作，而是复制出一份新的数据而不改变原有数据\n\n#### 缺点：\n使用lodash库偏离了原生js的写法\n\n8.9.。。。。。后续继续补充。。。\n\n## React和Vue的区别与共同点\n\n#### 共同点:\n1. 都支持组件化\n2. 都是数据驱动视图\n\n#### 区别\n\n##### 本质区别:\n1. Vue本质是MVVM框架，由MVC发展而来\n2. React本质上是前端组件化框架，由后端组件化发展而来\n\n##### 模版区别:\n1. Vue使用模版(最初由Angular提出)\n2. React使用JSX\n3. 模版语法上，更加倾向于JSX\n4. 模版分离上，更加倾向于Vue\n\n##### 组件化区别:\n1. React本身就是组件化，没有组件化就不是React\n2. Vue也支持组件化，不过是在MVVM上的扩展\n3. 查阅Vue组件化的文档有很多（侧面反应）\n\n## 总结\n\n1. 国内使用，首推Vue，文档更易读，易学，社区够大\n2. 如果团队水平较高，推荐使用React，组件化和JSX\n\n\n","source":"_posts/frameDiff.md","raw":"---\ntitle: 框架/类库的比较\ndate: 2020-03-10 15:35:03\ncategories: 前端\ntags: 前端\n---\n\n## 序\n你使用过哪些前端框架/类库，其各有什么优缺点？\n\n### 1. React\n#### 优点：\n 1. 速度快：通过在vdom的操作实现真实dom的局部更新\n 2. 跨浏览器兼容\n 3. 模块化\n 4. 单向数据流\n 5. 同构,接近原生的js\n 6. 和打包工具配合使用兼容性好\n\n#### 缺点：\nReact本身知识一个v而已，并不是一个完整的框架，如果大型项目中如果需要一套完整的框架的话需要搭配react-router使用。\n\n\n### 2. Vue\n是一个构建数据驱动的web界面的渐进式MVVM框架\n#### 优点：\n 1. 性能好\n 2. 简单易用\n 3. 前后端分离\n 4. 单页面应用用户体验好\n 5. 组件化\n 6. MVVM\n\n#### 缺点：\n1. 不适于seo优化，而且封装的比较厉害，报错不明显，适合单人开发，适合中小型项目\n2. 导航不可用，如果一定要导航需要自行实现前进、后退。（由于是单页面不能用浏览器的前进后退功能，所以需要自己建立堆栈管理）。\n3. 初次加载时耗时多。\n4. 页面复杂度提高很多。\n\n\n### 3. Angular\n#### 优点：\n 1. 模块功能强大丰富，自带了极其丰富的angular指令\n 2. 是一个比较完善的前端框架，包含服务，模版，数据双向绑定，模块化，路由等。。。\n 3. 可以自定义指令，可以在项目中多次使用\n\n#### 缺点：\n1. 入门很容易，深入学习后概念很多，较难理解\n2. 对IE6/7兼容性不好\n3. 很灵活，指令应用最佳实践教程少\n\n### 4. Jquery\n#### 优点：\n 1. 代码简洁\n 2. 脚本与页面分离\n 3. 丰富的插件开发\n 4. 性能支持好\n 5. 节约学习成本\n 6. 是各大厂商使用类库的标准\n\n#### 缺点：\n1. 不能向后兼容，不能兼容早期版本，早期的插件不可用\n2. 同一个页面不能使用多个插件，会有冲突\n3. 版本更新较快，不稳定\n\n\n### 5. Nodejs\n#### 优点：\n 1. 高并发\n 2. 适合I/O密集型应用\n\n#### 缺点：\n1. 不适合CPU密集型应用\n2. 只支持单核CPU\n3. 可靠性低，一旦代码某个环节崩溃，整个系统都崩溃\n4. 更新快\n5. Debug不方便，错误没有stack trace\n\n\n### 6. Express\n#### 优点：\n 历史悠久，文档资料多并且完整，容易学习\n\n#### 缺点：\ncallback比较多\n\n### 7. lodash\n\n#### 优点：\n 1. 内部封装了很多字符串，数组，对象等常见数据类型的处理函数\n 2. 不是在原有数据上进行操作，而是复制出一份新的数据而不改变原有数据\n\n#### 缺点：\n使用lodash库偏离了原生js的写法\n\n8.9.。。。。。后续继续补充。。。\n\n## React和Vue的区别与共同点\n\n#### 共同点:\n1. 都支持组件化\n2. 都是数据驱动视图\n\n#### 区别\n\n##### 本质区别:\n1. Vue本质是MVVM框架，由MVC发展而来\n2. React本质上是前端组件化框架，由后端组件化发展而来\n\n##### 模版区别:\n1. Vue使用模版(最初由Angular提出)\n2. React使用JSX\n3. 模版语法上，更加倾向于JSX\n4. 模版分离上，更加倾向于Vue\n\n##### 组件化区别:\n1. React本身就是组件化，没有组件化就不是React\n2. Vue也支持组件化，不过是在MVVM上的扩展\n3. 查阅Vue组件化的文档有很多（侧面反应）\n\n## 总结\n\n1. 国内使用，首推Vue，文档更易读，易学，社区够大\n2. 如果团队水平较高，推荐使用React，组件化和JSX\n\n\n","slug":"frameDiff","published":1,"updated":"2020-03-15T09:51:03.795Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7t6o2w3000jpsucxi5e6s60","content":"<h2 id=\"序\"><a href=\"#序\" class=\"headerlink\" title=\"序\"></a>序</h2><p>你使用过哪些前端框架/类库，其各有什么优缺点？</p>\n<h3 id=\"1-React\"><a href=\"#1-React\" class=\"headerlink\" title=\"1. React\"></a>1. React</h3><h4 id=\"优点：\"><a href=\"#优点：\" class=\"headerlink\" title=\"优点：\"></a>优点：</h4><ol>\n<li>速度快：通过在vdom的操作实现真实dom的局部更新</li>\n<li>跨浏览器兼容</li>\n<li>模块化</li>\n<li>单向数据流</li>\n<li>同构,接近原生的js</li>\n<li>和打包工具配合使用兼容性好</li>\n</ol>\n<h4 id=\"缺点：\"><a href=\"#缺点：\" class=\"headerlink\" title=\"缺点：\"></a>缺点：</h4><p>React本身知识一个v而已，并不是一个完整的框架，如果大型项目中如果需要一套完整的框架的话需要搭配react-router使用。</p>\n<h3 id=\"2-Vue\"><a href=\"#2-Vue\" class=\"headerlink\" title=\"2. Vue\"></a>2. Vue</h3><p>是一个构建数据驱动的web界面的渐进式MVVM框架</p>\n<h4 id=\"优点：-1\"><a href=\"#优点：-1\" class=\"headerlink\" title=\"优点：\"></a>优点：</h4><ol>\n<li>性能好</li>\n<li>简单易用</li>\n<li>前后端分离</li>\n<li>单页面应用用户体验好</li>\n<li>组件化</li>\n<li>MVVM</li>\n</ol>\n<h4 id=\"缺点：-1\"><a href=\"#缺点：-1\" class=\"headerlink\" title=\"缺点：\"></a>缺点：</h4><ol>\n<li>不适于seo优化，而且封装的比较厉害，报错不明显，适合单人开发，适合中小型项目</li>\n<li>导航不可用，如果一定要导航需要自行实现前进、后退。（由于是单页面不能用浏览器的前进后退功能，所以需要自己建立堆栈管理）。</li>\n<li>初次加载时耗时多。</li>\n<li>页面复杂度提高很多。</li>\n</ol>\n<h3 id=\"3-Angular\"><a href=\"#3-Angular\" class=\"headerlink\" title=\"3. Angular\"></a>3. Angular</h3><h4 id=\"优点：-2\"><a href=\"#优点：-2\" class=\"headerlink\" title=\"优点：\"></a>优点：</h4><ol>\n<li>模块功能强大丰富，自带了极其丰富的angular指令</li>\n<li>是一个比较完善的前端框架，包含服务，模版，数据双向绑定，模块化，路由等。。。</li>\n<li>可以自定义指令，可以在项目中多次使用</li>\n</ol>\n<h4 id=\"缺点：-2\"><a href=\"#缺点：-2\" class=\"headerlink\" title=\"缺点：\"></a>缺点：</h4><ol>\n<li>入门很容易，深入学习后概念很多，较难理解</li>\n<li>对IE6/7兼容性不好</li>\n<li>很灵活，指令应用最佳实践教程少</li>\n</ol>\n<h3 id=\"4-Jquery\"><a href=\"#4-Jquery\" class=\"headerlink\" title=\"4. Jquery\"></a>4. Jquery</h3><h4 id=\"优点：-3\"><a href=\"#优点：-3\" class=\"headerlink\" title=\"优点：\"></a>优点：</h4><ol>\n<li>代码简洁</li>\n<li>脚本与页面分离</li>\n<li>丰富的插件开发</li>\n<li>性能支持好</li>\n<li>节约学习成本</li>\n<li>是各大厂商使用类库的标准</li>\n</ol>\n<h4 id=\"缺点：-3\"><a href=\"#缺点：-3\" class=\"headerlink\" title=\"缺点：\"></a>缺点：</h4><ol>\n<li>不能向后兼容，不能兼容早期版本，早期的插件不可用</li>\n<li>同一个页面不能使用多个插件，会有冲突</li>\n<li>版本更新较快，不稳定</li>\n</ol>\n<h3 id=\"5-Nodejs\"><a href=\"#5-Nodejs\" class=\"headerlink\" title=\"5. Nodejs\"></a>5. Nodejs</h3><h4 id=\"优点：-4\"><a href=\"#优点：-4\" class=\"headerlink\" title=\"优点：\"></a>优点：</h4><ol>\n<li>高并发</li>\n<li>适合I/O密集型应用</li>\n</ol>\n<h4 id=\"缺点：-4\"><a href=\"#缺点：-4\" class=\"headerlink\" title=\"缺点：\"></a>缺点：</h4><ol>\n<li>不适合CPU密集型应用</li>\n<li>只支持单核CPU</li>\n<li>可靠性低，一旦代码某个环节崩溃，整个系统都崩溃</li>\n<li>更新快</li>\n<li>Debug不方便，错误没有stack trace</li>\n</ol>\n<h3 id=\"6-Express\"><a href=\"#6-Express\" class=\"headerlink\" title=\"6. Express\"></a>6. Express</h3><h4 id=\"优点：-5\"><a href=\"#优点：-5\" class=\"headerlink\" title=\"优点：\"></a>优点：</h4><p> 历史悠久，文档资料多并且完整，容易学习</p>\n<h4 id=\"缺点：-5\"><a href=\"#缺点：-5\" class=\"headerlink\" title=\"缺点：\"></a>缺点：</h4><p>callback比较多</p>\n<h3 id=\"7-lodash\"><a href=\"#7-lodash\" class=\"headerlink\" title=\"7. lodash\"></a>7. lodash</h3><h4 id=\"优点：-6\"><a href=\"#优点：-6\" class=\"headerlink\" title=\"优点：\"></a>优点：</h4><ol>\n<li>内部封装了很多字符串，数组，对象等常见数据类型的处理函数</li>\n<li>不是在原有数据上进行操作，而是复制出一份新的数据而不改变原有数据</li>\n</ol>\n<h4 id=\"缺点：-6\"><a href=\"#缺点：-6\" class=\"headerlink\" title=\"缺点：\"></a>缺点：</h4><p>使用lodash库偏离了原生js的写法</p>\n<p>8.9.。。。。。后续继续补充。。。</p>\n<h2 id=\"React和Vue的区别与共同点\"><a href=\"#React和Vue的区别与共同点\" class=\"headerlink\" title=\"React和Vue的区别与共同点\"></a>React和Vue的区别与共同点</h2><h4 id=\"共同点\"><a href=\"#共同点\" class=\"headerlink\" title=\"共同点:\"></a>共同点:</h4><ol>\n<li>都支持组件化</li>\n<li>都是数据驱动视图</li>\n</ol>\n<h4 id=\"区别\"><a href=\"#区别\" class=\"headerlink\" title=\"区别\"></a>区别</h4><h5 id=\"本质区别\"><a href=\"#本质区别\" class=\"headerlink\" title=\"本质区别:\"></a>本质区别:</h5><ol>\n<li>Vue本质是MVVM框架，由MVC发展而来</li>\n<li>React本质上是前端组件化框架，由后端组件化发展而来</li>\n</ol>\n<h5 id=\"模版区别\"><a href=\"#模版区别\" class=\"headerlink\" title=\"模版区别:\"></a>模版区别:</h5><ol>\n<li>Vue使用模版(最初由Angular提出)</li>\n<li>React使用JSX</li>\n<li>模版语法上，更加倾向于JSX</li>\n<li>模版分离上，更加倾向于Vue</li>\n</ol>\n<h5 id=\"组件化区别\"><a href=\"#组件化区别\" class=\"headerlink\" title=\"组件化区别:\"></a>组件化区别:</h5><ol>\n<li>React本身就是组件化，没有组件化就不是React</li>\n<li>Vue也支持组件化，不过是在MVVM上的扩展</li>\n<li>查阅Vue组件化的文档有很多（侧面反应）</li>\n</ol>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><ol>\n<li>国内使用，首推Vue，文档更易读，易学，社区够大</li>\n<li>如果团队水平较高，推荐使用React，组件化和JSX</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"序\"><a href=\"#序\" class=\"headerlink\" title=\"序\"></a>序</h2><p>你使用过哪些前端框架/类库，其各有什么优缺点？</p>\n<h3 id=\"1-React\"><a href=\"#1-React\" class=\"headerlink\" title=\"1. React\"></a>1. React</h3><h4 id=\"优点：\"><a href=\"#优点：\" class=\"headerlink\" title=\"优点：\"></a>优点：</h4><ol>\n<li>速度快：通过在vdom的操作实现真实dom的局部更新</li>\n<li>跨浏览器兼容</li>\n<li>模块化</li>\n<li>单向数据流</li>\n<li>同构,接近原生的js</li>\n<li>和打包工具配合使用兼容性好</li>\n</ol>\n<h4 id=\"缺点：\"><a href=\"#缺点：\" class=\"headerlink\" title=\"缺点：\"></a>缺点：</h4><p>React本身知识一个v而已，并不是一个完整的框架，如果大型项目中如果需要一套完整的框架的话需要搭配react-router使用。</p>\n<h3 id=\"2-Vue\"><a href=\"#2-Vue\" class=\"headerlink\" title=\"2. Vue\"></a>2. Vue</h3><p>是一个构建数据驱动的web界面的渐进式MVVM框架</p>\n<h4 id=\"优点：-1\"><a href=\"#优点：-1\" class=\"headerlink\" title=\"优点：\"></a>优点：</h4><ol>\n<li>性能好</li>\n<li>简单易用</li>\n<li>前后端分离</li>\n<li>单页面应用用户体验好</li>\n<li>组件化</li>\n<li>MVVM</li>\n</ol>\n<h4 id=\"缺点：-1\"><a href=\"#缺点：-1\" class=\"headerlink\" title=\"缺点：\"></a>缺点：</h4><ol>\n<li>不适于seo优化，而且封装的比较厉害，报错不明显，适合单人开发，适合中小型项目</li>\n<li>导航不可用，如果一定要导航需要自行实现前进、后退。（由于是单页面不能用浏览器的前进后退功能，所以需要自己建立堆栈管理）。</li>\n<li>初次加载时耗时多。</li>\n<li>页面复杂度提高很多。</li>\n</ol>\n<h3 id=\"3-Angular\"><a href=\"#3-Angular\" class=\"headerlink\" title=\"3. Angular\"></a>3. Angular</h3><h4 id=\"优点：-2\"><a href=\"#优点：-2\" class=\"headerlink\" title=\"优点：\"></a>优点：</h4><ol>\n<li>模块功能强大丰富，自带了极其丰富的angular指令</li>\n<li>是一个比较完善的前端框架，包含服务，模版，数据双向绑定，模块化，路由等。。。</li>\n<li>可以自定义指令，可以在项目中多次使用</li>\n</ol>\n<h4 id=\"缺点：-2\"><a href=\"#缺点：-2\" class=\"headerlink\" title=\"缺点：\"></a>缺点：</h4><ol>\n<li>入门很容易，深入学习后概念很多，较难理解</li>\n<li>对IE6/7兼容性不好</li>\n<li>很灵活，指令应用最佳实践教程少</li>\n</ol>\n<h3 id=\"4-Jquery\"><a href=\"#4-Jquery\" class=\"headerlink\" title=\"4. Jquery\"></a>4. Jquery</h3><h4 id=\"优点：-3\"><a href=\"#优点：-3\" class=\"headerlink\" title=\"优点：\"></a>优点：</h4><ol>\n<li>代码简洁</li>\n<li>脚本与页面分离</li>\n<li>丰富的插件开发</li>\n<li>性能支持好</li>\n<li>节约学习成本</li>\n<li>是各大厂商使用类库的标准</li>\n</ol>\n<h4 id=\"缺点：-3\"><a href=\"#缺点：-3\" class=\"headerlink\" title=\"缺点：\"></a>缺点：</h4><ol>\n<li>不能向后兼容，不能兼容早期版本，早期的插件不可用</li>\n<li>同一个页面不能使用多个插件，会有冲突</li>\n<li>版本更新较快，不稳定</li>\n</ol>\n<h3 id=\"5-Nodejs\"><a href=\"#5-Nodejs\" class=\"headerlink\" title=\"5. Nodejs\"></a>5. Nodejs</h3><h4 id=\"优点：-4\"><a href=\"#优点：-4\" class=\"headerlink\" title=\"优点：\"></a>优点：</h4><ol>\n<li>高并发</li>\n<li>适合I/O密集型应用</li>\n</ol>\n<h4 id=\"缺点：-4\"><a href=\"#缺点：-4\" class=\"headerlink\" title=\"缺点：\"></a>缺点：</h4><ol>\n<li>不适合CPU密集型应用</li>\n<li>只支持单核CPU</li>\n<li>可靠性低，一旦代码某个环节崩溃，整个系统都崩溃</li>\n<li>更新快</li>\n<li>Debug不方便，错误没有stack trace</li>\n</ol>\n<h3 id=\"6-Express\"><a href=\"#6-Express\" class=\"headerlink\" title=\"6. Express\"></a>6. Express</h3><h4 id=\"优点：-5\"><a href=\"#优点：-5\" class=\"headerlink\" title=\"优点：\"></a>优点：</h4><p> 历史悠久，文档资料多并且完整，容易学习</p>\n<h4 id=\"缺点：-5\"><a href=\"#缺点：-5\" class=\"headerlink\" title=\"缺点：\"></a>缺点：</h4><p>callback比较多</p>\n<h3 id=\"7-lodash\"><a href=\"#7-lodash\" class=\"headerlink\" title=\"7. lodash\"></a>7. lodash</h3><h4 id=\"优点：-6\"><a href=\"#优点：-6\" class=\"headerlink\" title=\"优点：\"></a>优点：</h4><ol>\n<li>内部封装了很多字符串，数组，对象等常见数据类型的处理函数</li>\n<li>不是在原有数据上进行操作，而是复制出一份新的数据而不改变原有数据</li>\n</ol>\n<h4 id=\"缺点：-6\"><a href=\"#缺点：-6\" class=\"headerlink\" title=\"缺点：\"></a>缺点：</h4><p>使用lodash库偏离了原生js的写法</p>\n<p>8.9.。。。。。后续继续补充。。。</p>\n<h2 id=\"React和Vue的区别与共同点\"><a href=\"#React和Vue的区别与共同点\" class=\"headerlink\" title=\"React和Vue的区别与共同点\"></a>React和Vue的区别与共同点</h2><h4 id=\"共同点\"><a href=\"#共同点\" class=\"headerlink\" title=\"共同点:\"></a>共同点:</h4><ol>\n<li>都支持组件化</li>\n<li>都是数据驱动视图</li>\n</ol>\n<h4 id=\"区别\"><a href=\"#区别\" class=\"headerlink\" title=\"区别\"></a>区别</h4><h5 id=\"本质区别\"><a href=\"#本质区别\" class=\"headerlink\" title=\"本质区别:\"></a>本质区别:</h5><ol>\n<li>Vue本质是MVVM框架，由MVC发展而来</li>\n<li>React本质上是前端组件化框架，由后端组件化发展而来</li>\n</ol>\n<h5 id=\"模版区别\"><a href=\"#模版区别\" class=\"headerlink\" title=\"模版区别:\"></a>模版区别:</h5><ol>\n<li>Vue使用模版(最初由Angular提出)</li>\n<li>React使用JSX</li>\n<li>模版语法上，更加倾向于JSX</li>\n<li>模版分离上，更加倾向于Vue</li>\n</ol>\n<h5 id=\"组件化区别\"><a href=\"#组件化区别\" class=\"headerlink\" title=\"组件化区别:\"></a>组件化区别:</h5><ol>\n<li>React本身就是组件化，没有组件化就不是React</li>\n<li>Vue也支持组件化，不过是在MVVM上的扩展</li>\n<li>查阅Vue组件化的文档有很多（侧面反应）</li>\n</ol>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><ol>\n<li>国内使用，首推Vue，文档更易读，易学，社区够大</li>\n<li>如果团队水平较高，推荐使用React，组件化和JSX</li>\n</ol>\n"},{"title":"Hello Blog","_content":"## 前言\n一直想有一个属于自己的博客，专门记录平时遇到的一些难题，或者记录些自己对于某些知识点的理解，算是一个记忆吧。由于本人又懒又菜，思考之下决定通过写博客的方式来提供持续学习的动力，积累更多的知识点，顺便在平时遇到的难题中的解决方案进行二次思考，反思，总结。\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"helloBlog\"\n```\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n","source":"_posts/helloBlog.md","raw":"---\ntitle: Hello Blog\ncategories: 随笔\ntags: 随笔\n---\n## 前言\n一直想有一个属于自己的博客，专门记录平时遇到的一些难题，或者记录些自己对于某些知识点的理解，算是一个记忆吧。由于本人又懒又菜，思考之下决定通过写博客的方式来提供持续学习的动力，积累更多的知识点，顺便在平时遇到的难题中的解决方案进行二次思考，反思，总结。\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"helloBlog\"\n```\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n","slug":"helloBlog","published":1,"date":"2020-03-15T09:51:03.795Z","updated":"2020-03-15T09:51:03.796Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7t6o2w6000lpsuczs88g2w0","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>一直想有一个属于自己的博客，专门记录平时遇到的一些难题，或者记录些自己对于某些知识点的理解，算是一个记忆吧。由于本人又懒又菜，思考之下决定通过写博客的方式来提供持续学习的动力，积累更多的知识点，顺便在平时遇到的难题中的解决方案进行二次思考，反思，总结。</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"helloBlog\"</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>一直想有一个属于自己的博客，专门记录平时遇到的一些难题，或者记录些自己对于某些知识点的理解，算是一个记忆吧。由于本人又懒又菜，思考之下决定通过写博客的方式来提供持续学习的动力，积累更多的知识点，顺便在平时遇到的难题中的解决方案进行二次思考，反思，总结。</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"helloBlog\"</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n"},{"title":"计算机网络","date":"2020-02-29T16:39:40.000Z","_content":"\n## 序\nHTTP和HTTPS的原理\n\n## 认识 HTTP\n首先你听的最多的应该就是` HTTP `是一种 超文本传输协议`(Hypertext Transfer Protocol)`\n\n那么什么是超文本传输协议？\n超文本传输协议可以进行文字分割：`超文本（Hypertext）`、`传输（Transfer）`、`协议（Protocol）`\n\n按照范围的大小 协议 > 传输 > 超文本。下面就分别对这三个名次做一个解释。\n\n### 什么是超文本\n在互联网早期的时候，我们输入的信息只能保存在本地，无法和其他电脑进行交互。我们保存的信息通常都以文本即简单字符的形式存在，文本是一种能够被计算机解析的有意义的二进制数据包。而随着互联网的高速发展，两台电脑之间能够进行数据的传输后，人们不满足只能在两台电脑之间传输文字，还想要传输图片、音频、视频，甚至点击文字或图片能够进行超链接的跳转，那么文本的语义就被扩大了，这种语义扩大后的文本就被称为超文本(Hypertext)。\n### 什么是传输\n两台计算机之间会形成互联关系进行通信，我们存储的超文本会被解析成为二进制数据包，由传输载体（例如同轴电缆，电话线，光缆）负责把二进制数据包由计算机终端传输到另一个终端的过程（对终端的详细解释可以参考 你说你懂互联网，那这些你知道么？这篇文章）称为传输(transfer)。\n### 什么是协议\n自己一个人对自己的约定不能成为协议，协议的前提条件必须是多人约定。\n网络协议就是网络中(包括互联网)传递、管理信息的一些规范。如同人与人之间相互交流是需要遵循一定的规矩一样，计算机之间的相互通信需要共同遵守一定的规则，这些规则就称为网络协议。\n\n> ### 总结:\nHTTP 是一个在计算机世界里专门在两点之间传输文字、图片、音频、视频等超文本数据的约定和规范\n\n## 与 HTTP 有关的组件\n### 网络模型\n- 应用层(web:`HTTP`,电子邮件:`SMTP`,端系统文件上传协议:`FTP`,域名解析:`DNS`)\n- 运输层(`TCP`和 `UDP`)\n- 网络层(`IP`)\n- 链路层\n    - (以太网、`WiFi `和电缆接入的 `DOCSIS` 协议)分组称为`帧(frame)`\n    - 作用:将帧从一个端系统运输到另一个端系统\n    - ARP和RARP是数据链路层协议，是一对协议，分别是MAC和IP地址互查的（RARP把MAC转换成IP地址）\n\n- 物理层(将帧中的一个个 比特 从一个节点运输到另一个节点)\n\n\n### OSI 模型(国际标准化组织)\nOSI 要比上面的网络模型多了 表示层 和 会话层，其他层基本一致\n- 应用层\n- 表示层\n- 会话层\n- 运输层\n- 网络层\n- 链路层\n- 物理层\n## HTTP长连接和短连接\n像`web`网站的`http`服务一般都是短连接，因为长连接对于服务端来说会耗费一定的资源，像`web`网站这么频繁的成千上万甚至上亿客户端连接用短连接会更省一些资源，数据库连接一般是长连接频繁请求资源的客户端适合长连接。长连接可以省去较多的`TCP`建立和关闭操作，减少浪费，节约资源\n\n## HTTP的请求\n## HTTP 的优点和缺点\n### HTTP 的优点\n- 简单灵活易扩展\n- 应用广泛、环境成熟\n- 无状态\n### HTTP 的缺点\n- 无状态\n- 通信使用明文(不加密)，内容可能会被窃听\n- 不验证通信方的身份，有可能遭遇伪装\n- 无法证明报文的完整性，所以有可能已遭篡改\n- 性能\n\n\n\n## 确保Web安全的HTTPS(身披SSL外壳的HTTP)\n与SSL组合使用的`HTTP`被称为`HTTPS`(超文本传输安全协议`HTTP over SSL`)，\nHTTP+加密+认证+完整性保护=HTTPS\n\n共享密钥加密：共享密钥加密就是在HTTPS原理中人们常说到的对称加密，那么什么是共享密钥加密呢？其实就是两个所用的密钥是同一个。但是其实在共享密钥加密会有一个密钥传递的不安全，因为很可能会被第三方给替换掉，所以就有了一种公开密钥加密。\n\n公开密钥加密：公开密钥加密就是HTTPS中人们常说到的非对称加密。那么什么是公开密钥加密呢？公开密钥加密会有两个密钥，一个是主密钥也称做私有密钥，这个一般是不能发送给别人的，一个是公共密钥，这个可以给任何人。其原理就是发送方使用接收方给的公共密钥来加密数据，发送给接收方，然后接收方用私钥来解密。这样数据的安全性就高了很多。但这样也不是说一定安全，只是第三方在不知道私钥的时候去解密其实就是对离散对数的求值，难度很大，目前的技术很难实现。\n[加密机制](https://blog.csdn.net/MierCurry/article/details/104564378)\n1. 浏览器使用`https`的`url`访问服务器，建立`SSL`连接\n2. 服务器接收到`SSL`链接后，发送非对称加密公钥`A`给浏览器\n3. 浏览器生成随机数，作为对称加密的秘钥`B`\n4. 浏览器使用服务器返回的公钥`A`，对自己生成的对称加密秘钥`B`进行加密，得到秘钥`C`\n5. 浏览器将秘钥`C`发送给服务器\n6. 服务器使用自己的私钥`D`对接受的秘钥`C`进行解密，得到对称加密秘钥`B`\n7. 浏览器和服务器之间使用秘钥`B`作为对称加密秘钥通信\n\n#### 说明：通过上面流程浏览器和服务器之间共享一个对称加密秘钥B，而且不会被人监听和拦截到，之后的消息传递使用秘钥B进行对称加密\n\n#### 优点：非对称加密只使用了一次，后续所有通信消息都是用对称加密，效率比非对称加密高\n\n#### HTTPS的数字证书？\n中间人可以截取服务器发送给客户端的公钥，冒充服务器将自己的公钥发送给客户端，之后客户端会用中间人公钥进行加密生成对称秘钥，把密钥发给服务器，这时中间人又可以截取对称加密的秘钥。\n非对称加密之所以不安全，因为客户端不知道这把公钥是不是属于服务器的\n\n#### 引入数字证书\n认证中心（CA）：一个拥有公信力、大家都认可的认证中心，数字证书认证机构\n证书内容：签发者、证书用途、公钥、加密算法、Hash算法、证书到期时间\n\n#### 使用证书认证过程：\n\n1. 服务器在给客户端传输公钥过程中，会把公钥和服务器的个人信息通过hash算法生成信息摘要\n2. 为了防止信息要被调换，服务器采用CA提供的私钥对信息摘要进行加密来形成数字签名\n3. 最后把原来没hash算法之前的个人信息、公钥及数字签名合并在一起，形成数字证书\n4. 客户端拿到数字证书之后，使用CA提供的公钥对数字证书里的数字签名进行解密来得到信息摘要，然后对数字证书里的服务器的公钥及个人信息利用hash算法得到另一份信息摘要，最后将两份信息摘要对比，如果一样则证明是服务器，否则就是中间人\n\n#### 认证中心、数字证书、数字签名\n个人信息+公钥+数字签名===数字证书\n\n#### CA证书的颁发？\n服务器一开始向认证中心申请证书，客户端也内置了这些证书。\n\n#### HTTP和RPC的区别？\n底层协议：Http是基于http协议，RPC基于TCP，也可以是http，自己定义的协议\n效率：RPC基于自定义的TCP，可以让请求报文体积更小，提高传输效率。\n性能消耗：RPC基于高效的二进制流传输，消耗低，HTTP大部分通过json来实现，字节大小和序列化都比RPC要消耗性能\nRPC自带了负载均衡，HTTP需要配置Nginx实现\nRPC主要用于公司内部服务调用，性能消耗低，传输效率高，服务治理方便；HTTP主要对外如浏览器接口调用，app和第三方接口调用。\n\n#### 加密算法\n摘要算法：MD5（128位）、SHA1（160位），是一种不可逆的过程，无论多大的数据，经过摘要算法后都生成相同长度的数据。只能通过字典进行破解。\n对称加密算法：DES、AES，加密解密时使用相同的秘钥。\n非对称加密算法：RSA，加密解密时使用不同的秘钥，对接支付宝使用RSA2。","source":"_posts/internet.md","raw":"---\ntitle: 计算机网络\ndate: 2020-03-01 00:39:40\ncategories: 网络\ntags: 网络\n---\n\n## 序\nHTTP和HTTPS的原理\n\n## 认识 HTTP\n首先你听的最多的应该就是` HTTP `是一种 超文本传输协议`(Hypertext Transfer Protocol)`\n\n那么什么是超文本传输协议？\n超文本传输协议可以进行文字分割：`超文本（Hypertext）`、`传输（Transfer）`、`协议（Protocol）`\n\n按照范围的大小 协议 > 传输 > 超文本。下面就分别对这三个名次做一个解释。\n\n### 什么是超文本\n在互联网早期的时候，我们输入的信息只能保存在本地，无法和其他电脑进行交互。我们保存的信息通常都以文本即简单字符的形式存在，文本是一种能够被计算机解析的有意义的二进制数据包。而随着互联网的高速发展，两台电脑之间能够进行数据的传输后，人们不满足只能在两台电脑之间传输文字，还想要传输图片、音频、视频，甚至点击文字或图片能够进行超链接的跳转，那么文本的语义就被扩大了，这种语义扩大后的文本就被称为超文本(Hypertext)。\n### 什么是传输\n两台计算机之间会形成互联关系进行通信，我们存储的超文本会被解析成为二进制数据包，由传输载体（例如同轴电缆，电话线，光缆）负责把二进制数据包由计算机终端传输到另一个终端的过程（对终端的详细解释可以参考 你说你懂互联网，那这些你知道么？这篇文章）称为传输(transfer)。\n### 什么是协议\n自己一个人对自己的约定不能成为协议，协议的前提条件必须是多人约定。\n网络协议就是网络中(包括互联网)传递、管理信息的一些规范。如同人与人之间相互交流是需要遵循一定的规矩一样，计算机之间的相互通信需要共同遵守一定的规则，这些规则就称为网络协议。\n\n> ### 总结:\nHTTP 是一个在计算机世界里专门在两点之间传输文字、图片、音频、视频等超文本数据的约定和规范\n\n## 与 HTTP 有关的组件\n### 网络模型\n- 应用层(web:`HTTP`,电子邮件:`SMTP`,端系统文件上传协议:`FTP`,域名解析:`DNS`)\n- 运输层(`TCP`和 `UDP`)\n- 网络层(`IP`)\n- 链路层\n    - (以太网、`WiFi `和电缆接入的 `DOCSIS` 协议)分组称为`帧(frame)`\n    - 作用:将帧从一个端系统运输到另一个端系统\n    - ARP和RARP是数据链路层协议，是一对协议，分别是MAC和IP地址互查的（RARP把MAC转换成IP地址）\n\n- 物理层(将帧中的一个个 比特 从一个节点运输到另一个节点)\n\n\n### OSI 模型(国际标准化组织)\nOSI 要比上面的网络模型多了 表示层 和 会话层，其他层基本一致\n- 应用层\n- 表示层\n- 会话层\n- 运输层\n- 网络层\n- 链路层\n- 物理层\n## HTTP长连接和短连接\n像`web`网站的`http`服务一般都是短连接，因为长连接对于服务端来说会耗费一定的资源，像`web`网站这么频繁的成千上万甚至上亿客户端连接用短连接会更省一些资源，数据库连接一般是长连接频繁请求资源的客户端适合长连接。长连接可以省去较多的`TCP`建立和关闭操作，减少浪费，节约资源\n\n## HTTP的请求\n## HTTP 的优点和缺点\n### HTTP 的优点\n- 简单灵活易扩展\n- 应用广泛、环境成熟\n- 无状态\n### HTTP 的缺点\n- 无状态\n- 通信使用明文(不加密)，内容可能会被窃听\n- 不验证通信方的身份，有可能遭遇伪装\n- 无法证明报文的完整性，所以有可能已遭篡改\n- 性能\n\n\n\n## 确保Web安全的HTTPS(身披SSL外壳的HTTP)\n与SSL组合使用的`HTTP`被称为`HTTPS`(超文本传输安全协议`HTTP over SSL`)，\nHTTP+加密+认证+完整性保护=HTTPS\n\n共享密钥加密：共享密钥加密就是在HTTPS原理中人们常说到的对称加密，那么什么是共享密钥加密呢？其实就是两个所用的密钥是同一个。但是其实在共享密钥加密会有一个密钥传递的不安全，因为很可能会被第三方给替换掉，所以就有了一种公开密钥加密。\n\n公开密钥加密：公开密钥加密就是HTTPS中人们常说到的非对称加密。那么什么是公开密钥加密呢？公开密钥加密会有两个密钥，一个是主密钥也称做私有密钥，这个一般是不能发送给别人的，一个是公共密钥，这个可以给任何人。其原理就是发送方使用接收方给的公共密钥来加密数据，发送给接收方，然后接收方用私钥来解密。这样数据的安全性就高了很多。但这样也不是说一定安全，只是第三方在不知道私钥的时候去解密其实就是对离散对数的求值，难度很大，目前的技术很难实现。\n[加密机制](https://blog.csdn.net/MierCurry/article/details/104564378)\n1. 浏览器使用`https`的`url`访问服务器，建立`SSL`连接\n2. 服务器接收到`SSL`链接后，发送非对称加密公钥`A`给浏览器\n3. 浏览器生成随机数，作为对称加密的秘钥`B`\n4. 浏览器使用服务器返回的公钥`A`，对自己生成的对称加密秘钥`B`进行加密，得到秘钥`C`\n5. 浏览器将秘钥`C`发送给服务器\n6. 服务器使用自己的私钥`D`对接受的秘钥`C`进行解密，得到对称加密秘钥`B`\n7. 浏览器和服务器之间使用秘钥`B`作为对称加密秘钥通信\n\n#### 说明：通过上面流程浏览器和服务器之间共享一个对称加密秘钥B，而且不会被人监听和拦截到，之后的消息传递使用秘钥B进行对称加密\n\n#### 优点：非对称加密只使用了一次，后续所有通信消息都是用对称加密，效率比非对称加密高\n\n#### HTTPS的数字证书？\n中间人可以截取服务器发送给客户端的公钥，冒充服务器将自己的公钥发送给客户端，之后客户端会用中间人公钥进行加密生成对称秘钥，把密钥发给服务器，这时中间人又可以截取对称加密的秘钥。\n非对称加密之所以不安全，因为客户端不知道这把公钥是不是属于服务器的\n\n#### 引入数字证书\n认证中心（CA）：一个拥有公信力、大家都认可的认证中心，数字证书认证机构\n证书内容：签发者、证书用途、公钥、加密算法、Hash算法、证书到期时间\n\n#### 使用证书认证过程：\n\n1. 服务器在给客户端传输公钥过程中，会把公钥和服务器的个人信息通过hash算法生成信息摘要\n2. 为了防止信息要被调换，服务器采用CA提供的私钥对信息摘要进行加密来形成数字签名\n3. 最后把原来没hash算法之前的个人信息、公钥及数字签名合并在一起，形成数字证书\n4. 客户端拿到数字证书之后，使用CA提供的公钥对数字证书里的数字签名进行解密来得到信息摘要，然后对数字证书里的服务器的公钥及个人信息利用hash算法得到另一份信息摘要，最后将两份信息摘要对比，如果一样则证明是服务器，否则就是中间人\n\n#### 认证中心、数字证书、数字签名\n个人信息+公钥+数字签名===数字证书\n\n#### CA证书的颁发？\n服务器一开始向认证中心申请证书，客户端也内置了这些证书。\n\n#### HTTP和RPC的区别？\n底层协议：Http是基于http协议，RPC基于TCP，也可以是http，自己定义的协议\n效率：RPC基于自定义的TCP，可以让请求报文体积更小，提高传输效率。\n性能消耗：RPC基于高效的二进制流传输，消耗低，HTTP大部分通过json来实现，字节大小和序列化都比RPC要消耗性能\nRPC自带了负载均衡，HTTP需要配置Nginx实现\nRPC主要用于公司内部服务调用，性能消耗低，传输效率高，服务治理方便；HTTP主要对外如浏览器接口调用，app和第三方接口调用。\n\n#### 加密算法\n摘要算法：MD5（128位）、SHA1（160位），是一种不可逆的过程，无论多大的数据，经过摘要算法后都生成相同长度的数据。只能通过字典进行破解。\n对称加密算法：DES、AES，加密解密时使用相同的秘钥。\n非对称加密算法：RSA，加密解密时使用不同的秘钥，对接支付宝使用RSA2。","slug":"internet","published":1,"updated":"2020-03-15T09:51:03.797Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7t6o2wd000qpsuc8v3etzxw","content":"<h2 id=\"序\"><a href=\"#序\" class=\"headerlink\" title=\"序\"></a>序</h2><p>HTTP和HTTPS的原理</p>\n<h2 id=\"认识-HTTP\"><a href=\"#认识-HTTP\" class=\"headerlink\" title=\"认识 HTTP\"></a>认识 HTTP</h2><p>首先你听的最多的应该就是<code>HTTP</code>是一种 超文本传输协议<code>(Hypertext Transfer Protocol)</code></p>\n<p>那么什么是超文本传输协议？<br>超文本传输协议可以进行文字分割：<code>超文本（Hypertext）</code>、<code>传输（Transfer）</code>、<code>协议（Protocol）</code></p>\n<p>按照范围的大小 协议 &gt; 传输 &gt; 超文本。下面就分别对这三个名次做一个解释。</p>\n<h3 id=\"什么是超文本\"><a href=\"#什么是超文本\" class=\"headerlink\" title=\"什么是超文本\"></a>什么是超文本</h3><p>在互联网早期的时候，我们输入的信息只能保存在本地，无法和其他电脑进行交互。我们保存的信息通常都以文本即简单字符的形式存在，文本是一种能够被计算机解析的有意义的二进制数据包。而随着互联网的高速发展，两台电脑之间能够进行数据的传输后，人们不满足只能在两台电脑之间传输文字，还想要传输图片、音频、视频，甚至点击文字或图片能够进行超链接的跳转，那么文本的语义就被扩大了，这种语义扩大后的文本就被称为超文本(Hypertext)。</p>\n<h3 id=\"什么是传输\"><a href=\"#什么是传输\" class=\"headerlink\" title=\"什么是传输\"></a>什么是传输</h3><p>两台计算机之间会形成互联关系进行通信，我们存储的超文本会被解析成为二进制数据包，由传输载体（例如同轴电缆，电话线，光缆）负责把二进制数据包由计算机终端传输到另一个终端的过程（对终端的详细解释可以参考 你说你懂互联网，那这些你知道么？这篇文章）称为传输(transfer)。</p>\n<h3 id=\"什么是协议\"><a href=\"#什么是协议\" class=\"headerlink\" title=\"什么是协议\"></a>什么是协议</h3><p>自己一个人对自己的约定不能成为协议，协议的前提条件必须是多人约定。<br>网络协议就是网络中(包括互联网)传递、管理信息的一些规范。如同人与人之间相互交流是需要遵循一定的规矩一样，计算机之间的相互通信需要共同遵守一定的规则，这些规则就称为网络协议。</p>\n<blockquote>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结:\"></a>总结:</h3><p>HTTP 是一个在计算机世界里专门在两点之间传输文字、图片、音频、视频等超文本数据的约定和规范</p>\n</blockquote>\n<h2 id=\"与-HTTP-有关的组件\"><a href=\"#与-HTTP-有关的组件\" class=\"headerlink\" title=\"与 HTTP 有关的组件\"></a>与 HTTP 有关的组件</h2><h3 id=\"网络模型\"><a href=\"#网络模型\" class=\"headerlink\" title=\"网络模型\"></a>网络模型</h3><ul>\n<li><p>应用层(web:<code>HTTP</code>,电子邮件:<code>SMTP</code>,端系统文件上传协议:<code>FTP</code>,域名解析:<code>DNS</code>)</p>\n</li>\n<li><p>运输层(<code>TCP</code>和 <code>UDP</code>)</p>\n</li>\n<li><p>网络层(<code>IP</code>)</p>\n</li>\n<li><p>链路层</p>\n<ul>\n<li>(以太网、<code>WiFi</code>和电缆接入的 <code>DOCSIS</code> 协议)分组称为<code>帧(frame)</code></li>\n<li>作用:将帧从一个端系统运输到另一个端系统</li>\n<li>ARP和RARP是数据链路层协议，是一对协议，分别是MAC和IP地址互查的（RARP把MAC转换成IP地址）</li>\n</ul>\n</li>\n<li><p>物理层(将帧中的一个个 比特 从一个节点运输到另一个节点)</p>\n</li>\n</ul>\n<h3 id=\"OSI-模型-国际标准化组织\"><a href=\"#OSI-模型-国际标准化组织\" class=\"headerlink\" title=\"OSI 模型(国际标准化组织)\"></a>OSI 模型(国际标准化组织)</h3><p>OSI 要比上面的网络模型多了 表示层 和 会话层，其他层基本一致</p>\n<ul>\n<li>应用层</li>\n<li>表示层</li>\n<li>会话层</li>\n<li>运输层</li>\n<li>网络层</li>\n<li>链路层</li>\n<li>物理层<h2 id=\"HTTP长连接和短连接\"><a href=\"#HTTP长连接和短连接\" class=\"headerlink\" title=\"HTTP长连接和短连接\"></a>HTTP长连接和短连接</h2>像<code>web</code>网站的<code>http</code>服务一般都是短连接，因为长连接对于服务端来说会耗费一定的资源，像<code>web</code>网站这么频繁的成千上万甚至上亿客户端连接用短连接会更省一些资源，数据库连接一般是长连接频繁请求资源的客户端适合长连接。长连接可以省去较多的<code>TCP</code>建立和关闭操作，减少浪费，节约资源</li>\n</ul>\n<h2 id=\"HTTP的请求\"><a href=\"#HTTP的请求\" class=\"headerlink\" title=\"HTTP的请求\"></a>HTTP的请求</h2><h2 id=\"HTTP-的优点和缺点\"><a href=\"#HTTP-的优点和缺点\" class=\"headerlink\" title=\"HTTP 的优点和缺点\"></a>HTTP 的优点和缺点</h2><h3 id=\"HTTP-的优点\"><a href=\"#HTTP-的优点\" class=\"headerlink\" title=\"HTTP 的优点\"></a>HTTP 的优点</h3><ul>\n<li>简单灵活易扩展</li>\n<li>应用广泛、环境成熟</li>\n<li>无状态<h3 id=\"HTTP-的缺点\"><a href=\"#HTTP-的缺点\" class=\"headerlink\" title=\"HTTP 的缺点\"></a>HTTP 的缺点</h3></li>\n<li>无状态</li>\n<li>通信使用明文(不加密)，内容可能会被窃听</li>\n<li>不验证通信方的身份，有可能遭遇伪装</li>\n<li>无法证明报文的完整性，所以有可能已遭篡改</li>\n<li>性能</li>\n</ul>\n<h2 id=\"确保Web安全的HTTPS-身披SSL外壳的HTTP\"><a href=\"#确保Web安全的HTTPS-身披SSL外壳的HTTP\" class=\"headerlink\" title=\"确保Web安全的HTTPS(身披SSL外壳的HTTP)\"></a>确保Web安全的HTTPS(身披SSL外壳的HTTP)</h2><p>与SSL组合使用的<code>HTTP</code>被称为<code>HTTPS</code>(超文本传输安全协议<code>HTTP over SSL</code>)，<br>HTTP+加密+认证+完整性保护=HTTPS</p>\n<p>共享密钥加密：共享密钥加密就是在HTTPS原理中人们常说到的对称加密，那么什么是共享密钥加密呢？其实就是两个所用的密钥是同一个。但是其实在共享密钥加密会有一个密钥传递的不安全，因为很可能会被第三方给替换掉，所以就有了一种公开密钥加密。</p>\n<p>公开密钥加密：公开密钥加密就是HTTPS中人们常说到的非对称加密。那么什么是公开密钥加密呢？公开密钥加密会有两个密钥，一个是主密钥也称做私有密钥，这个一般是不能发送给别人的，一个是公共密钥，这个可以给任何人。其原理就是发送方使用接收方给的公共密钥来加密数据，发送给接收方，然后接收方用私钥来解密。这样数据的安全性就高了很多。但这样也不是说一定安全，只是第三方在不知道私钥的时候去解密其实就是对离散对数的求值，难度很大，目前的技术很难实现。<br><a href=\"https://blog.csdn.net/MierCurry/article/details/104564378\" target=\"_blank\" rel=\"noopener\">加密机制</a></p>\n<ol>\n<li>浏览器使用<code>https</code>的<code>url</code>访问服务器，建立<code>SSL</code>连接</li>\n<li>服务器接收到<code>SSL</code>链接后，发送非对称加密公钥<code>A</code>给浏览器</li>\n<li>浏览器生成随机数，作为对称加密的秘钥<code>B</code></li>\n<li>浏览器使用服务器返回的公钥<code>A</code>，对自己生成的对称加密秘钥<code>B</code>进行加密，得到秘钥<code>C</code></li>\n<li>浏览器将秘钥<code>C</code>发送给服务器</li>\n<li>服务器使用自己的私钥<code>D</code>对接受的秘钥<code>C</code>进行解密，得到对称加密秘钥<code>B</code></li>\n<li>浏览器和服务器之间使用秘钥<code>B</code>作为对称加密秘钥通信</li>\n</ol>\n<h4 id=\"说明：通过上面流程浏览器和服务器之间共享一个对称加密秘钥B，而且不会被人监听和拦截到，之后的消息传递使用秘钥B进行对称加密\"><a href=\"#说明：通过上面流程浏览器和服务器之间共享一个对称加密秘钥B，而且不会被人监听和拦截到，之后的消息传递使用秘钥B进行对称加密\" class=\"headerlink\" title=\"说明：通过上面流程浏览器和服务器之间共享一个对称加密秘钥B，而且不会被人监听和拦截到，之后的消息传递使用秘钥B进行对称加密\"></a>说明：通过上面流程浏览器和服务器之间共享一个对称加密秘钥B，而且不会被人监听和拦截到，之后的消息传递使用秘钥B进行对称加密</h4><h4 id=\"优点：非对称加密只使用了一次，后续所有通信消息都是用对称加密，效率比非对称加密高\"><a href=\"#优点：非对称加密只使用了一次，后续所有通信消息都是用对称加密，效率比非对称加密高\" class=\"headerlink\" title=\"优点：非对称加密只使用了一次，后续所有通信消息都是用对称加密，效率比非对称加密高\"></a>优点：非对称加密只使用了一次，后续所有通信消息都是用对称加密，效率比非对称加密高</h4><h4 id=\"HTTPS的数字证书？\"><a href=\"#HTTPS的数字证书？\" class=\"headerlink\" title=\"HTTPS的数字证书？\"></a>HTTPS的数字证书？</h4><p>中间人可以截取服务器发送给客户端的公钥，冒充服务器将自己的公钥发送给客户端，之后客户端会用中间人公钥进行加密生成对称秘钥，把密钥发给服务器，这时中间人又可以截取对称加密的秘钥。<br>非对称加密之所以不安全，因为客户端不知道这把公钥是不是属于服务器的</p>\n<h4 id=\"引入数字证书\"><a href=\"#引入数字证书\" class=\"headerlink\" title=\"引入数字证书\"></a>引入数字证书</h4><p>认证中心（CA）：一个拥有公信力、大家都认可的认证中心，数字证书认证机构<br>证书内容：签发者、证书用途、公钥、加密算法、Hash算法、证书到期时间</p>\n<h4 id=\"使用证书认证过程：\"><a href=\"#使用证书认证过程：\" class=\"headerlink\" title=\"使用证书认证过程：\"></a>使用证书认证过程：</h4><ol>\n<li>服务器在给客户端传输公钥过程中，会把公钥和服务器的个人信息通过hash算法生成信息摘要</li>\n<li>为了防止信息要被调换，服务器采用CA提供的私钥对信息摘要进行加密来形成数字签名</li>\n<li>最后把原来没hash算法之前的个人信息、公钥及数字签名合并在一起，形成数字证书</li>\n<li>客户端拿到数字证书之后，使用CA提供的公钥对数字证书里的数字签名进行解密来得到信息摘要，然后对数字证书里的服务器的公钥及个人信息利用hash算法得到另一份信息摘要，最后将两份信息摘要对比，如果一样则证明是服务器，否则就是中间人</li>\n</ol>\n<h4 id=\"认证中心、数字证书、数字签名\"><a href=\"#认证中心、数字证书、数字签名\" class=\"headerlink\" title=\"认证中心、数字证书、数字签名\"></a>认证中心、数字证书、数字签名</h4><p>个人信息+公钥+数字签名===数字证书</p>\n<h4 id=\"CA证书的颁发？\"><a href=\"#CA证书的颁发？\" class=\"headerlink\" title=\"CA证书的颁发？\"></a>CA证书的颁发？</h4><p>服务器一开始向认证中心申请证书，客户端也内置了这些证书。</p>\n<h4 id=\"HTTP和RPC的区别？\"><a href=\"#HTTP和RPC的区别？\" class=\"headerlink\" title=\"HTTP和RPC的区别？\"></a>HTTP和RPC的区别？</h4><p>底层协议：Http是基于http协议，RPC基于TCP，也可以是http，自己定义的协议<br>效率：RPC基于自定义的TCP，可以让请求报文体积更小，提高传输效率。<br>性能消耗：RPC基于高效的二进制流传输，消耗低，HTTP大部分通过json来实现，字节大小和序列化都比RPC要消耗性能<br>RPC自带了负载均衡，HTTP需要配置Nginx实现<br>RPC主要用于公司内部服务调用，性能消耗低，传输效率高，服务治理方便；HTTP主要对外如浏览器接口调用，app和第三方接口调用。</p>\n<h4 id=\"加密算法\"><a href=\"#加密算法\" class=\"headerlink\" title=\"加密算法\"></a>加密算法</h4><p>摘要算法：MD5（128位）、SHA1（160位），是一种不可逆的过程，无论多大的数据，经过摘要算法后都生成相同长度的数据。只能通过字典进行破解。<br>对称加密算法：DES、AES，加密解密时使用相同的秘钥。<br>非对称加密算法：RSA，加密解密时使用不同的秘钥，对接支付宝使用RSA2。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"序\"><a href=\"#序\" class=\"headerlink\" title=\"序\"></a>序</h2><p>HTTP和HTTPS的原理</p>\n<h2 id=\"认识-HTTP\"><a href=\"#认识-HTTP\" class=\"headerlink\" title=\"认识 HTTP\"></a>认识 HTTP</h2><p>首先你听的最多的应该就是<code>HTTP</code>是一种 超文本传输协议<code>(Hypertext Transfer Protocol)</code></p>\n<p>那么什么是超文本传输协议？<br>超文本传输协议可以进行文字分割：<code>超文本（Hypertext）</code>、<code>传输（Transfer）</code>、<code>协议（Protocol）</code></p>\n<p>按照范围的大小 协议 &gt; 传输 &gt; 超文本。下面就分别对这三个名次做一个解释。</p>\n<h3 id=\"什么是超文本\"><a href=\"#什么是超文本\" class=\"headerlink\" title=\"什么是超文本\"></a>什么是超文本</h3><p>在互联网早期的时候，我们输入的信息只能保存在本地，无法和其他电脑进行交互。我们保存的信息通常都以文本即简单字符的形式存在，文本是一种能够被计算机解析的有意义的二进制数据包。而随着互联网的高速发展，两台电脑之间能够进行数据的传输后，人们不满足只能在两台电脑之间传输文字，还想要传输图片、音频、视频，甚至点击文字或图片能够进行超链接的跳转，那么文本的语义就被扩大了，这种语义扩大后的文本就被称为超文本(Hypertext)。</p>\n<h3 id=\"什么是传输\"><a href=\"#什么是传输\" class=\"headerlink\" title=\"什么是传输\"></a>什么是传输</h3><p>两台计算机之间会形成互联关系进行通信，我们存储的超文本会被解析成为二进制数据包，由传输载体（例如同轴电缆，电话线，光缆）负责把二进制数据包由计算机终端传输到另一个终端的过程（对终端的详细解释可以参考 你说你懂互联网，那这些你知道么？这篇文章）称为传输(transfer)。</p>\n<h3 id=\"什么是协议\"><a href=\"#什么是协议\" class=\"headerlink\" title=\"什么是协议\"></a>什么是协议</h3><p>自己一个人对自己的约定不能成为协议，协议的前提条件必须是多人约定。<br>网络协议就是网络中(包括互联网)传递、管理信息的一些规范。如同人与人之间相互交流是需要遵循一定的规矩一样，计算机之间的相互通信需要共同遵守一定的规则，这些规则就称为网络协议。</p>\n<blockquote>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结:\"></a>总结:</h3><p>HTTP 是一个在计算机世界里专门在两点之间传输文字、图片、音频、视频等超文本数据的约定和规范</p>\n</blockquote>\n<h2 id=\"与-HTTP-有关的组件\"><a href=\"#与-HTTP-有关的组件\" class=\"headerlink\" title=\"与 HTTP 有关的组件\"></a>与 HTTP 有关的组件</h2><h3 id=\"网络模型\"><a href=\"#网络模型\" class=\"headerlink\" title=\"网络模型\"></a>网络模型</h3><ul>\n<li><p>应用层(web:<code>HTTP</code>,电子邮件:<code>SMTP</code>,端系统文件上传协议:<code>FTP</code>,域名解析:<code>DNS</code>)</p>\n</li>\n<li><p>运输层(<code>TCP</code>和 <code>UDP</code>)</p>\n</li>\n<li><p>网络层(<code>IP</code>)</p>\n</li>\n<li><p>链路层</p>\n<ul>\n<li>(以太网、<code>WiFi</code>和电缆接入的 <code>DOCSIS</code> 协议)分组称为<code>帧(frame)</code></li>\n<li>作用:将帧从一个端系统运输到另一个端系统</li>\n<li>ARP和RARP是数据链路层协议，是一对协议，分别是MAC和IP地址互查的（RARP把MAC转换成IP地址）</li>\n</ul>\n</li>\n<li><p>物理层(将帧中的一个个 比特 从一个节点运输到另一个节点)</p>\n</li>\n</ul>\n<h3 id=\"OSI-模型-国际标准化组织\"><a href=\"#OSI-模型-国际标准化组织\" class=\"headerlink\" title=\"OSI 模型(国际标准化组织)\"></a>OSI 模型(国际标准化组织)</h3><p>OSI 要比上面的网络模型多了 表示层 和 会话层，其他层基本一致</p>\n<ul>\n<li>应用层</li>\n<li>表示层</li>\n<li>会话层</li>\n<li>运输层</li>\n<li>网络层</li>\n<li>链路层</li>\n<li>物理层<h2 id=\"HTTP长连接和短连接\"><a href=\"#HTTP长连接和短连接\" class=\"headerlink\" title=\"HTTP长连接和短连接\"></a>HTTP长连接和短连接</h2>像<code>web</code>网站的<code>http</code>服务一般都是短连接，因为长连接对于服务端来说会耗费一定的资源，像<code>web</code>网站这么频繁的成千上万甚至上亿客户端连接用短连接会更省一些资源，数据库连接一般是长连接频繁请求资源的客户端适合长连接。长连接可以省去较多的<code>TCP</code>建立和关闭操作，减少浪费，节约资源</li>\n</ul>\n<h2 id=\"HTTP的请求\"><a href=\"#HTTP的请求\" class=\"headerlink\" title=\"HTTP的请求\"></a>HTTP的请求</h2><h2 id=\"HTTP-的优点和缺点\"><a href=\"#HTTP-的优点和缺点\" class=\"headerlink\" title=\"HTTP 的优点和缺点\"></a>HTTP 的优点和缺点</h2><h3 id=\"HTTP-的优点\"><a href=\"#HTTP-的优点\" class=\"headerlink\" title=\"HTTP 的优点\"></a>HTTP 的优点</h3><ul>\n<li>简单灵活易扩展</li>\n<li>应用广泛、环境成熟</li>\n<li>无状态<h3 id=\"HTTP-的缺点\"><a href=\"#HTTP-的缺点\" class=\"headerlink\" title=\"HTTP 的缺点\"></a>HTTP 的缺点</h3></li>\n<li>无状态</li>\n<li>通信使用明文(不加密)，内容可能会被窃听</li>\n<li>不验证通信方的身份，有可能遭遇伪装</li>\n<li>无法证明报文的完整性，所以有可能已遭篡改</li>\n<li>性能</li>\n</ul>\n<h2 id=\"确保Web安全的HTTPS-身披SSL外壳的HTTP\"><a href=\"#确保Web安全的HTTPS-身披SSL外壳的HTTP\" class=\"headerlink\" title=\"确保Web安全的HTTPS(身披SSL外壳的HTTP)\"></a>确保Web安全的HTTPS(身披SSL外壳的HTTP)</h2><p>与SSL组合使用的<code>HTTP</code>被称为<code>HTTPS</code>(超文本传输安全协议<code>HTTP over SSL</code>)，<br>HTTP+加密+认证+完整性保护=HTTPS</p>\n<p>共享密钥加密：共享密钥加密就是在HTTPS原理中人们常说到的对称加密，那么什么是共享密钥加密呢？其实就是两个所用的密钥是同一个。但是其实在共享密钥加密会有一个密钥传递的不安全，因为很可能会被第三方给替换掉，所以就有了一种公开密钥加密。</p>\n<p>公开密钥加密：公开密钥加密就是HTTPS中人们常说到的非对称加密。那么什么是公开密钥加密呢？公开密钥加密会有两个密钥，一个是主密钥也称做私有密钥，这个一般是不能发送给别人的，一个是公共密钥，这个可以给任何人。其原理就是发送方使用接收方给的公共密钥来加密数据，发送给接收方，然后接收方用私钥来解密。这样数据的安全性就高了很多。但这样也不是说一定安全，只是第三方在不知道私钥的时候去解密其实就是对离散对数的求值，难度很大，目前的技术很难实现。<br><a href=\"https://blog.csdn.net/MierCurry/article/details/104564378\" target=\"_blank\" rel=\"noopener\">加密机制</a></p>\n<ol>\n<li>浏览器使用<code>https</code>的<code>url</code>访问服务器，建立<code>SSL</code>连接</li>\n<li>服务器接收到<code>SSL</code>链接后，发送非对称加密公钥<code>A</code>给浏览器</li>\n<li>浏览器生成随机数，作为对称加密的秘钥<code>B</code></li>\n<li>浏览器使用服务器返回的公钥<code>A</code>，对自己生成的对称加密秘钥<code>B</code>进行加密，得到秘钥<code>C</code></li>\n<li>浏览器将秘钥<code>C</code>发送给服务器</li>\n<li>服务器使用自己的私钥<code>D</code>对接受的秘钥<code>C</code>进行解密，得到对称加密秘钥<code>B</code></li>\n<li>浏览器和服务器之间使用秘钥<code>B</code>作为对称加密秘钥通信</li>\n</ol>\n<h4 id=\"说明：通过上面流程浏览器和服务器之间共享一个对称加密秘钥B，而且不会被人监听和拦截到，之后的消息传递使用秘钥B进行对称加密\"><a href=\"#说明：通过上面流程浏览器和服务器之间共享一个对称加密秘钥B，而且不会被人监听和拦截到，之后的消息传递使用秘钥B进行对称加密\" class=\"headerlink\" title=\"说明：通过上面流程浏览器和服务器之间共享一个对称加密秘钥B，而且不会被人监听和拦截到，之后的消息传递使用秘钥B进行对称加密\"></a>说明：通过上面流程浏览器和服务器之间共享一个对称加密秘钥B，而且不会被人监听和拦截到，之后的消息传递使用秘钥B进行对称加密</h4><h4 id=\"优点：非对称加密只使用了一次，后续所有通信消息都是用对称加密，效率比非对称加密高\"><a href=\"#优点：非对称加密只使用了一次，后续所有通信消息都是用对称加密，效率比非对称加密高\" class=\"headerlink\" title=\"优点：非对称加密只使用了一次，后续所有通信消息都是用对称加密，效率比非对称加密高\"></a>优点：非对称加密只使用了一次，后续所有通信消息都是用对称加密，效率比非对称加密高</h4><h4 id=\"HTTPS的数字证书？\"><a href=\"#HTTPS的数字证书？\" class=\"headerlink\" title=\"HTTPS的数字证书？\"></a>HTTPS的数字证书？</h4><p>中间人可以截取服务器发送给客户端的公钥，冒充服务器将自己的公钥发送给客户端，之后客户端会用中间人公钥进行加密生成对称秘钥，把密钥发给服务器，这时中间人又可以截取对称加密的秘钥。<br>非对称加密之所以不安全，因为客户端不知道这把公钥是不是属于服务器的</p>\n<h4 id=\"引入数字证书\"><a href=\"#引入数字证书\" class=\"headerlink\" title=\"引入数字证书\"></a>引入数字证书</h4><p>认证中心（CA）：一个拥有公信力、大家都认可的认证中心，数字证书认证机构<br>证书内容：签发者、证书用途、公钥、加密算法、Hash算法、证书到期时间</p>\n<h4 id=\"使用证书认证过程：\"><a href=\"#使用证书认证过程：\" class=\"headerlink\" title=\"使用证书认证过程：\"></a>使用证书认证过程：</h4><ol>\n<li>服务器在给客户端传输公钥过程中，会把公钥和服务器的个人信息通过hash算法生成信息摘要</li>\n<li>为了防止信息要被调换，服务器采用CA提供的私钥对信息摘要进行加密来形成数字签名</li>\n<li>最后把原来没hash算法之前的个人信息、公钥及数字签名合并在一起，形成数字证书</li>\n<li>客户端拿到数字证书之后，使用CA提供的公钥对数字证书里的数字签名进行解密来得到信息摘要，然后对数字证书里的服务器的公钥及个人信息利用hash算法得到另一份信息摘要，最后将两份信息摘要对比，如果一样则证明是服务器，否则就是中间人</li>\n</ol>\n<h4 id=\"认证中心、数字证书、数字签名\"><a href=\"#认证中心、数字证书、数字签名\" class=\"headerlink\" title=\"认证中心、数字证书、数字签名\"></a>认证中心、数字证书、数字签名</h4><p>个人信息+公钥+数字签名===数字证书</p>\n<h4 id=\"CA证书的颁发？\"><a href=\"#CA证书的颁发？\" class=\"headerlink\" title=\"CA证书的颁发？\"></a>CA证书的颁发？</h4><p>服务器一开始向认证中心申请证书，客户端也内置了这些证书。</p>\n<h4 id=\"HTTP和RPC的区别？\"><a href=\"#HTTP和RPC的区别？\" class=\"headerlink\" title=\"HTTP和RPC的区别？\"></a>HTTP和RPC的区别？</h4><p>底层协议：Http是基于http协议，RPC基于TCP，也可以是http，自己定义的协议<br>效率：RPC基于自定义的TCP，可以让请求报文体积更小，提高传输效率。<br>性能消耗：RPC基于高效的二进制流传输，消耗低，HTTP大部分通过json来实现，字节大小和序列化都比RPC要消耗性能<br>RPC自带了负载均衡，HTTP需要配置Nginx实现<br>RPC主要用于公司内部服务调用，性能消耗低，传输效率高，服务治理方便；HTTP主要对外如浏览器接口调用，app和第三方接口调用。</p>\n<h4 id=\"加密算法\"><a href=\"#加密算法\" class=\"headerlink\" title=\"加密算法\"></a>加密算法</h4><p>摘要算法：MD5（128位）、SHA1（160位），是一种不可逆的过程，无论多大的数据，经过摘要算法后都生成相同长度的数据。只能通过字典进行破解。<br>对称加密算法：DES、AES，加密解密时使用相同的秘钥。<br>非对称加密算法：RSA，加密解密时使用不同的秘钥，对接支付宝使用RSA2。</p>\n"},{"title":"Hybrid和Javascript之间的秘密","_content":"## 序\n此章节主要讲解`Hybrid`和`Javascript`之间的秘密\n\n## hrbrid是什么?为何用hybrid?\n\n#### 1. hybrid文字解释\n- `hybrid`即'混合',即前端和客户端的混合开发\n- 需前端开发人员和客户端开发人员配合完成\n- 某些环节也可能涉及到`server`端\n- ps.不要以为自己是前端就可以不理会客户端的知识\n\n#### 2. 存在价值,为何用hybrid\n- 可以快速迭代更新(无需`app`审核,无需高权限)\n- 体验流畅(和`native`的体验基本类似)\n- 减少开发和沟通成本,双端公用一套代码\n\n#### 3. webview\n- 它是`app`中的一个组件(`app`可以有`webview`,也可以没有)\n- 用于加载`h5`页面,即一个小型的浏览器内核\n\n##### 补充：常见的浏览器内核如下：\n1. `Chrome,Safari: webkit`\n2. `Firefox:Gecko`\n3. `IE: Trident`\n4. `360`,搜狗等国内浏览器：`Trident+webkit`\n\n#### 4. file协议\n【其实在一开始我们就接触`html`开发,就已经使用了`file`协议,只不过当时没有'协议','标准'等这些概念,这里再次强调'协议','标准'的重要性！！！】\n##### file协议和http(s)的区别:\n1. `file`协议是本地文件,快(断网也可以,打开本地文件即可); \n表示： `\"file://\"` + 文件绝对路径\n2. `http(s)`协议是网络加载,慢(断网不可以);  \n表示：`\"http(s)://\"`\n\n#### 5. hybrid实现流程\n- 不是所有场景都适合使用`hybrid`\n- 使用`native`:体验要求极致,变化不频繁(如头条的首页)\n- 使用`hybrid`:体验要求高,变化频繁(如头条的新闻详情页)\n- 使用`h5`:体验无要求,不常用(如举报,反馈等页面)\n\n## 具体实现如下:\n1. 前端做好静态页面`(html js css)`,将文件交给客户端\n2. 客户端拿到静态页面,以文件形式存储在`app`中\n3. 客户端在一个`webview`中(重要！！！)\n4. 使用`file`协议加载静态页面(重要！！！)\n用如下图表示如下:\n\n![](../images/hy.png)\n\n## 总结:  \n1. `hybrid`是客户端和前端的混合开发\n2. `hybrid`存在的核心意义在于快速迭代,无需审核\n3. `hybrid`实现流程(如上图),以及`webview`和`file`协议\n\n## 介绍一下hybrid更新和上线的流程\n先看下面两张图\n![avatar](../images/hyserver.png)\n![avatar](../images/hyclient.png)\n\n要替换每个客户端的静态文件,只能客户端来做(客户端是我们开发的),客户端去`server`下载最新的静态文件,我们维护`server`的静态文件\n\n#### 客户端和server先对比版本,如果一致客户端没必要重新下载(不做无谓的下载)\n- 分版本,有版本号,如`20200227`(时间戳)\n- 将静态文件压缩成`zip`包上传到服务器\n- 客户端每次启动,都去服务端检查版本号\n- 如果服务端版本号大于客户端版本号,就去下载最新的`zip`包\n- 下载完之后解压包,然后将现有文件覆盖\n\n## 总结: \n要点1.掌握流程图\n要点2.服务端的版本和`zip`包维护\n要点3.更新`zip`包之前先对比版本号\n要点4.`zip`包下载解压和覆盖\n\n## hybrid和h5的主要区别\n\n#### 1.优点:\n- 体验更好,跟`native`体验基本一致\n- 可快速迭代,无需审核(关键)\n\n#### 2.缺点:\n - 开发成本高,联调,测试,查`bug`都比较麻烦\n - 运维成本高,可参考此前讲过的更新上线的流程\n\n#### 3.适用的场景:\n - `hybrid`: 产品的稳定功能,体验要求高,频繁迭代\n - `h5`: 单次的运营活动(如xx红包)或不常用功能\n\n\n## 总结:\n- 优点: 体验好,可快速迭代\n- 缺点: 开发成本高,运维成本高\n- 适用的场景: `hybrid`适合产品型,`h5`适合运营型\n\n## 前端js和客户端如何通讯？\n ### 1. js和客户端通讯的基本技术\n #### js和客户端通讯的基本形式(见下图)\n ![avatar](../images/hycommunite.png)\n\n - `js`访问客户端能力,传递参数和回调函数\n - 客户端通过回调函数返回内容\n\n### 2.遗留问题:新闻详情页适用hybrid(file协议),前端如何获取到新闻内容？\n 1. 不能用`ajax`获取(`http`协议):第一跨域,第二速度慢。\n 2. 客户端获取新闻内容后然后通过`js`通讯拿到内容,再渲染。\n\n#### schema协议简介和适用 \n`schema`协议：前端和客户端的约定\neg：\n微信`schema`格式：`\"weixin://\"`\n`QQ schema`协议格式：`\"QQ://\"`\n#### schema使用的封装\n\n#### 简单版\n ```javascript\n var iframe = document.createElement('iframe')\n iframe.style.display = 'none'\n //iframe访问schema（重要！！！）\n iframe.src = 'weixin://dl/scan?k1=v1&k2=v2&k3=v3&callback=_weixin_scan_callback'    \n \n\n var body = document.body || document.getElementsByTagName('body')[0]\n body.appendchild(iframe)\n setTimeout(function(){\n     body.removeChild(iframe)  //销毁iframe\n     iframe = null\n })\n\n//如果要加上参数和callback，那么就必须要这么写\n window['_weixin_scan_callback'] = function(result){\n     alert(alert)\n }\n```\n\n#### 封装版\n\n ```javascript\n \n window.invoke.share({title:'xxx',content:'xxx'},function(result){\n     if(result.errno === 0) {\n         alert('分享成功！')\n     }else{\n         alert('分享失败！',result.message)\n     }\n })\n//分享\n function invokeShare(data,callback){\n     _invoke('share',data,callback)\n }\n //登录\n function invokeLogin(data,callback){\n    _invoke('login',data,callback)\n }\n //扫一扫\n function invokeScan(data,callback){\n     _invoke('scan',data,callback)\n }\n//暴露给全局\n window.invoke = {\n     share:invokeShare,\n     login:invokeLogin,\n     scan:invokeScan\n }\n\n function _invoke(action,data,callback){\n     var schema = 'myapp://utils'\n     schema += '/' + action\n     schema += '?a=a'\n     var key\n     for(var key in data){     //data={title:'xxx',content:'xxx'}\n         if(data.hasOwnProperty(key)){\n             schema += '&' + key + '=' + data[key]\n         }\n     }\n }\n\n //处理callback\n var callbackName = ''\n if(typeof callback === 'string'){\n     callbackName = callback\n }else{\n     callbackName = action + Date.now()\n     window[callbackName] = callback\n }\n\n schema += '&callback='+ callbackName\n //iframe调用schema\n 此处省略N行\n\n\n\n (function(window,undefined){\n     function _invoke(action,data,callback){\n         //拼接schema的封装\n         var schema = 'myapp://utils' + action\n         schema += '?a=a' //拼接参数\n         window.invoke = {\n             share:function(data,callback){\n                 _invoke('share',data,callback)\n             },\n             scan:function(data,callback){\n                 _invoke('scan',data,callback)\n             },\n             login:function(data,callback){\n                 _invoke('login',data,callback)\n             }\n         }\n     }\n })\n```\n#### 内置上线\n\n\n## 总结\n1. 通讯的基本形式： 调用能力，传递参数，监听回调\n2. 对`schema`协议的理解和使用\n3. 调用`schema`代码的封装\n4. 内置上线的好处：更快，更安全\n\n\n\n \n \n\n\n\n\n\n\n\n","source":"_posts/jsClientCommunication.md","raw":"---\ntitle: Hybrid和Javascript之间的秘密\ncategories: 前端\ntags: \n    - 前端\n\n---\n## 序\n此章节主要讲解`Hybrid`和`Javascript`之间的秘密\n\n## hrbrid是什么?为何用hybrid?\n\n#### 1. hybrid文字解释\n- `hybrid`即'混合',即前端和客户端的混合开发\n- 需前端开发人员和客户端开发人员配合完成\n- 某些环节也可能涉及到`server`端\n- ps.不要以为自己是前端就可以不理会客户端的知识\n\n#### 2. 存在价值,为何用hybrid\n- 可以快速迭代更新(无需`app`审核,无需高权限)\n- 体验流畅(和`native`的体验基本类似)\n- 减少开发和沟通成本,双端公用一套代码\n\n#### 3. webview\n- 它是`app`中的一个组件(`app`可以有`webview`,也可以没有)\n- 用于加载`h5`页面,即一个小型的浏览器内核\n\n##### 补充：常见的浏览器内核如下：\n1. `Chrome,Safari: webkit`\n2. `Firefox:Gecko`\n3. `IE: Trident`\n4. `360`,搜狗等国内浏览器：`Trident+webkit`\n\n#### 4. file协议\n【其实在一开始我们就接触`html`开发,就已经使用了`file`协议,只不过当时没有'协议','标准'等这些概念,这里再次强调'协议','标准'的重要性！！！】\n##### file协议和http(s)的区别:\n1. `file`协议是本地文件,快(断网也可以,打开本地文件即可); \n表示： `\"file://\"` + 文件绝对路径\n2. `http(s)`协议是网络加载,慢(断网不可以);  \n表示：`\"http(s)://\"`\n\n#### 5. hybrid实现流程\n- 不是所有场景都适合使用`hybrid`\n- 使用`native`:体验要求极致,变化不频繁(如头条的首页)\n- 使用`hybrid`:体验要求高,变化频繁(如头条的新闻详情页)\n- 使用`h5`:体验无要求,不常用(如举报,反馈等页面)\n\n## 具体实现如下:\n1. 前端做好静态页面`(html js css)`,将文件交给客户端\n2. 客户端拿到静态页面,以文件形式存储在`app`中\n3. 客户端在一个`webview`中(重要！！！)\n4. 使用`file`协议加载静态页面(重要！！！)\n用如下图表示如下:\n\n![](../images/hy.png)\n\n## 总结:  \n1. `hybrid`是客户端和前端的混合开发\n2. `hybrid`存在的核心意义在于快速迭代,无需审核\n3. `hybrid`实现流程(如上图),以及`webview`和`file`协议\n\n## 介绍一下hybrid更新和上线的流程\n先看下面两张图\n![avatar](../images/hyserver.png)\n![avatar](../images/hyclient.png)\n\n要替换每个客户端的静态文件,只能客户端来做(客户端是我们开发的),客户端去`server`下载最新的静态文件,我们维护`server`的静态文件\n\n#### 客户端和server先对比版本,如果一致客户端没必要重新下载(不做无谓的下载)\n- 分版本,有版本号,如`20200227`(时间戳)\n- 将静态文件压缩成`zip`包上传到服务器\n- 客户端每次启动,都去服务端检查版本号\n- 如果服务端版本号大于客户端版本号,就去下载最新的`zip`包\n- 下载完之后解压包,然后将现有文件覆盖\n\n## 总结: \n要点1.掌握流程图\n要点2.服务端的版本和`zip`包维护\n要点3.更新`zip`包之前先对比版本号\n要点4.`zip`包下载解压和覆盖\n\n## hybrid和h5的主要区别\n\n#### 1.优点:\n- 体验更好,跟`native`体验基本一致\n- 可快速迭代,无需审核(关键)\n\n#### 2.缺点:\n - 开发成本高,联调,测试,查`bug`都比较麻烦\n - 运维成本高,可参考此前讲过的更新上线的流程\n\n#### 3.适用的场景:\n - `hybrid`: 产品的稳定功能,体验要求高,频繁迭代\n - `h5`: 单次的运营活动(如xx红包)或不常用功能\n\n\n## 总结:\n- 优点: 体验好,可快速迭代\n- 缺点: 开发成本高,运维成本高\n- 适用的场景: `hybrid`适合产品型,`h5`适合运营型\n\n## 前端js和客户端如何通讯？\n ### 1. js和客户端通讯的基本技术\n #### js和客户端通讯的基本形式(见下图)\n ![avatar](../images/hycommunite.png)\n\n - `js`访问客户端能力,传递参数和回调函数\n - 客户端通过回调函数返回内容\n\n### 2.遗留问题:新闻详情页适用hybrid(file协议),前端如何获取到新闻内容？\n 1. 不能用`ajax`获取(`http`协议):第一跨域,第二速度慢。\n 2. 客户端获取新闻内容后然后通过`js`通讯拿到内容,再渲染。\n\n#### schema协议简介和适用 \n`schema`协议：前端和客户端的约定\neg：\n微信`schema`格式：`\"weixin://\"`\n`QQ schema`协议格式：`\"QQ://\"`\n#### schema使用的封装\n\n#### 简单版\n ```javascript\n var iframe = document.createElement('iframe')\n iframe.style.display = 'none'\n //iframe访问schema（重要！！！）\n iframe.src = 'weixin://dl/scan?k1=v1&k2=v2&k3=v3&callback=_weixin_scan_callback'    \n \n\n var body = document.body || document.getElementsByTagName('body')[0]\n body.appendchild(iframe)\n setTimeout(function(){\n     body.removeChild(iframe)  //销毁iframe\n     iframe = null\n })\n\n//如果要加上参数和callback，那么就必须要这么写\n window['_weixin_scan_callback'] = function(result){\n     alert(alert)\n }\n```\n\n#### 封装版\n\n ```javascript\n \n window.invoke.share({title:'xxx',content:'xxx'},function(result){\n     if(result.errno === 0) {\n         alert('分享成功！')\n     }else{\n         alert('分享失败！',result.message)\n     }\n })\n//分享\n function invokeShare(data,callback){\n     _invoke('share',data,callback)\n }\n //登录\n function invokeLogin(data,callback){\n    _invoke('login',data,callback)\n }\n //扫一扫\n function invokeScan(data,callback){\n     _invoke('scan',data,callback)\n }\n//暴露给全局\n window.invoke = {\n     share:invokeShare,\n     login:invokeLogin,\n     scan:invokeScan\n }\n\n function _invoke(action,data,callback){\n     var schema = 'myapp://utils'\n     schema += '/' + action\n     schema += '?a=a'\n     var key\n     for(var key in data){     //data={title:'xxx',content:'xxx'}\n         if(data.hasOwnProperty(key)){\n             schema += '&' + key + '=' + data[key]\n         }\n     }\n }\n\n //处理callback\n var callbackName = ''\n if(typeof callback === 'string'){\n     callbackName = callback\n }else{\n     callbackName = action + Date.now()\n     window[callbackName] = callback\n }\n\n schema += '&callback='+ callbackName\n //iframe调用schema\n 此处省略N行\n\n\n\n (function(window,undefined){\n     function _invoke(action,data,callback){\n         //拼接schema的封装\n         var schema = 'myapp://utils' + action\n         schema += '?a=a' //拼接参数\n         window.invoke = {\n             share:function(data,callback){\n                 _invoke('share',data,callback)\n             },\n             scan:function(data,callback){\n                 _invoke('scan',data,callback)\n             },\n             login:function(data,callback){\n                 _invoke('login',data,callback)\n             }\n         }\n     }\n })\n```\n#### 内置上线\n\n\n## 总结\n1. 通讯的基本形式： 调用能力，传递参数，监听回调\n2. 对`schema`协议的理解和使用\n3. 调用`schema`代码的封装\n4. 内置上线的好处：更快，更安全\n\n\n\n \n \n\n\n\n\n\n\n\n","slug":"jsClientCommunication","published":1,"date":"2020-03-15T09:51:03.798Z","updated":"2020-03-15T09:51:03.799Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7t6o2wi000tpsuc24iiweju","content":"<h2 id=\"序\"><a href=\"#序\" class=\"headerlink\" title=\"序\"></a>序</h2><p>此章节主要讲解<code>Hybrid</code>和<code>Javascript</code>之间的秘密</p>\n<h2 id=\"hrbrid是什么-为何用hybrid\"><a href=\"#hrbrid是什么-为何用hybrid\" class=\"headerlink\" title=\"hrbrid是什么?为何用hybrid?\"></a>hrbrid是什么?为何用hybrid?</h2><h4 id=\"1-hybrid文字解释\"><a href=\"#1-hybrid文字解释\" class=\"headerlink\" title=\"1. hybrid文字解释\"></a>1. hybrid文字解释</h4><ul>\n<li><code>hybrid</code>即’混合’,即前端和客户端的混合开发</li>\n<li>需前端开发人员和客户端开发人员配合完成</li>\n<li>某些环节也可能涉及到<code>server</code>端</li>\n<li>ps.不要以为自己是前端就可以不理会客户端的知识</li>\n</ul>\n<h4 id=\"2-存在价值-为何用hybrid\"><a href=\"#2-存在价值-为何用hybrid\" class=\"headerlink\" title=\"2. 存在价值,为何用hybrid\"></a>2. 存在价值,为何用hybrid</h4><ul>\n<li>可以快速迭代更新(无需<code>app</code>审核,无需高权限)</li>\n<li>体验流畅(和<code>native</code>的体验基本类似)</li>\n<li>减少开发和沟通成本,双端公用一套代码</li>\n</ul>\n<h4 id=\"3-webview\"><a href=\"#3-webview\" class=\"headerlink\" title=\"3. webview\"></a>3. webview</h4><ul>\n<li>它是<code>app</code>中的一个组件(<code>app</code>可以有<code>webview</code>,也可以没有)</li>\n<li>用于加载<code>h5</code>页面,即一个小型的浏览器内核</li>\n</ul>\n<h5 id=\"补充：常见的浏览器内核如下：\"><a href=\"#补充：常见的浏览器内核如下：\" class=\"headerlink\" title=\"补充：常见的浏览器内核如下：\"></a>补充：常见的浏览器内核如下：</h5><ol>\n<li><code>Chrome,Safari: webkit</code></li>\n<li><code>Firefox:Gecko</code></li>\n<li><code>IE: Trident</code></li>\n<li><code>360</code>,搜狗等国内浏览器：<code>Trident+webkit</code></li>\n</ol>\n<h4 id=\"4-file协议\"><a href=\"#4-file协议\" class=\"headerlink\" title=\"4. file协议\"></a>4. file协议</h4><p>【其实在一开始我们就接触<code>html</code>开发,就已经使用了<code>file</code>协议,只不过当时没有’协议’,’标准’等这些概念,这里再次强调’协议’,’标准’的重要性！！！】</p>\n<h5 id=\"file协议和http-s-的区别\"><a href=\"#file协议和http-s-的区别\" class=\"headerlink\" title=\"file协议和http(s)的区别:\"></a>file协议和http(s)的区别:</h5><ol>\n<li><code>file</code>协议是本地文件,快(断网也可以,打开本地文件即可);<br>表示： <code>&quot;file://&quot;</code> + 文件绝对路径</li>\n<li><code>http(s)</code>协议是网络加载,慢(断网不可以);<br>表示：<code>&quot;http(s)://&quot;</code></li>\n</ol>\n<h4 id=\"5-hybrid实现流程\"><a href=\"#5-hybrid实现流程\" class=\"headerlink\" title=\"5. hybrid实现流程\"></a>5. hybrid实现流程</h4><ul>\n<li>不是所有场景都适合使用<code>hybrid</code></li>\n<li>使用<code>native</code>:体验要求极致,变化不频繁(如头条的首页)</li>\n<li>使用<code>hybrid</code>:体验要求高,变化频繁(如头条的新闻详情页)</li>\n<li>使用<code>h5</code>:体验无要求,不常用(如举报,反馈等页面)</li>\n</ul>\n<h2 id=\"具体实现如下\"><a href=\"#具体实现如下\" class=\"headerlink\" title=\"具体实现如下:\"></a>具体实现如下:</h2><ol>\n<li>前端做好静态页面<code>(html js css)</code>,将文件交给客户端</li>\n<li>客户端拿到静态页面,以文件形式存储在<code>app</code>中</li>\n<li>客户端在一个<code>webview</code>中(重要！！！)</li>\n<li>使用<code>file</code>协议加载静态页面(重要！！！)<br>用如下图表示如下:</li>\n</ol>\n<p><img src=\"../images/hy.png\" alt></p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结:\"></a>总结:</h2><ol>\n<li><code>hybrid</code>是客户端和前端的混合开发</li>\n<li><code>hybrid</code>存在的核心意义在于快速迭代,无需审核</li>\n<li><code>hybrid</code>实现流程(如上图),以及<code>webview</code>和<code>file</code>协议</li>\n</ol>\n<h2 id=\"介绍一下hybrid更新和上线的流程\"><a href=\"#介绍一下hybrid更新和上线的流程\" class=\"headerlink\" title=\"介绍一下hybrid更新和上线的流程\"></a>介绍一下hybrid更新和上线的流程</h2><p>先看下面两张图<br><img src=\"../images/hyserver.png\" alt=\"avatar\"><br><img src=\"../images/hyclient.png\" alt=\"avatar\"></p>\n<p>要替换每个客户端的静态文件,只能客户端来做(客户端是我们开发的),客户端去<code>server</code>下载最新的静态文件,我们维护<code>server</code>的静态文件</p>\n<h4 id=\"客户端和server先对比版本-如果一致客户端没必要重新下载-不做无谓的下载\"><a href=\"#客户端和server先对比版本-如果一致客户端没必要重新下载-不做无谓的下载\" class=\"headerlink\" title=\"客户端和server先对比版本,如果一致客户端没必要重新下载(不做无谓的下载)\"></a>客户端和server先对比版本,如果一致客户端没必要重新下载(不做无谓的下载)</h4><ul>\n<li>分版本,有版本号,如<code>20200227</code>(时间戳)</li>\n<li>将静态文件压缩成<code>zip</code>包上传到服务器</li>\n<li>客户端每次启动,都去服务端检查版本号</li>\n<li>如果服务端版本号大于客户端版本号,就去下载最新的<code>zip</code>包</li>\n<li>下载完之后解压包,然后将现有文件覆盖</li>\n</ul>\n<h2 id=\"总结-1\"><a href=\"#总结-1\" class=\"headerlink\" title=\"总结:\"></a>总结:</h2><p>要点1.掌握流程图<br>要点2.服务端的版本和<code>zip</code>包维护<br>要点3.更新<code>zip</code>包之前先对比版本号<br>要点4.<code>zip</code>包下载解压和覆盖</p>\n<h2 id=\"hybrid和h5的主要区别\"><a href=\"#hybrid和h5的主要区别\" class=\"headerlink\" title=\"hybrid和h5的主要区别\"></a>hybrid和h5的主要区别</h2><h4 id=\"1-优点\"><a href=\"#1-优点\" class=\"headerlink\" title=\"1.优点:\"></a>1.优点:</h4><ul>\n<li>体验更好,跟<code>native</code>体验基本一致</li>\n<li>可快速迭代,无需审核(关键)</li>\n</ul>\n<h4 id=\"2-缺点\"><a href=\"#2-缺点\" class=\"headerlink\" title=\"2.缺点:\"></a>2.缺点:</h4><ul>\n<li>开发成本高,联调,测试,查<code>bug</code>都比较麻烦</li>\n<li>运维成本高,可参考此前讲过的更新上线的流程</li>\n</ul>\n<h4 id=\"3-适用的场景\"><a href=\"#3-适用的场景\" class=\"headerlink\" title=\"3.适用的场景:\"></a>3.适用的场景:</h4><ul>\n<li><code>hybrid</code>: 产品的稳定功能,体验要求高,频繁迭代</li>\n<li><code>h5</code>: 单次的运营活动(如xx红包)或不常用功能</li>\n</ul>\n<h2 id=\"总结-2\"><a href=\"#总结-2\" class=\"headerlink\" title=\"总结:\"></a>总结:</h2><ul>\n<li>优点: 体验好,可快速迭代</li>\n<li>缺点: 开发成本高,运维成本高</li>\n<li>适用的场景: <code>hybrid</code>适合产品型,<code>h5</code>适合运营型</li>\n</ul>\n<h2 id=\"前端js和客户端如何通讯？\"><a href=\"#前端js和客户端如何通讯？\" class=\"headerlink\" title=\"前端js和客户端如何通讯？\"></a>前端js和客户端如何通讯？</h2><h3 id=\"1-js和客户端通讯的基本技术\"><a href=\"#1-js和客户端通讯的基本技术\" class=\"headerlink\" title=\"1. js和客户端通讯的基本技术\"></a>1. js和客户端通讯的基本技术</h3><h4 id=\"js和客户端通讯的基本形式-见下图\"><a href=\"#js和客户端通讯的基本形式-见下图\" class=\"headerlink\" title=\"js和客户端通讯的基本形式(见下图)\"></a>js和客户端通讯的基本形式(见下图)</h4><p> <img src=\"../images/hycommunite.png\" alt=\"avatar\"></p>\n<ul>\n<li><code>js</code>访问客户端能力,传递参数和回调函数</li>\n<li>客户端通过回调函数返回内容</li>\n</ul>\n<h3 id=\"2-遗留问题-新闻详情页适用hybrid-file协议-前端如何获取到新闻内容？\"><a href=\"#2-遗留问题-新闻详情页适用hybrid-file协议-前端如何获取到新闻内容？\" class=\"headerlink\" title=\"2.遗留问题:新闻详情页适用hybrid(file协议),前端如何获取到新闻内容？\"></a>2.遗留问题:新闻详情页适用hybrid(file协议),前端如何获取到新闻内容？</h3><ol>\n<li>不能用<code>ajax</code>获取(<code>http</code>协议):第一跨域,第二速度慢。</li>\n<li>客户端获取新闻内容后然后通过<code>js</code>通讯拿到内容,再渲染。</li>\n</ol>\n<h4 id=\"schema协议简介和适用\"><a href=\"#schema协议简介和适用\" class=\"headerlink\" title=\"schema协议简介和适用\"></a>schema协议简介和适用</h4><p><code>schema</code>协议：前端和客户端的约定<br>eg：<br>微信<code>schema</code>格式：<code>&quot;weixin://&quot;</code><br><code>QQ schema</code>协议格式：<code>&quot;QQ://&quot;</code></p>\n<h4 id=\"schema使用的封装\"><a href=\"#schema使用的封装\" class=\"headerlink\" title=\"schema使用的封装\"></a>schema使用的封装</h4><h4 id=\"简单版\"><a href=\"#简单版\" class=\"headerlink\" title=\"简单版\"></a>简单版</h4> <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"keyword\">var</span> iframe = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'iframe'</span>)</span><br><span class=\"line\"> iframe.style.display = <span class=\"string\">'none'</span></span><br><span class=\"line\"> <span class=\"comment\">//iframe访问schema（重要！！！）</span></span><br><span class=\"line\"> iframe.src = <span class=\"string\">'weixin://dl/scan?k1=v1&amp;k2=v2&amp;k3=v3&amp;callback=_weixin_scan_callback'</span>    </span><br><span class=\"line\"> </span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"keyword\">var</span> body = <span class=\"built_in\">document</span>.body || <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">'body'</span>)[<span class=\"number\">0</span>]</span><br><span class=\"line\"> body.appendchild(iframe)</span><br><span class=\"line\"> setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">     body.removeChild(iframe)  <span class=\"comment\">//销毁iframe</span></span><br><span class=\"line\">     iframe = <span class=\"literal\">null</span></span><br><span class=\"line\"> &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//如果要加上参数和callback，那么就必须要这么写</span></span><br><span class=\"line\"> <span class=\"built_in\">window</span>[<span class=\"string\">'_weixin_scan_callback'</span>] = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">result</span>)</span>&#123;</span><br><span class=\"line\">     alert(alert)</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"封装版\"><a href=\"#封装版\" class=\"headerlink\" title=\"封装版\"></a>封装版</h4> <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> </span><br><span class=\"line\"> <span class=\"built_in\">window</span>.invoke.share(&#123;<span class=\"attr\">title</span>:<span class=\"string\">'xxx'</span>,<span class=\"attr\">content</span>:<span class=\"string\">'xxx'</span>&#125;,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">result</span>)</span>&#123;</span><br><span class=\"line\">     <span class=\"keyword\">if</span>(result.errno === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">         alert(<span class=\"string\">'分享成功！'</span>)</span><br><span class=\"line\">     &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">         alert(<span class=\"string\">'分享失败！'</span>,result.message)</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"> &#125;)</span><br><span class=\"line\"><span class=\"comment\">//分享</span></span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">invokeShare</span>(<span class=\"params\">data,callback</span>)</span>&#123;</span><br><span class=\"line\">     _invoke(<span class=\"string\">'share'</span>,data,callback)</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> <span class=\"comment\">//登录</span></span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">invokeLogin</span>(<span class=\"params\">data,callback</span>)</span>&#123;</span><br><span class=\"line\">    _invoke(<span class=\"string\">'login'</span>,data,callback)</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> <span class=\"comment\">//扫一扫</span></span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">invokeScan</span>(<span class=\"params\">data,callback</span>)</span>&#123;</span><br><span class=\"line\">     _invoke(<span class=\"string\">'scan'</span>,data,callback)</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"><span class=\"comment\">//暴露给全局</span></span><br><span class=\"line\"> <span class=\"built_in\">window</span>.invoke = &#123;</span><br><span class=\"line\">     share:invokeShare,</span><br><span class=\"line\">     login:invokeLogin,</span><br><span class=\"line\">     scan:invokeScan</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">_invoke</span>(<span class=\"params\">action,data,callback</span>)</span>&#123;</span><br><span class=\"line\">     <span class=\"keyword\">var</span> schema = <span class=\"string\">'myapp://utils'</span></span><br><span class=\"line\">     schema += <span class=\"string\">'/'</span> + action</span><br><span class=\"line\">     schema += <span class=\"string\">'?a=a'</span></span><br><span class=\"line\">     <span class=\"keyword\">var</span> key</span><br><span class=\"line\">     <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> key <span class=\"keyword\">in</span> data)&#123;     <span class=\"comment\">//data=&#123;title:'xxx',content:'xxx'&#125;</span></span><br><span class=\"line\">         <span class=\"keyword\">if</span>(data.hasOwnProperty(key))&#123;</span><br><span class=\"line\">             schema += <span class=\"string\">'&amp;'</span> + key + <span class=\"string\">'='</span> + data[key]</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"comment\">//处理callback</span></span><br><span class=\"line\"> <span class=\"keyword\">var</span> callbackName = <span class=\"string\">''</span></span><br><span class=\"line\"> <span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span> callback === <span class=\"string\">'string'</span>)&#123;</span><br><span class=\"line\">     callbackName = callback</span><br><span class=\"line\"> &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">     callbackName = action + <span class=\"built_in\">Date</span>.now()</span><br><span class=\"line\">     <span class=\"built_in\">window</span>[callbackName] = callback</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> schema += <span class=\"string\">'&amp;callback='</span>+ callbackName</span><br><span class=\"line\"> <span class=\"comment\">//iframe调用schema</span></span><br><span class=\"line\"> 此处省略N行</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"> (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">window,undefined</span>)</span>&#123;</span><br><span class=\"line\">     <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">_invoke</span>(<span class=\"params\">action,data,callback</span>)</span>&#123;</span><br><span class=\"line\">         <span class=\"comment\">//拼接schema的封装</span></span><br><span class=\"line\">         <span class=\"keyword\">var</span> schema = <span class=\"string\">'myapp://utils'</span> + action</span><br><span class=\"line\">         schema += <span class=\"string\">'?a=a'</span> <span class=\"comment\">//拼接参数</span></span><br><span class=\"line\">         <span class=\"built_in\">window</span>.invoke = &#123;</span><br><span class=\"line\">             share:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data,callback</span>)</span>&#123;</span><br><span class=\"line\">                 _invoke(<span class=\"string\">'share'</span>,data,callback)</span><br><span class=\"line\">             &#125;,</span><br><span class=\"line\">             scan:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data,callback</span>)</span>&#123;</span><br><span class=\"line\">                 _invoke(<span class=\"string\">'scan'</span>,data,callback)</span><br><span class=\"line\">             &#125;,</span><br><span class=\"line\">             login:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data,callback</span>)</span>&#123;</span><br><span class=\"line\">                 _invoke(<span class=\"string\">'login'</span>,data,callback)</span><br><span class=\"line\">             &#125;</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"> &#125;)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"内置上线\"><a href=\"#内置上线\" class=\"headerlink\" title=\"内置上线\"></a>内置上线</h4><h2 id=\"总结-3\"><a href=\"#总结-3\" class=\"headerlink\" title=\"总结\"></a>总结</h2><ol>\n<li>通讯的基本形式： 调用能力，传递参数，监听回调</li>\n<li>对<code>schema</code>协议的理解和使用</li>\n<li>调用<code>schema</code>代码的封装</li>\n<li>内置上线的好处：更快，更安全</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"序\"><a href=\"#序\" class=\"headerlink\" title=\"序\"></a>序</h2><p>此章节主要讲解<code>Hybrid</code>和<code>Javascript</code>之间的秘密</p>\n<h2 id=\"hrbrid是什么-为何用hybrid\"><a href=\"#hrbrid是什么-为何用hybrid\" class=\"headerlink\" title=\"hrbrid是什么?为何用hybrid?\"></a>hrbrid是什么?为何用hybrid?</h2><h4 id=\"1-hybrid文字解释\"><a href=\"#1-hybrid文字解释\" class=\"headerlink\" title=\"1. hybrid文字解释\"></a>1. hybrid文字解释</h4><ul>\n<li><code>hybrid</code>即’混合’,即前端和客户端的混合开发</li>\n<li>需前端开发人员和客户端开发人员配合完成</li>\n<li>某些环节也可能涉及到<code>server</code>端</li>\n<li>ps.不要以为自己是前端就可以不理会客户端的知识</li>\n</ul>\n<h4 id=\"2-存在价值-为何用hybrid\"><a href=\"#2-存在价值-为何用hybrid\" class=\"headerlink\" title=\"2. 存在价值,为何用hybrid\"></a>2. 存在价值,为何用hybrid</h4><ul>\n<li>可以快速迭代更新(无需<code>app</code>审核,无需高权限)</li>\n<li>体验流畅(和<code>native</code>的体验基本类似)</li>\n<li>减少开发和沟通成本,双端公用一套代码</li>\n</ul>\n<h4 id=\"3-webview\"><a href=\"#3-webview\" class=\"headerlink\" title=\"3. webview\"></a>3. webview</h4><ul>\n<li>它是<code>app</code>中的一个组件(<code>app</code>可以有<code>webview</code>,也可以没有)</li>\n<li>用于加载<code>h5</code>页面,即一个小型的浏览器内核</li>\n</ul>\n<h5 id=\"补充：常见的浏览器内核如下：\"><a href=\"#补充：常见的浏览器内核如下：\" class=\"headerlink\" title=\"补充：常见的浏览器内核如下：\"></a>补充：常见的浏览器内核如下：</h5><ol>\n<li><code>Chrome,Safari: webkit</code></li>\n<li><code>Firefox:Gecko</code></li>\n<li><code>IE: Trident</code></li>\n<li><code>360</code>,搜狗等国内浏览器：<code>Trident+webkit</code></li>\n</ol>\n<h4 id=\"4-file协议\"><a href=\"#4-file协议\" class=\"headerlink\" title=\"4. file协议\"></a>4. file协议</h4><p>【其实在一开始我们就接触<code>html</code>开发,就已经使用了<code>file</code>协议,只不过当时没有’协议’,’标准’等这些概念,这里再次强调’协议’,’标准’的重要性！！！】</p>\n<h5 id=\"file协议和http-s-的区别\"><a href=\"#file协议和http-s-的区别\" class=\"headerlink\" title=\"file协议和http(s)的区别:\"></a>file协议和http(s)的区别:</h5><ol>\n<li><code>file</code>协议是本地文件,快(断网也可以,打开本地文件即可);<br>表示： <code>&quot;file://&quot;</code> + 文件绝对路径</li>\n<li><code>http(s)</code>协议是网络加载,慢(断网不可以);<br>表示：<code>&quot;http(s)://&quot;</code></li>\n</ol>\n<h4 id=\"5-hybrid实现流程\"><a href=\"#5-hybrid实现流程\" class=\"headerlink\" title=\"5. hybrid实现流程\"></a>5. hybrid实现流程</h4><ul>\n<li>不是所有场景都适合使用<code>hybrid</code></li>\n<li>使用<code>native</code>:体验要求极致,变化不频繁(如头条的首页)</li>\n<li>使用<code>hybrid</code>:体验要求高,变化频繁(如头条的新闻详情页)</li>\n<li>使用<code>h5</code>:体验无要求,不常用(如举报,反馈等页面)</li>\n</ul>\n<h2 id=\"具体实现如下\"><a href=\"#具体实现如下\" class=\"headerlink\" title=\"具体实现如下:\"></a>具体实现如下:</h2><ol>\n<li>前端做好静态页面<code>(html js css)</code>,将文件交给客户端</li>\n<li>客户端拿到静态页面,以文件形式存储在<code>app</code>中</li>\n<li>客户端在一个<code>webview</code>中(重要！！！)</li>\n<li>使用<code>file</code>协议加载静态页面(重要！！！)<br>用如下图表示如下:</li>\n</ol>\n<p><img src=\"../images/hy.png\" alt></p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结:\"></a>总结:</h2><ol>\n<li><code>hybrid</code>是客户端和前端的混合开发</li>\n<li><code>hybrid</code>存在的核心意义在于快速迭代,无需审核</li>\n<li><code>hybrid</code>实现流程(如上图),以及<code>webview</code>和<code>file</code>协议</li>\n</ol>\n<h2 id=\"介绍一下hybrid更新和上线的流程\"><a href=\"#介绍一下hybrid更新和上线的流程\" class=\"headerlink\" title=\"介绍一下hybrid更新和上线的流程\"></a>介绍一下hybrid更新和上线的流程</h2><p>先看下面两张图<br><img src=\"../images/hyserver.png\" alt=\"avatar\"><br><img src=\"../images/hyclient.png\" alt=\"avatar\"></p>\n<p>要替换每个客户端的静态文件,只能客户端来做(客户端是我们开发的),客户端去<code>server</code>下载最新的静态文件,我们维护<code>server</code>的静态文件</p>\n<h4 id=\"客户端和server先对比版本-如果一致客户端没必要重新下载-不做无谓的下载\"><a href=\"#客户端和server先对比版本-如果一致客户端没必要重新下载-不做无谓的下载\" class=\"headerlink\" title=\"客户端和server先对比版本,如果一致客户端没必要重新下载(不做无谓的下载)\"></a>客户端和server先对比版本,如果一致客户端没必要重新下载(不做无谓的下载)</h4><ul>\n<li>分版本,有版本号,如<code>20200227</code>(时间戳)</li>\n<li>将静态文件压缩成<code>zip</code>包上传到服务器</li>\n<li>客户端每次启动,都去服务端检查版本号</li>\n<li>如果服务端版本号大于客户端版本号,就去下载最新的<code>zip</code>包</li>\n<li>下载完之后解压包,然后将现有文件覆盖</li>\n</ul>\n<h2 id=\"总结-1\"><a href=\"#总结-1\" class=\"headerlink\" title=\"总结:\"></a>总结:</h2><p>要点1.掌握流程图<br>要点2.服务端的版本和<code>zip</code>包维护<br>要点3.更新<code>zip</code>包之前先对比版本号<br>要点4.<code>zip</code>包下载解压和覆盖</p>\n<h2 id=\"hybrid和h5的主要区别\"><a href=\"#hybrid和h5的主要区别\" class=\"headerlink\" title=\"hybrid和h5的主要区别\"></a>hybrid和h5的主要区别</h2><h4 id=\"1-优点\"><a href=\"#1-优点\" class=\"headerlink\" title=\"1.优点:\"></a>1.优点:</h4><ul>\n<li>体验更好,跟<code>native</code>体验基本一致</li>\n<li>可快速迭代,无需审核(关键)</li>\n</ul>\n<h4 id=\"2-缺点\"><a href=\"#2-缺点\" class=\"headerlink\" title=\"2.缺点:\"></a>2.缺点:</h4><ul>\n<li>开发成本高,联调,测试,查<code>bug</code>都比较麻烦</li>\n<li>运维成本高,可参考此前讲过的更新上线的流程</li>\n</ul>\n<h4 id=\"3-适用的场景\"><a href=\"#3-适用的场景\" class=\"headerlink\" title=\"3.适用的场景:\"></a>3.适用的场景:</h4><ul>\n<li><code>hybrid</code>: 产品的稳定功能,体验要求高,频繁迭代</li>\n<li><code>h5</code>: 单次的运营活动(如xx红包)或不常用功能</li>\n</ul>\n<h2 id=\"总结-2\"><a href=\"#总结-2\" class=\"headerlink\" title=\"总结:\"></a>总结:</h2><ul>\n<li>优点: 体验好,可快速迭代</li>\n<li>缺点: 开发成本高,运维成本高</li>\n<li>适用的场景: <code>hybrid</code>适合产品型,<code>h5</code>适合运营型</li>\n</ul>\n<h2 id=\"前端js和客户端如何通讯？\"><a href=\"#前端js和客户端如何通讯？\" class=\"headerlink\" title=\"前端js和客户端如何通讯？\"></a>前端js和客户端如何通讯？</h2><h3 id=\"1-js和客户端通讯的基本技术\"><a href=\"#1-js和客户端通讯的基本技术\" class=\"headerlink\" title=\"1. js和客户端通讯的基本技术\"></a>1. js和客户端通讯的基本技术</h3><h4 id=\"js和客户端通讯的基本形式-见下图\"><a href=\"#js和客户端通讯的基本形式-见下图\" class=\"headerlink\" title=\"js和客户端通讯的基本形式(见下图)\"></a>js和客户端通讯的基本形式(见下图)</h4><p> <img src=\"../images/hycommunite.png\" alt=\"avatar\"></p>\n<ul>\n<li><code>js</code>访问客户端能力,传递参数和回调函数</li>\n<li>客户端通过回调函数返回内容</li>\n</ul>\n<h3 id=\"2-遗留问题-新闻详情页适用hybrid-file协议-前端如何获取到新闻内容？\"><a href=\"#2-遗留问题-新闻详情页适用hybrid-file协议-前端如何获取到新闻内容？\" class=\"headerlink\" title=\"2.遗留问题:新闻详情页适用hybrid(file协议),前端如何获取到新闻内容？\"></a>2.遗留问题:新闻详情页适用hybrid(file协议),前端如何获取到新闻内容？</h3><ol>\n<li>不能用<code>ajax</code>获取(<code>http</code>协议):第一跨域,第二速度慢。</li>\n<li>客户端获取新闻内容后然后通过<code>js</code>通讯拿到内容,再渲染。</li>\n</ol>\n<h4 id=\"schema协议简介和适用\"><a href=\"#schema协议简介和适用\" class=\"headerlink\" title=\"schema协议简介和适用\"></a>schema协议简介和适用</h4><p><code>schema</code>协议：前端和客户端的约定<br>eg：<br>微信<code>schema</code>格式：<code>&quot;weixin://&quot;</code><br><code>QQ schema</code>协议格式：<code>&quot;QQ://&quot;</code></p>\n<h4 id=\"schema使用的封装\"><a href=\"#schema使用的封装\" class=\"headerlink\" title=\"schema使用的封装\"></a>schema使用的封装</h4><h4 id=\"简单版\"><a href=\"#简单版\" class=\"headerlink\" title=\"简单版\"></a>简单版</h4> <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"keyword\">var</span> iframe = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'iframe'</span>)</span><br><span class=\"line\"> iframe.style.display = <span class=\"string\">'none'</span></span><br><span class=\"line\"> <span class=\"comment\">//iframe访问schema（重要！！！）</span></span><br><span class=\"line\"> iframe.src = <span class=\"string\">'weixin://dl/scan?k1=v1&amp;k2=v2&amp;k3=v3&amp;callback=_weixin_scan_callback'</span>    </span><br><span class=\"line\"> </span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"keyword\">var</span> body = <span class=\"built_in\">document</span>.body || <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">'body'</span>)[<span class=\"number\">0</span>]</span><br><span class=\"line\"> body.appendchild(iframe)</span><br><span class=\"line\"> setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">     body.removeChild(iframe)  <span class=\"comment\">//销毁iframe</span></span><br><span class=\"line\">     iframe = <span class=\"literal\">null</span></span><br><span class=\"line\"> &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//如果要加上参数和callback，那么就必须要这么写</span></span><br><span class=\"line\"> <span class=\"built_in\">window</span>[<span class=\"string\">'_weixin_scan_callback'</span>] = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">result</span>)</span>&#123;</span><br><span class=\"line\">     alert(alert)</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"封装版\"><a href=\"#封装版\" class=\"headerlink\" title=\"封装版\"></a>封装版</h4> <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> </span><br><span class=\"line\"> <span class=\"built_in\">window</span>.invoke.share(&#123;<span class=\"attr\">title</span>:<span class=\"string\">'xxx'</span>,<span class=\"attr\">content</span>:<span class=\"string\">'xxx'</span>&#125;,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">result</span>)</span>&#123;</span><br><span class=\"line\">     <span class=\"keyword\">if</span>(result.errno === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">         alert(<span class=\"string\">'分享成功！'</span>)</span><br><span class=\"line\">     &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">         alert(<span class=\"string\">'分享失败！'</span>,result.message)</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"> &#125;)</span><br><span class=\"line\"><span class=\"comment\">//分享</span></span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">invokeShare</span>(<span class=\"params\">data,callback</span>)</span>&#123;</span><br><span class=\"line\">     _invoke(<span class=\"string\">'share'</span>,data,callback)</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> <span class=\"comment\">//登录</span></span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">invokeLogin</span>(<span class=\"params\">data,callback</span>)</span>&#123;</span><br><span class=\"line\">    _invoke(<span class=\"string\">'login'</span>,data,callback)</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> <span class=\"comment\">//扫一扫</span></span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">invokeScan</span>(<span class=\"params\">data,callback</span>)</span>&#123;</span><br><span class=\"line\">     _invoke(<span class=\"string\">'scan'</span>,data,callback)</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"><span class=\"comment\">//暴露给全局</span></span><br><span class=\"line\"> <span class=\"built_in\">window</span>.invoke = &#123;</span><br><span class=\"line\">     share:invokeShare,</span><br><span class=\"line\">     login:invokeLogin,</span><br><span class=\"line\">     scan:invokeScan</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">_invoke</span>(<span class=\"params\">action,data,callback</span>)</span>&#123;</span><br><span class=\"line\">     <span class=\"keyword\">var</span> schema = <span class=\"string\">'myapp://utils'</span></span><br><span class=\"line\">     schema += <span class=\"string\">'/'</span> + action</span><br><span class=\"line\">     schema += <span class=\"string\">'?a=a'</span></span><br><span class=\"line\">     <span class=\"keyword\">var</span> key</span><br><span class=\"line\">     <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> key <span class=\"keyword\">in</span> data)&#123;     <span class=\"comment\">//data=&#123;title:'xxx',content:'xxx'&#125;</span></span><br><span class=\"line\">         <span class=\"keyword\">if</span>(data.hasOwnProperty(key))&#123;</span><br><span class=\"line\">             schema += <span class=\"string\">'&amp;'</span> + key + <span class=\"string\">'='</span> + data[key]</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"comment\">//处理callback</span></span><br><span class=\"line\"> <span class=\"keyword\">var</span> callbackName = <span class=\"string\">''</span></span><br><span class=\"line\"> <span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span> callback === <span class=\"string\">'string'</span>)&#123;</span><br><span class=\"line\">     callbackName = callback</span><br><span class=\"line\"> &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">     callbackName = action + <span class=\"built_in\">Date</span>.now()</span><br><span class=\"line\">     <span class=\"built_in\">window</span>[callbackName] = callback</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> schema += <span class=\"string\">'&amp;callback='</span>+ callbackName</span><br><span class=\"line\"> <span class=\"comment\">//iframe调用schema</span></span><br><span class=\"line\"> 此处省略N行</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"> (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">window,undefined</span>)</span>&#123;</span><br><span class=\"line\">     <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">_invoke</span>(<span class=\"params\">action,data,callback</span>)</span>&#123;</span><br><span class=\"line\">         <span class=\"comment\">//拼接schema的封装</span></span><br><span class=\"line\">         <span class=\"keyword\">var</span> schema = <span class=\"string\">'myapp://utils'</span> + action</span><br><span class=\"line\">         schema += <span class=\"string\">'?a=a'</span> <span class=\"comment\">//拼接参数</span></span><br><span class=\"line\">         <span class=\"built_in\">window</span>.invoke = &#123;</span><br><span class=\"line\">             share:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data,callback</span>)</span>&#123;</span><br><span class=\"line\">                 _invoke(<span class=\"string\">'share'</span>,data,callback)</span><br><span class=\"line\">             &#125;,</span><br><span class=\"line\">             scan:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data,callback</span>)</span>&#123;</span><br><span class=\"line\">                 _invoke(<span class=\"string\">'scan'</span>,data,callback)</span><br><span class=\"line\">             &#125;,</span><br><span class=\"line\">             login:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data,callback</span>)</span>&#123;</span><br><span class=\"line\">                 _invoke(<span class=\"string\">'login'</span>,data,callback)</span><br><span class=\"line\">             &#125;</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"> &#125;)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"内置上线\"><a href=\"#内置上线\" class=\"headerlink\" title=\"内置上线\"></a>内置上线</h4><h2 id=\"总结-3\"><a href=\"#总结-3\" class=\"headerlink\" title=\"总结\"></a>总结</h2><ol>\n<li>通讯的基本形式： 调用能力，传递参数，监听回调</li>\n<li>对<code>schema</code>协议的理解和使用</li>\n<li>调用<code>schema</code>代码的封装</li>\n<li>内置上线的好处：更快，更安全</li>\n</ol>\n"},{"title":"CRN踩坑记","date":"2020-03-10T06:06:52.000Z","_content":"\n\n## 非技术方面\n### 遇到的坑：\n\t1.\t需求问题，由于多数需求与以前保持一致也没有出新的需求文档，就直接扒了h5的逻辑，提测后就哭了:sob:\n\t2.\t对CRN现有功能不熟悉，例：右上角消息盒子，到开发阶段后期才发现 公共不支持此功能\n### 解决办法：\n\t1.\t测试让咋改就咋改了。。。以后做之前一定要明确需求，不能自己YY，即使是扒逻辑也要和相关人员进行确认\n\t2.\t和框架沟通支持相关功能。做之前熟悉下相关API，对不确定是否能做到的东西要尽早提出。\n\n## 技术方面\n\n### 一. 功能\n熟悉RN及CRN的API后基本没什么大问题\n\n### 二. 性能\n\n#### 页面切换\n```javascript\nconstructor(props) {\n    super(props)\n    this.state = {\n        showInit: true\n    }\n}\ncomponentDidMount() {\n    InteractionManager.runAfterInteractions(() => {\n        this.setState({\n            showInit: false\n        })\n    })\n}\nrender() {\n    {this.state.showInit ?\n    <View><LoadingView style={{ flex: 1 }} /></View>:\n    <ViewPort>\n        <HeaderView page={this} title={'选择日期'} />\n        <View>巴拉巴拉</View>\n    </ViewPort>\n    }\n}\ncomponentDidMount() {\n    const { dir = 'flight', type,index,curCity = {} } = this.props\n    InteractionManager.runAfterInteractions(()=>{\n        this.props.events.reqCityList({\n            dir,\n            type,\n            index,\n            curCity\n        })\n    })\n}\n```\n耗时较长的工作安排到所有互动或动画完成之后再进行 `RN InteractionManager`\ntip:注意`dispatch`用的点，`dispatch`会改变组件的`state`\n\n#### 列表渲染\n\n#####  1. `ScrollView`\n```bash\n子元素一次性渲染 \nscrollTo({ x: 0, animated: true })  animated为true时对x方向定义点问题  \ntip：安卓上scrollTo方法需要添加setTimeout才生效。。。\n```\n\n##### 2. `ListView`\n可惰性渲染，超出页面的不会回收，数据量大的时候，内存损耗大  \neg：城市选择页，有右边索引条，快速滑动。\n坑：数据量大，直接滚动到最下面的时候，`ios`为白屏，安卓只能滚到当前渲染到的地方。\n```bash\n解决方法：\n1. onContentSizeChange\n监控当前渲染的位置，没有到要滚到点的位置，自动触发scrollTo再次滚\n2. scrollRenderAheadDistance\n当一个行接近屏幕范围多少像素之内的时候，就开始渲染这一行。\n```\n```javascript\n<ListView\n    ref={listView => this._listView = listView}\n    dataSource={this.state.dataSource}\n    onContentSizeChange={this.onContentSizeChange.bind(this)}\n    renderRow={this.renderRow.bind(this)}\n    renderSectionHeader={this.renderSectionHeader}\n    initialListSize={20}//组件刚挂载的时候渲染多少行数据\n    scrollRenderAheadDistance={this.state.height}\n    pageSize={100} //每次事件循环（每帧）渲染的行数\n    />\n```\n\n\n##### 3. `CRNListView`\n基于`ListView`\n有一些自定义的功能，下拉刷新、加载更多、侧边栏等\n但是侧边栏支持ios不支持安卓。。。:triumph:\n`SectionList FlatList`\n官方为解决`listview`性能问题重新推出的`list`\n有回收机制（不再屏幕内的内容会被回收）\n```javascript\n<FlatList\n    initialNumToRender={6}//如方法名，这部分不会在滚动过程中被卸载\n    maxToRenderPerBatch={6}\n    getItemLayout={this.getItemLayout}//可选的优化 对于我们的场景（有scrollTo）必需\n    horizontal={this.props.horizontal}\n    keyExtractor={(item)=>item.showMonth}\n    ref={flatList => this._flatList = flatList}\n    data={this.state.monthInfo}\n    renderItem={this.getMonthView.bind(this)}/>\n```\n属性 `initialScrollIndex ` \n    小坑：设置了这个属性`（getItemLayout(data, index)`这个`index`会返回-1）\n方法 `scrollToIndex scrollToOffset`\n\n#### 代码写法\n- 减少`View`层的嵌套，`cpu`优化\n- 避免不必要的循环，尤其是在页面渲染的时候（反面例子 日历页计算今天明天后天的时候）\n- 健壮性 慎用`a.b.c.d`写法；`async await` 这种写法不同与`promise`的`then catch`，需要用`try catch`捕获异常；\n- 可读性\n- 可维护性\n\n#### 其它\n- `console` 会影响性能\n- `debugger`页面要单拉出来\n\n### 三. 样式\n- 遵循标准UI稿或者`CSS`稿\n- 尽量少使用特殊判断或者计算，能用`flex`解决的要用`flex`解决\n- 有意识的考虑到不同屏幕手机\n- 慎用 `Sprite Image`，会增大不必要的内存消耗。\n\n### 四. 兼容性\n- 样式的兼容\n- 注意`API`上 `android ios`的不同点\n\n### 五. 其他\n- 调试 `debugger console.log`\n- 性能调试 `console.time`\n\n## git提交事项\n- 提测后 慎提交`mock`数据\n- 尽量用`rebase`\n- 切记不要影响别人的项目代码\n\n## 最后\n会深入学习会在性能及用户体验上多下功夫，发挥`RN`的优势\n\n\n\n\n> 对自己的代码负责。\n> 没有解决不了的bug。如果有，一定是没有找到方法。\n> 没有填不平的坑。如果有，一定要尽力填平。","source":"_posts/reactNative.md","raw":"---\ntitle: CRN踩坑记\ndate: 2020-03-10 14:06:52\ncategories: React Native\ntags: \n    - React Native\n---\n\n\n## 非技术方面\n### 遇到的坑：\n\t1.\t需求问题，由于多数需求与以前保持一致也没有出新的需求文档，就直接扒了h5的逻辑，提测后就哭了:sob:\n\t2.\t对CRN现有功能不熟悉，例：右上角消息盒子，到开发阶段后期才发现 公共不支持此功能\n### 解决办法：\n\t1.\t测试让咋改就咋改了。。。以后做之前一定要明确需求，不能自己YY，即使是扒逻辑也要和相关人员进行确认\n\t2.\t和框架沟通支持相关功能。做之前熟悉下相关API，对不确定是否能做到的东西要尽早提出。\n\n## 技术方面\n\n### 一. 功能\n熟悉RN及CRN的API后基本没什么大问题\n\n### 二. 性能\n\n#### 页面切换\n```javascript\nconstructor(props) {\n    super(props)\n    this.state = {\n        showInit: true\n    }\n}\ncomponentDidMount() {\n    InteractionManager.runAfterInteractions(() => {\n        this.setState({\n            showInit: false\n        })\n    })\n}\nrender() {\n    {this.state.showInit ?\n    <View><LoadingView style={{ flex: 1 }} /></View>:\n    <ViewPort>\n        <HeaderView page={this} title={'选择日期'} />\n        <View>巴拉巴拉</View>\n    </ViewPort>\n    }\n}\ncomponentDidMount() {\n    const { dir = 'flight', type,index,curCity = {} } = this.props\n    InteractionManager.runAfterInteractions(()=>{\n        this.props.events.reqCityList({\n            dir,\n            type,\n            index,\n            curCity\n        })\n    })\n}\n```\n耗时较长的工作安排到所有互动或动画完成之后再进行 `RN InteractionManager`\ntip:注意`dispatch`用的点，`dispatch`会改变组件的`state`\n\n#### 列表渲染\n\n#####  1. `ScrollView`\n```bash\n子元素一次性渲染 \nscrollTo({ x: 0, animated: true })  animated为true时对x方向定义点问题  \ntip：安卓上scrollTo方法需要添加setTimeout才生效。。。\n```\n\n##### 2. `ListView`\n可惰性渲染，超出页面的不会回收，数据量大的时候，内存损耗大  \neg：城市选择页，有右边索引条，快速滑动。\n坑：数据量大，直接滚动到最下面的时候，`ios`为白屏，安卓只能滚到当前渲染到的地方。\n```bash\n解决方法：\n1. onContentSizeChange\n监控当前渲染的位置，没有到要滚到点的位置，自动触发scrollTo再次滚\n2. scrollRenderAheadDistance\n当一个行接近屏幕范围多少像素之内的时候，就开始渲染这一行。\n```\n```javascript\n<ListView\n    ref={listView => this._listView = listView}\n    dataSource={this.state.dataSource}\n    onContentSizeChange={this.onContentSizeChange.bind(this)}\n    renderRow={this.renderRow.bind(this)}\n    renderSectionHeader={this.renderSectionHeader}\n    initialListSize={20}//组件刚挂载的时候渲染多少行数据\n    scrollRenderAheadDistance={this.state.height}\n    pageSize={100} //每次事件循环（每帧）渲染的行数\n    />\n```\n\n\n##### 3. `CRNListView`\n基于`ListView`\n有一些自定义的功能，下拉刷新、加载更多、侧边栏等\n但是侧边栏支持ios不支持安卓。。。:triumph:\n`SectionList FlatList`\n官方为解决`listview`性能问题重新推出的`list`\n有回收机制（不再屏幕内的内容会被回收）\n```javascript\n<FlatList\n    initialNumToRender={6}//如方法名，这部分不会在滚动过程中被卸载\n    maxToRenderPerBatch={6}\n    getItemLayout={this.getItemLayout}//可选的优化 对于我们的场景（有scrollTo）必需\n    horizontal={this.props.horizontal}\n    keyExtractor={(item)=>item.showMonth}\n    ref={flatList => this._flatList = flatList}\n    data={this.state.monthInfo}\n    renderItem={this.getMonthView.bind(this)}/>\n```\n属性 `initialScrollIndex ` \n    小坑：设置了这个属性`（getItemLayout(data, index)`这个`index`会返回-1）\n方法 `scrollToIndex scrollToOffset`\n\n#### 代码写法\n- 减少`View`层的嵌套，`cpu`优化\n- 避免不必要的循环，尤其是在页面渲染的时候（反面例子 日历页计算今天明天后天的时候）\n- 健壮性 慎用`a.b.c.d`写法；`async await` 这种写法不同与`promise`的`then catch`，需要用`try catch`捕获异常；\n- 可读性\n- 可维护性\n\n#### 其它\n- `console` 会影响性能\n- `debugger`页面要单拉出来\n\n### 三. 样式\n- 遵循标准UI稿或者`CSS`稿\n- 尽量少使用特殊判断或者计算，能用`flex`解决的要用`flex`解决\n- 有意识的考虑到不同屏幕手机\n- 慎用 `Sprite Image`，会增大不必要的内存消耗。\n\n### 四. 兼容性\n- 样式的兼容\n- 注意`API`上 `android ios`的不同点\n\n### 五. 其他\n- 调试 `debugger console.log`\n- 性能调试 `console.time`\n\n## git提交事项\n- 提测后 慎提交`mock`数据\n- 尽量用`rebase`\n- 切记不要影响别人的项目代码\n\n## 最后\n会深入学习会在性能及用户体验上多下功夫，发挥`RN`的优势\n\n\n\n\n> 对自己的代码负责。\n> 没有解决不了的bug。如果有，一定是没有找到方法。\n> 没有填不平的坑。如果有，一定要尽力填平。","slug":"reactNative","published":1,"updated":"2020-03-15T09:51:03.800Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7t6o2wr000ypsucqiil1j24","content":"<h2 id=\"非技术方面\"><a href=\"#非技术方面\" class=\"headerlink\" title=\"非技术方面\"></a>非技术方面</h2><h3 id=\"遇到的坑：\"><a href=\"#遇到的坑：\" class=\"headerlink\" title=\"遇到的坑：\"></a>遇到的坑：</h3><pre><code>1.    需求问题，由于多数需求与以前保持一致也没有出新的需求文档，就直接扒了h5的逻辑，提测后就哭了:sob:\n2.    对CRN现有功能不熟悉，例：右上角消息盒子，到开发阶段后期才发现 公共不支持此功能</code></pre><h3 id=\"解决办法：\"><a href=\"#解决办法：\" class=\"headerlink\" title=\"解决办法：\"></a>解决办法：</h3><pre><code>1.    测试让咋改就咋改了。。。以后做之前一定要明确需求，不能自己YY，即使是扒逻辑也要和相关人员进行确认\n2.    和框架沟通支持相关功能。做之前熟悉下相关API，对不确定是否能做到的东西要尽早提出。</code></pre><h2 id=\"技术方面\"><a href=\"#技术方面\" class=\"headerlink\" title=\"技术方面\"></a>技术方面</h2><h3 id=\"一-功能\"><a href=\"#一-功能\" class=\"headerlink\" title=\"一. 功能\"></a>一. 功能</h3><p>熟悉RN及CRN的API后基本没什么大问题</p>\n<h3 id=\"二-性能\"><a href=\"#二-性能\" class=\"headerlink\" title=\"二. 性能\"></a>二. 性能</h3><h4 id=\"页面切换\"><a href=\"#页面切换\" class=\"headerlink\" title=\"页面切换\"></a>页面切换</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">constructor</span>(props) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>(props)</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.state = &#123;</span><br><span class=\"line\">        showInit: <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">componentDidMount() &#123;</span><br><span class=\"line\">    InteractionManager.runAfterInteractions(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.setState(&#123;</span><br><span class=\"line\">            showInit: <span class=\"literal\">false</span></span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">render() &#123;</span><br><span class=\"line\">    &#123;<span class=\"keyword\">this</span>.state.showInit ?</span><br><span class=\"line\">    &lt;View&gt;&lt;LoadingView style=&#123;&#123; flex: 1 &#125;&#125; /&gt;&lt;/View&gt;:</span><br><span class=\"line\">    &lt;ViewPort&gt;</span><br><span class=\"line\">        &lt;HeaderView page=&#123;<span class=\"keyword\">this</span>&#125; title=&#123;<span class=\"string\">'选择日期'</span>&#125; /&gt;</span><br><span class=\"line\">        &lt;View&gt;巴拉巴拉&lt;<span class=\"regexp\">/View&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;/</span>ViewPort&gt;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">componentDidMount() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; dir = <span class=\"string\">'flight'</span>, type,index,curCity = &#123;&#125; &#125; = <span class=\"keyword\">this</span>.props</span><br><span class=\"line\">    InteractionManager.runAfterInteractions(<span class=\"function\"><span class=\"params\">()</span>=&gt;</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.props.events.reqCityList(&#123;</span><br><span class=\"line\">            dir,</span><br><span class=\"line\">            type,</span><br><span class=\"line\">            index,</span><br><span class=\"line\">            curCity</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>耗时较长的工作安排到所有互动或动画完成之后再进行 <code>RN InteractionManager</code><br>tip:注意<code>dispatch</code>用的点，<code>dispatch</code>会改变组件的<code>state</code></p>\n<h4 id=\"列表渲染\"><a href=\"#列表渲染\" class=\"headerlink\" title=\"列表渲染\"></a>列表渲染</h4><h5 id=\"1-ScrollView\"><a href=\"#1-ScrollView\" class=\"headerlink\" title=\"1. ScrollView\"></a>1. <code>ScrollView</code></h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">子元素一次性渲染 </span><br><span class=\"line\">scrollTo(&#123; x: 0, animated: <span class=\"literal\">true</span> &#125;)  animated为<span class=\"literal\">true</span>时对x方向定义点问题  </span><br><span class=\"line\">tip：安卓上scrollTo方法需要添加setTimeout才生效。。。</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"2-ListView\"><a href=\"#2-ListView\" class=\"headerlink\" title=\"2. ListView\"></a>2. <code>ListView</code></h5><p>可惰性渲染，超出页面的不会回收，数据量大的时候，内存损耗大<br>eg：城市选择页，有右边索引条，快速滑动。<br>坑：数据量大，直接滚动到最下面的时候，<code>ios</code>为白屏，安卓只能滚到当前渲染到的地方。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">解决方法：</span><br><span class=\"line\">1. onContentSizeChange</span><br><span class=\"line\">监控当前渲染的位置，没有到要滚到点的位置，自动触发scrollTo再次滚</span><br><span class=\"line\">2. scrollRenderAheadDistance</span><br><span class=\"line\">当一个行接近屏幕范围多少像素之内的时候，就开始渲染这一行。</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;ListView</span><br><span class=\"line\">    ref=&#123;listView =&gt; <span class=\"keyword\">this</span>._listView = listView&#125;</span><br><span class=\"line\">    dataSource=&#123;<span class=\"keyword\">this</span>.state.dataSource&#125;</span><br><span class=\"line\">    onContentSizeChange=&#123;<span class=\"keyword\">this</span>.onContentSizeChange.bind(<span class=\"keyword\">this</span>)&#125;</span><br><span class=\"line\">    renderRow=&#123;<span class=\"keyword\">this</span>.renderRow.bind(<span class=\"keyword\">this</span>)&#125;</span><br><span class=\"line\">    renderSectionHeader=&#123;<span class=\"keyword\">this</span>.renderSectionHeader&#125;</span><br><span class=\"line\">    initialListSize=&#123;<span class=\"number\">20</span>&#125;<span class=\"comment\">//组件刚挂载的时候渲染多少行数据</span></span><br><span class=\"line\">    scrollRenderAheadDistance=&#123;<span class=\"keyword\">this</span>.state.height&#125;</span><br><span class=\"line\">    pageSize=&#123;<span class=\"number\">100</span>&#125; <span class=\"comment\">//每次事件循环（每帧）渲染的行数</span></span><br><span class=\"line\">    /&gt;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"3-CRNListView\"><a href=\"#3-CRNListView\" class=\"headerlink\" title=\"3. CRNListView\"></a>3. <code>CRNListView</code></h5><p>基于<code>ListView</code><br>有一些自定义的功能，下拉刷新、加载更多、侧边栏等<br>但是侧边栏支持ios不支持安卓。。。:triumph:<br><code>SectionList FlatList</code><br>官方为解决<code>listview</code>性能问题重新推出的<code>list</code><br>有回收机制（不再屏幕内的内容会被回收）</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;FlatList</span><br><span class=\"line\">    initialNumToRender=&#123;<span class=\"number\">6</span>&#125;<span class=\"comment\">//如方法名，这部分不会在滚动过程中被卸载</span></span><br><span class=\"line\">    maxToRenderPerBatch=&#123;<span class=\"number\">6</span>&#125;</span><br><span class=\"line\">    getItemLayout=&#123;<span class=\"keyword\">this</span>.getItemLayout&#125;<span class=\"comment\">//可选的优化 对于我们的场景（有scrollTo）必需</span></span><br><span class=\"line\">    horizontal=&#123;<span class=\"keyword\">this</span>.props.horizontal&#125;</span><br><span class=\"line\">    keyExtractor=&#123;(item)=&gt;item.showMonth&#125;</span><br><span class=\"line\">    ref=&#123;flatList =&gt; <span class=\"keyword\">this</span>._flatList = flatList&#125;</span><br><span class=\"line\">    data=&#123;<span class=\"keyword\">this</span>.state.monthInfo&#125;</span><br><span class=\"line\">    renderItem=&#123;<span class=\"keyword\">this</span>.getMonthView.bind(<span class=\"keyword\">this</span>)&#125;/&gt;</span><br></pre></td></tr></table></figure>\n\n<p>属性 <code>initialScrollIndex</code><br>    小坑：设置了这个属性<code>（getItemLayout(data, index)</code>这个<code>index</code>会返回-1）<br>方法 <code>scrollToIndex scrollToOffset</code></p>\n<h4 id=\"代码写法\"><a href=\"#代码写法\" class=\"headerlink\" title=\"代码写法\"></a>代码写法</h4><ul>\n<li>减少<code>View</code>层的嵌套，<code>cpu</code>优化</li>\n<li>避免不必要的循环，尤其是在页面渲染的时候（反面例子 日历页计算今天明天后天的时候）</li>\n<li>健壮性 慎用<code>a.b.c.d</code>写法；<code>async await</code> 这种写法不同与<code>promise</code>的<code>then catch</code>，需要用<code>try catch</code>捕获异常；</li>\n<li>可读性</li>\n<li>可维护性</li>\n</ul>\n<h4 id=\"其它\"><a href=\"#其它\" class=\"headerlink\" title=\"其它\"></a>其它</h4><ul>\n<li><code>console</code> 会影响性能</li>\n<li><code>debugger</code>页面要单拉出来</li>\n</ul>\n<h3 id=\"三-样式\"><a href=\"#三-样式\" class=\"headerlink\" title=\"三. 样式\"></a>三. 样式</h3><ul>\n<li>遵循标准UI稿或者<code>CSS</code>稿</li>\n<li>尽量少使用特殊判断或者计算，能用<code>flex</code>解决的要用<code>flex</code>解决</li>\n<li>有意识的考虑到不同屏幕手机</li>\n<li>慎用 <code>Sprite Image</code>，会增大不必要的内存消耗。</li>\n</ul>\n<h3 id=\"四-兼容性\"><a href=\"#四-兼容性\" class=\"headerlink\" title=\"四. 兼容性\"></a>四. 兼容性</h3><ul>\n<li>样式的兼容</li>\n<li>注意<code>API</code>上 <code>android ios</code>的不同点</li>\n</ul>\n<h3 id=\"五-其他\"><a href=\"#五-其他\" class=\"headerlink\" title=\"五. 其他\"></a>五. 其他</h3><ul>\n<li>调试 <code>debugger console.log</code></li>\n<li>性能调试 <code>console.time</code></li>\n</ul>\n<h2 id=\"git提交事项\"><a href=\"#git提交事项\" class=\"headerlink\" title=\"git提交事项\"></a>git提交事项</h2><ul>\n<li>提测后 慎提交<code>mock</code>数据</li>\n<li>尽量用<code>rebase</code></li>\n<li>切记不要影响别人的项目代码</li>\n</ul>\n<h2 id=\"最后\"><a href=\"#最后\" class=\"headerlink\" title=\"最后\"></a>最后</h2><p>会深入学习会在性能及用户体验上多下功夫，发挥<code>RN</code>的优势</p>\n<blockquote>\n<p>对自己的代码负责。<br>没有解决不了的bug。如果有，一定是没有找到方法。<br>没有填不平的坑。如果有，一定要尽力填平。</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"非技术方面\"><a href=\"#非技术方面\" class=\"headerlink\" title=\"非技术方面\"></a>非技术方面</h2><h3 id=\"遇到的坑：\"><a href=\"#遇到的坑：\" class=\"headerlink\" title=\"遇到的坑：\"></a>遇到的坑：</h3><pre><code>1.    需求问题，由于多数需求与以前保持一致也没有出新的需求文档，就直接扒了h5的逻辑，提测后就哭了:sob:\n2.    对CRN现有功能不熟悉，例：右上角消息盒子，到开发阶段后期才发现 公共不支持此功能</code></pre><h3 id=\"解决办法：\"><a href=\"#解决办法：\" class=\"headerlink\" title=\"解决办法：\"></a>解决办法：</h3><pre><code>1.    测试让咋改就咋改了。。。以后做之前一定要明确需求，不能自己YY，即使是扒逻辑也要和相关人员进行确认\n2.    和框架沟通支持相关功能。做之前熟悉下相关API，对不确定是否能做到的东西要尽早提出。</code></pre><h2 id=\"技术方面\"><a href=\"#技术方面\" class=\"headerlink\" title=\"技术方面\"></a>技术方面</h2><h3 id=\"一-功能\"><a href=\"#一-功能\" class=\"headerlink\" title=\"一. 功能\"></a>一. 功能</h3><p>熟悉RN及CRN的API后基本没什么大问题</p>\n<h3 id=\"二-性能\"><a href=\"#二-性能\" class=\"headerlink\" title=\"二. 性能\"></a>二. 性能</h3><h4 id=\"页面切换\"><a href=\"#页面切换\" class=\"headerlink\" title=\"页面切换\"></a>页面切换</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">constructor</span>(props) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>(props)</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.state = &#123;</span><br><span class=\"line\">        showInit: <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">componentDidMount() &#123;</span><br><span class=\"line\">    InteractionManager.runAfterInteractions(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.setState(&#123;</span><br><span class=\"line\">            showInit: <span class=\"literal\">false</span></span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">render() &#123;</span><br><span class=\"line\">    &#123;<span class=\"keyword\">this</span>.state.showInit ?</span><br><span class=\"line\">    &lt;View&gt;&lt;LoadingView style=&#123;&#123; flex: 1 &#125;&#125; /&gt;&lt;/View&gt;:</span><br><span class=\"line\">    &lt;ViewPort&gt;</span><br><span class=\"line\">        &lt;HeaderView page=&#123;<span class=\"keyword\">this</span>&#125; title=&#123;<span class=\"string\">'选择日期'</span>&#125; /&gt;</span><br><span class=\"line\">        &lt;View&gt;巴拉巴拉&lt;<span class=\"regexp\">/View&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;/</span>ViewPort&gt;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">componentDidMount() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; dir = <span class=\"string\">'flight'</span>, type,index,curCity = &#123;&#125; &#125; = <span class=\"keyword\">this</span>.props</span><br><span class=\"line\">    InteractionManager.runAfterInteractions(<span class=\"function\"><span class=\"params\">()</span>=&gt;</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.props.events.reqCityList(&#123;</span><br><span class=\"line\">            dir,</span><br><span class=\"line\">            type,</span><br><span class=\"line\">            index,</span><br><span class=\"line\">            curCity</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>耗时较长的工作安排到所有互动或动画完成之后再进行 <code>RN InteractionManager</code><br>tip:注意<code>dispatch</code>用的点，<code>dispatch</code>会改变组件的<code>state</code></p>\n<h4 id=\"列表渲染\"><a href=\"#列表渲染\" class=\"headerlink\" title=\"列表渲染\"></a>列表渲染</h4><h5 id=\"1-ScrollView\"><a href=\"#1-ScrollView\" class=\"headerlink\" title=\"1. ScrollView\"></a>1. <code>ScrollView</code></h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">子元素一次性渲染 </span><br><span class=\"line\">scrollTo(&#123; x: 0, animated: <span class=\"literal\">true</span> &#125;)  animated为<span class=\"literal\">true</span>时对x方向定义点问题  </span><br><span class=\"line\">tip：安卓上scrollTo方法需要添加setTimeout才生效。。。</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"2-ListView\"><a href=\"#2-ListView\" class=\"headerlink\" title=\"2. ListView\"></a>2. <code>ListView</code></h5><p>可惰性渲染，超出页面的不会回收，数据量大的时候，内存损耗大<br>eg：城市选择页，有右边索引条，快速滑动。<br>坑：数据量大，直接滚动到最下面的时候，<code>ios</code>为白屏，安卓只能滚到当前渲染到的地方。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">解决方法：</span><br><span class=\"line\">1. onContentSizeChange</span><br><span class=\"line\">监控当前渲染的位置，没有到要滚到点的位置，自动触发scrollTo再次滚</span><br><span class=\"line\">2. scrollRenderAheadDistance</span><br><span class=\"line\">当一个行接近屏幕范围多少像素之内的时候，就开始渲染这一行。</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;ListView</span><br><span class=\"line\">    ref=&#123;listView =&gt; <span class=\"keyword\">this</span>._listView = listView&#125;</span><br><span class=\"line\">    dataSource=&#123;<span class=\"keyword\">this</span>.state.dataSource&#125;</span><br><span class=\"line\">    onContentSizeChange=&#123;<span class=\"keyword\">this</span>.onContentSizeChange.bind(<span class=\"keyword\">this</span>)&#125;</span><br><span class=\"line\">    renderRow=&#123;<span class=\"keyword\">this</span>.renderRow.bind(<span class=\"keyword\">this</span>)&#125;</span><br><span class=\"line\">    renderSectionHeader=&#123;<span class=\"keyword\">this</span>.renderSectionHeader&#125;</span><br><span class=\"line\">    initialListSize=&#123;<span class=\"number\">20</span>&#125;<span class=\"comment\">//组件刚挂载的时候渲染多少行数据</span></span><br><span class=\"line\">    scrollRenderAheadDistance=&#123;<span class=\"keyword\">this</span>.state.height&#125;</span><br><span class=\"line\">    pageSize=&#123;<span class=\"number\">100</span>&#125; <span class=\"comment\">//每次事件循环（每帧）渲染的行数</span></span><br><span class=\"line\">    /&gt;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"3-CRNListView\"><a href=\"#3-CRNListView\" class=\"headerlink\" title=\"3. CRNListView\"></a>3. <code>CRNListView</code></h5><p>基于<code>ListView</code><br>有一些自定义的功能，下拉刷新、加载更多、侧边栏等<br>但是侧边栏支持ios不支持安卓。。。:triumph:<br><code>SectionList FlatList</code><br>官方为解决<code>listview</code>性能问题重新推出的<code>list</code><br>有回收机制（不再屏幕内的内容会被回收）</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;FlatList</span><br><span class=\"line\">    initialNumToRender=&#123;<span class=\"number\">6</span>&#125;<span class=\"comment\">//如方法名，这部分不会在滚动过程中被卸载</span></span><br><span class=\"line\">    maxToRenderPerBatch=&#123;<span class=\"number\">6</span>&#125;</span><br><span class=\"line\">    getItemLayout=&#123;<span class=\"keyword\">this</span>.getItemLayout&#125;<span class=\"comment\">//可选的优化 对于我们的场景（有scrollTo）必需</span></span><br><span class=\"line\">    horizontal=&#123;<span class=\"keyword\">this</span>.props.horizontal&#125;</span><br><span class=\"line\">    keyExtractor=&#123;(item)=&gt;item.showMonth&#125;</span><br><span class=\"line\">    ref=&#123;flatList =&gt; <span class=\"keyword\">this</span>._flatList = flatList&#125;</span><br><span class=\"line\">    data=&#123;<span class=\"keyword\">this</span>.state.monthInfo&#125;</span><br><span class=\"line\">    renderItem=&#123;<span class=\"keyword\">this</span>.getMonthView.bind(<span class=\"keyword\">this</span>)&#125;/&gt;</span><br></pre></td></tr></table></figure>\n\n<p>属性 <code>initialScrollIndex</code><br>    小坑：设置了这个属性<code>（getItemLayout(data, index)</code>这个<code>index</code>会返回-1）<br>方法 <code>scrollToIndex scrollToOffset</code></p>\n<h4 id=\"代码写法\"><a href=\"#代码写法\" class=\"headerlink\" title=\"代码写法\"></a>代码写法</h4><ul>\n<li>减少<code>View</code>层的嵌套，<code>cpu</code>优化</li>\n<li>避免不必要的循环，尤其是在页面渲染的时候（反面例子 日历页计算今天明天后天的时候）</li>\n<li>健壮性 慎用<code>a.b.c.d</code>写法；<code>async await</code> 这种写法不同与<code>promise</code>的<code>then catch</code>，需要用<code>try catch</code>捕获异常；</li>\n<li>可读性</li>\n<li>可维护性</li>\n</ul>\n<h4 id=\"其它\"><a href=\"#其它\" class=\"headerlink\" title=\"其它\"></a>其它</h4><ul>\n<li><code>console</code> 会影响性能</li>\n<li><code>debugger</code>页面要单拉出来</li>\n</ul>\n<h3 id=\"三-样式\"><a href=\"#三-样式\" class=\"headerlink\" title=\"三. 样式\"></a>三. 样式</h3><ul>\n<li>遵循标准UI稿或者<code>CSS</code>稿</li>\n<li>尽量少使用特殊判断或者计算，能用<code>flex</code>解决的要用<code>flex</code>解决</li>\n<li>有意识的考虑到不同屏幕手机</li>\n<li>慎用 <code>Sprite Image</code>，会增大不必要的内存消耗。</li>\n</ul>\n<h3 id=\"四-兼容性\"><a href=\"#四-兼容性\" class=\"headerlink\" title=\"四. 兼容性\"></a>四. 兼容性</h3><ul>\n<li>样式的兼容</li>\n<li>注意<code>API</code>上 <code>android ios</code>的不同点</li>\n</ul>\n<h3 id=\"五-其他\"><a href=\"#五-其他\" class=\"headerlink\" title=\"五. 其他\"></a>五. 其他</h3><ul>\n<li>调试 <code>debugger console.log</code></li>\n<li>性能调试 <code>console.time</code></li>\n</ul>\n<h2 id=\"git提交事项\"><a href=\"#git提交事项\" class=\"headerlink\" title=\"git提交事项\"></a>git提交事项</h2><ul>\n<li>提测后 慎提交<code>mock</code>数据</li>\n<li>尽量用<code>rebase</code></li>\n<li>切记不要影响别人的项目代码</li>\n</ul>\n<h2 id=\"最后\"><a href=\"#最后\" class=\"headerlink\" title=\"最后\"></a>最后</h2><p>会深入学习会在性能及用户体验上多下功夫，发挥<code>RN</code>的优势</p>\n<blockquote>\n<p>对自己的代码负责。<br>没有解决不了的bug。如果有，一定是没有找到方法。<br>没有填不平的坑。如果有，一定要尽力填平。</p>\n</blockquote>\n"},{"title":"CRN布局样式中的一些小分享","date":"2020-03-10T06:54:07.000Z","_content":"\n\n\n1.\t关于`<textInput>`输入框： `TextInput`在安卓上默认有一个底边黑线框，同时会有一些`padding`。如果要想使其看起来和`iOS`上尽量一致，则需要设置`padding: 0`，同时设置`underlineColorAndroid=\"transparent\"`来去掉底边框。加上`padding: 0 `保证不同机型上下垂直居中。\n2.\t关于省略号： crn中是通过`ellipsizeMode='tail' numberOfLines={1}`两个属性同时控制省略号…（注：这两个属性需要写在`<Text>`上，不能写在`style`里。）\n3.\t`borderRadius`不能和实现三角形样式一起使用，否则不生效；单独写`borderBottomLeftRadius`和`borderBottomRightRadius、borderTopLeftRadius、borderTopRightRadius`也不会生效。\n4.\t实现文本垂直居中的时候尽量不要使用行高，因为行高会在不同平台和机型上面表现的形式不一样，为了保险起见，根据主轴方向使用`justifyContent: ‘center’`就可以啦!\n5.\t一般设计稿的尺寸是`iphone6`的尺寸`750px`的，我们需要做个适配：\n```javascript\nconst { width, height } = Dimensions.get('window');\nlet WIDTH = width, HEIGHT = height;\nconst rem = (a) => { return a * (WIDTH / 750); };\n```\n6.\t关于`<Text>`： `Text`元素会继承`View`层的`background`: 可以给`Text`设置`backgroundColor:'transparent'`解决\n7.\t`crn`中的`width`和`height`是包含`padding`和`border`的。\n8.\t关于`Image`：可以做背景图展示，它有几个属性方法：\n`Source：{uri:string}` 进行标记图片的引用，该参数可以为一个网络url地址或者一个本地的路径\nresizeMode：缩放比例，可选参数`('cover', 'contain', 'stretch')` 该当图片的尺寸超过布局的尺寸的时候，会根据设置`Mode`进行缩放或者裁剪图片，eg：`resizeMode: Image.resizeMode.cover`\n  \n9.\t关于雪碧图`<SpriteImage>`： 雪碧图需要去根据crop裁剪图片，所以会导致在不同机型或者平台中有拉伸缩小情况。以后建议尽量不适用雪碧图。如果需要使用雪碧图也有解决方案: 通过判断机型的dpr来加载图片，安卓的dpr比较散，有1、1.5、2、3、4的，ios的dpr有2、3的。所以需要@3图和@2倍图来做下兼容：\n```javascript\n<SpriteImage style={styles.spritePic}\nsource={{ uri: PixelRatio.get() === 3 ? 'https://pic.c-ctrip.com/VacationH5Pic/taocan/sdp/n_banner/un_banner@3.png' : 'https://pic.c-ctrip.com/VacationH5Pic/taocan/sdp/n_banner/un_banner.png', imageSize: { width: 169, height: 167 }, crop }}\n>\n</SpriteImage>\n```\n\n10.\t对于小屏手机例如`320`的，可以通过`width === 320` 来进行小屏手机的一些兼容\n11.\t针对`1px`的`border`线: `border: 1 / PixelRatio.get()`\n12.\t关于`<TouchableOpacity>`：添加点击事件的标签，展示效果会有透明度的变化可以使用`activeOpacity={1}`去除透明度的变化，`<View>`外层套此标签的时候style样式尽量写在`<View>`里，之前做的时候发现写在\n`<TouchableOpacity>`这个里面出现问题。\n\n13. `crn`中的分辨率适配： `react native`中使用的尺寸单位是`pt`,是一个绝对长度，设计稿使用的是`px`，这两种尺寸换算可以通过`PixelRatio`转换。\n```javascript\nimport {PixelRatio} from 'react-native';\nconst pt2px = pt=>PixelRatio.getPixelSizeForLayoutSize(pt);\nconst px2pt = px=>PixelRatio.roundToNearestPixel(px);\n```\n\n14. 梯形+圆角\n```javascript\nimport React, { Component } from 'react';\nimport { Text, View, StyleSheet } from 'react-native';\n\nexport default class App extends Component {\n  render() {\n    return (\n      <View style={styles.container}>\n          <View style = {[styles.btn_one,{backgroundColor: '#fff'}]}>\n            <Text style = {styles.textblock}>高铁+地铁</Text>\n            <View style = {styles.cateory}></View>\n          </View>\n          <View style = {styles.btn_one}>\n            <Text style = {styles.textblock}>高铁</Text>\n          </View>\n           <View style = {styles.btn_one}>\n            <Text style = {styles.textblock}>地铁</Text>\n          </View>\n      </View>\n    );\n  }\n}\nconst styles = StyleSheet.create({\n  container: {\n    backgroundColor: '#53b8fb',\n    height: 100,\n    flexDirection: \"row\",\n    borderTopLeftRadius: 7,\n    borderTopRightRadius: 7,\n    marginTop: 100,\n  },\n  btn_one: {\n    flex: 1,\n    borderRadius: 10,\n  },\n\ncateory: {\n height:0,\n width:0,\n borderBottomWidth: 100,\n borderLeftWidth: 50,\n borderRightWidth: 50,\n borderStyle: 'solid',\n borderBottomColor: '#f00',\n borderLeftColor: 'transparent',\n borderRightColor: 'transparent',\n marginRight: 10,\n transform: [{skewX: '45deg'},{rotateX:'180deg'},{rotateY:'180deg'}],\n position: 'absolute',\n bottom: 0,\n left: 0,\n },\ntextblock: {\n    color: '#fff',\n    fontSize: 14,\n  }\n});\n```\n\n","source":"_posts/reactNativeStyle.md","raw":"---\ntitle: CRN布局样式中的一些小分享\ndate: 2020-03-10 14:54:07\ncategories: React Native\ntags: React Native\n---\n\n\n\n1.\t关于`<textInput>`输入框： `TextInput`在安卓上默认有一个底边黑线框，同时会有一些`padding`。如果要想使其看起来和`iOS`上尽量一致，则需要设置`padding: 0`，同时设置`underlineColorAndroid=\"transparent\"`来去掉底边框。加上`padding: 0 `保证不同机型上下垂直居中。\n2.\t关于省略号： crn中是通过`ellipsizeMode='tail' numberOfLines={1}`两个属性同时控制省略号…（注：这两个属性需要写在`<Text>`上，不能写在`style`里。）\n3.\t`borderRadius`不能和实现三角形样式一起使用，否则不生效；单独写`borderBottomLeftRadius`和`borderBottomRightRadius、borderTopLeftRadius、borderTopRightRadius`也不会生效。\n4.\t实现文本垂直居中的时候尽量不要使用行高，因为行高会在不同平台和机型上面表现的形式不一样，为了保险起见，根据主轴方向使用`justifyContent: ‘center’`就可以啦!\n5.\t一般设计稿的尺寸是`iphone6`的尺寸`750px`的，我们需要做个适配：\n```javascript\nconst { width, height } = Dimensions.get('window');\nlet WIDTH = width, HEIGHT = height;\nconst rem = (a) => { return a * (WIDTH / 750); };\n```\n6.\t关于`<Text>`： `Text`元素会继承`View`层的`background`: 可以给`Text`设置`backgroundColor:'transparent'`解决\n7.\t`crn`中的`width`和`height`是包含`padding`和`border`的。\n8.\t关于`Image`：可以做背景图展示，它有几个属性方法：\n`Source：{uri:string}` 进行标记图片的引用，该参数可以为一个网络url地址或者一个本地的路径\nresizeMode：缩放比例，可选参数`('cover', 'contain', 'stretch')` 该当图片的尺寸超过布局的尺寸的时候，会根据设置`Mode`进行缩放或者裁剪图片，eg：`resizeMode: Image.resizeMode.cover`\n  \n9.\t关于雪碧图`<SpriteImage>`： 雪碧图需要去根据crop裁剪图片，所以会导致在不同机型或者平台中有拉伸缩小情况。以后建议尽量不适用雪碧图。如果需要使用雪碧图也有解决方案: 通过判断机型的dpr来加载图片，安卓的dpr比较散，有1、1.5、2、3、4的，ios的dpr有2、3的。所以需要@3图和@2倍图来做下兼容：\n```javascript\n<SpriteImage style={styles.spritePic}\nsource={{ uri: PixelRatio.get() === 3 ? 'https://pic.c-ctrip.com/VacationH5Pic/taocan/sdp/n_banner/un_banner@3.png' : 'https://pic.c-ctrip.com/VacationH5Pic/taocan/sdp/n_banner/un_banner.png', imageSize: { width: 169, height: 167 }, crop }}\n>\n</SpriteImage>\n```\n\n10.\t对于小屏手机例如`320`的，可以通过`width === 320` 来进行小屏手机的一些兼容\n11.\t针对`1px`的`border`线: `border: 1 / PixelRatio.get()`\n12.\t关于`<TouchableOpacity>`：添加点击事件的标签，展示效果会有透明度的变化可以使用`activeOpacity={1}`去除透明度的变化，`<View>`外层套此标签的时候style样式尽量写在`<View>`里，之前做的时候发现写在\n`<TouchableOpacity>`这个里面出现问题。\n\n13. `crn`中的分辨率适配： `react native`中使用的尺寸单位是`pt`,是一个绝对长度，设计稿使用的是`px`，这两种尺寸换算可以通过`PixelRatio`转换。\n```javascript\nimport {PixelRatio} from 'react-native';\nconst pt2px = pt=>PixelRatio.getPixelSizeForLayoutSize(pt);\nconst px2pt = px=>PixelRatio.roundToNearestPixel(px);\n```\n\n14. 梯形+圆角\n```javascript\nimport React, { Component } from 'react';\nimport { Text, View, StyleSheet } from 'react-native';\n\nexport default class App extends Component {\n  render() {\n    return (\n      <View style={styles.container}>\n          <View style = {[styles.btn_one,{backgroundColor: '#fff'}]}>\n            <Text style = {styles.textblock}>高铁+地铁</Text>\n            <View style = {styles.cateory}></View>\n          </View>\n          <View style = {styles.btn_one}>\n            <Text style = {styles.textblock}>高铁</Text>\n          </View>\n           <View style = {styles.btn_one}>\n            <Text style = {styles.textblock}>地铁</Text>\n          </View>\n      </View>\n    );\n  }\n}\nconst styles = StyleSheet.create({\n  container: {\n    backgroundColor: '#53b8fb',\n    height: 100,\n    flexDirection: \"row\",\n    borderTopLeftRadius: 7,\n    borderTopRightRadius: 7,\n    marginTop: 100,\n  },\n  btn_one: {\n    flex: 1,\n    borderRadius: 10,\n  },\n\ncateory: {\n height:0,\n width:0,\n borderBottomWidth: 100,\n borderLeftWidth: 50,\n borderRightWidth: 50,\n borderStyle: 'solid',\n borderBottomColor: '#f00',\n borderLeftColor: 'transparent',\n borderRightColor: 'transparent',\n marginRight: 10,\n transform: [{skewX: '45deg'},{rotateX:'180deg'},{rotateY:'180deg'}],\n position: 'absolute',\n bottom: 0,\n left: 0,\n },\ntextblock: {\n    color: '#fff',\n    fontSize: 14,\n  }\n});\n```\n\n","slug":"reactNativeStyle","published":1,"updated":"2020-03-15T09:51:03.801Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7t6o2ww0011psuc7z5srdzf","content":"<ol>\n<li><p>关于<code>&lt;textInput&gt;</code>输入框： <code>TextInput</code>在安卓上默认有一个底边黑线框，同时会有一些<code>padding</code>。如果要想使其看起来和<code>iOS</code>上尽量一致，则需要设置<code>padding: 0</code>，同时设置<code>underlineColorAndroid=&quot;transparent&quot;</code>来去掉底边框。加上<code>padding: 0</code>保证不同机型上下垂直居中。</p>\n</li>\n<li><p>关于省略号： crn中是通过<code>ellipsizeMode=&#39;tail&#39; numberOfLines={1}</code>两个属性同时控制省略号…（注：这两个属性需要写在<code>&lt;Text&gt;</code>上，不能写在<code>style</code>里。）</p>\n</li>\n<li><p><code>borderRadius</code>不能和实现三角形样式一起使用，否则不生效；单独写<code>borderBottomLeftRadius</code>和<code>borderBottomRightRadius、borderTopLeftRadius、borderTopRightRadius</code>也不会生效。</p>\n</li>\n<li><p>实现文本垂直居中的时候尽量不要使用行高，因为行高会在不同平台和机型上面表现的形式不一样，为了保险起见，根据主轴方向使用<code>justifyContent: ‘center’</code>就可以啦!</p>\n</li>\n<li><p>一般设计稿的尺寸是<code>iphone6</code>的尺寸<code>750px</code>的，我们需要做个适配：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> &#123; width, height &#125; = Dimensions.get(<span class=\"string\">'window'</span>);</span><br><span class=\"line\"><span class=\"keyword\">let</span> WIDTH = width, HEIGHT = height;</span><br><span class=\"line\"><span class=\"keyword\">const</span> rem = <span class=\"function\">(<span class=\"params\">a</span>) =&gt;</span> &#123; <span class=\"keyword\">return</span> a * (WIDTH / <span class=\"number\">750</span>); &#125;;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>关于<code>&lt;Text&gt;</code>： <code>Text</code>元素会继承<code>View</code>层的<code>background</code>: 可以给<code>Text</code>设置<code>backgroundColor:&#39;transparent&#39;</code>解决</p>\n</li>\n<li><p><code>crn</code>中的<code>width</code>和<code>height</code>是包含<code>padding</code>和<code>border</code>的。</p>\n</li>\n<li><p>关于<code>Image</code>：可以做背景图展示，它有几个属性方法：<br><code>Source：{uri:string}</code> 进行标记图片的引用，该参数可以为一个网络url地址或者一个本地的路径<br>resizeMode：缩放比例，可选参数<code>(&#39;cover&#39;, &#39;contain&#39;, &#39;stretch&#39;)</code> 该当图片的尺寸超过布局的尺寸的时候，会根据设置<code>Mode</code>进行缩放或者裁剪图片，eg：<code>resizeMode: Image.resizeMode.cover</code></p>\n</li>\n<li><p>关于雪碧图<code>&lt;SpriteImage&gt;</code>： 雪碧图需要去根据crop裁剪图片，所以会导致在不同机型或者平台中有拉伸缩小情况。以后建议尽量不适用雪碧图。如果需要使用雪碧图也有解决方案: 通过判断机型的dpr来加载图片，安卓的dpr比较散，有1、1.5、2、3、4的，ios的dpr有2、3的。所以需要@3图和@2倍图来做下兼容：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;SpriteImage style=&#123;styles.spritePic&#125;</span><br><span class=\"line\">source=&#123;&#123; <span class=\"attr\">uri</span>: PixelRatio.get() === <span class=\"number\">3</span> ? <span class=\"string\">'https://pic.c-ctrip.com/VacationH5Pic/taocan/sdp/n_banner/un_banner@3.png'</span> : <span class=\"string\">'https://pic.c-ctrip.com/VacationH5Pic/taocan/sdp/n_banner/un_banner.png'</span>, <span class=\"attr\">imageSize</span>: &#123; <span class=\"attr\">width</span>: <span class=\"number\">169</span>, <span class=\"attr\">height</span>: <span class=\"number\">167</span> &#125;, crop &#125;&#125;</span><br><span class=\"line\">&gt;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/SpriteImage&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>对于小屏手机例如<code>320</code>的，可以通过<code>width === 320</code> 来进行小屏手机的一些兼容</p>\n</li>\n<li><p>针对<code>1px</code>的<code>border</code>线: <code>border: 1 / PixelRatio.get()</code></p>\n</li>\n<li><p>关于<code>&lt;TouchableOpacity&gt;</code>：添加点击事件的标签，展示效果会有透明度的变化可以使用<code>activeOpacity={1}</code>去除透明度的变化，<code>&lt;View&gt;</code>外层套此标签的时候style样式尽量写在<code>&lt;View&gt;</code>里，之前做的时候发现写在<br><code>&lt;TouchableOpacity&gt;</code>这个里面出现问题。</p>\n</li>\n<li><p><code>crn</code>中的分辨率适配： <code>react native</code>中使用的尺寸单位是<code>pt</code>,是一个绝对长度，设计稿使用的是<code>px</code>，这两种尺寸换算可以通过<code>PixelRatio</code>转换。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123;PixelRatio&#125; <span class=\"keyword\">from</span> <span class=\"string\">'react-native'</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> pt2px = <span class=\"function\"><span class=\"params\">pt</span>=&gt;</span>PixelRatio.getPixelSizeForLayoutSize(pt);</span><br><span class=\"line\"><span class=\"keyword\">const</span> px2pt = <span class=\"function\"><span class=\"params\">px</span>=&gt;</span>PixelRatio.roundToNearestPixel(px);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>梯形+圆角</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React, &#123; Component &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; Text, View, StyleSheet &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react-native'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">App</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      &lt;View style=&#123;styles.container&#125;&gt;</span><br><span class=\"line\">          &lt;View style = &#123;[styles.btn_one,&#123;<span class=\"attr\">backgroundColor</span>: <span class=\"string\">'#fff'</span>&#125;]&#125;&gt;</span><br><span class=\"line\">            &lt;Text style = &#123;styles.textblock&#125;&gt;高铁+地铁&lt;<span class=\"regexp\">/Text&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">            &lt;View style = &#123;styles.cateory&#125;&gt;&lt;/</span>View&gt;</span><br><span class=\"line\">          &lt;<span class=\"regexp\">/View&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">          &lt;View style = &#123;styles.btn_one&#125;&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">            &lt;Text style = &#123;styles.textblock&#125;&gt;高铁&lt;/</span>Text&gt;</span><br><span class=\"line\">          &lt;<span class=\"regexp\">/View&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">           &lt;View style = &#123;styles.btn_one&#125;&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">            &lt;Text style = &#123;styles.textblock&#125;&gt;地铁&lt;/</span>Text&gt;</span><br><span class=\"line\">          &lt;<span class=\"regexp\">/View&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">      &lt;/</span>View&gt;</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> styles = StyleSheet.create(&#123;</span><br><span class=\"line\">  container: &#123;</span><br><span class=\"line\">    backgroundColor: <span class=\"string\">'#53b8fb'</span>,</span><br><span class=\"line\">    height: <span class=\"number\">100</span>,</span><br><span class=\"line\">    flexDirection: <span class=\"string\">\"row\"</span>,</span><br><span class=\"line\">    borderTopLeftRadius: <span class=\"number\">7</span>,</span><br><span class=\"line\">    borderTopRightRadius: <span class=\"number\">7</span>,</span><br><span class=\"line\">    marginTop: <span class=\"number\">100</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  btn_one: &#123;</span><br><span class=\"line\">    flex: <span class=\"number\">1</span>,</span><br><span class=\"line\">    borderRadius: <span class=\"number\">10</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">cateory: &#123;</span><br><span class=\"line\"> height:<span class=\"number\">0</span>,</span><br><span class=\"line\"> width:<span class=\"number\">0</span>,</span><br><span class=\"line\"> borderBottomWidth: <span class=\"number\">100</span>,</span><br><span class=\"line\"> borderLeftWidth: <span class=\"number\">50</span>,</span><br><span class=\"line\"> borderRightWidth: <span class=\"number\">50</span>,</span><br><span class=\"line\"> borderStyle: <span class=\"string\">'solid'</span>,</span><br><span class=\"line\"> borderBottomColor: <span class=\"string\">'#f00'</span>,</span><br><span class=\"line\"> borderLeftColor: <span class=\"string\">'transparent'</span>,</span><br><span class=\"line\"> borderRightColor: <span class=\"string\">'transparent'</span>,</span><br><span class=\"line\"> marginRight: <span class=\"number\">10</span>,</span><br><span class=\"line\"> transform: [&#123;<span class=\"attr\">skewX</span>: <span class=\"string\">'45deg'</span>&#125;,&#123;<span class=\"attr\">rotateX</span>:<span class=\"string\">'180deg'</span>&#125;,&#123;<span class=\"attr\">rotateY</span>:<span class=\"string\">'180deg'</span>&#125;],</span><br><span class=\"line\"> position: <span class=\"string\">'absolute'</span>,</span><br><span class=\"line\"> bottom: <span class=\"number\">0</span>,</span><br><span class=\"line\"> left: <span class=\"number\">0</span>,</span><br><span class=\"line\"> &#125;,</span><br><span class=\"line\">textblock: &#123;</span><br><span class=\"line\">    color: <span class=\"string\">'#fff'</span>,</span><br><span class=\"line\">    fontSize: <span class=\"number\">14</span>,</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<ol>\n<li><p>关于<code>&lt;textInput&gt;</code>输入框： <code>TextInput</code>在安卓上默认有一个底边黑线框，同时会有一些<code>padding</code>。如果要想使其看起来和<code>iOS</code>上尽量一致，则需要设置<code>padding: 0</code>，同时设置<code>underlineColorAndroid=&quot;transparent&quot;</code>来去掉底边框。加上<code>padding: 0</code>保证不同机型上下垂直居中。</p>\n</li>\n<li><p>关于省略号： crn中是通过<code>ellipsizeMode=&#39;tail&#39; numberOfLines={1}</code>两个属性同时控制省略号…（注：这两个属性需要写在<code>&lt;Text&gt;</code>上，不能写在<code>style</code>里。）</p>\n</li>\n<li><p><code>borderRadius</code>不能和实现三角形样式一起使用，否则不生效；单独写<code>borderBottomLeftRadius</code>和<code>borderBottomRightRadius、borderTopLeftRadius、borderTopRightRadius</code>也不会生效。</p>\n</li>\n<li><p>实现文本垂直居中的时候尽量不要使用行高，因为行高会在不同平台和机型上面表现的形式不一样，为了保险起见，根据主轴方向使用<code>justifyContent: ‘center’</code>就可以啦!</p>\n</li>\n<li><p>一般设计稿的尺寸是<code>iphone6</code>的尺寸<code>750px</code>的，我们需要做个适配：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> &#123; width, height &#125; = Dimensions.get(<span class=\"string\">'window'</span>);</span><br><span class=\"line\"><span class=\"keyword\">let</span> WIDTH = width, HEIGHT = height;</span><br><span class=\"line\"><span class=\"keyword\">const</span> rem = <span class=\"function\">(<span class=\"params\">a</span>) =&gt;</span> &#123; <span class=\"keyword\">return</span> a * (WIDTH / <span class=\"number\">750</span>); &#125;;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>关于<code>&lt;Text&gt;</code>： <code>Text</code>元素会继承<code>View</code>层的<code>background</code>: 可以给<code>Text</code>设置<code>backgroundColor:&#39;transparent&#39;</code>解决</p>\n</li>\n<li><p><code>crn</code>中的<code>width</code>和<code>height</code>是包含<code>padding</code>和<code>border</code>的。</p>\n</li>\n<li><p>关于<code>Image</code>：可以做背景图展示，它有几个属性方法：<br><code>Source：{uri:string}</code> 进行标记图片的引用，该参数可以为一个网络url地址或者一个本地的路径<br>resizeMode：缩放比例，可选参数<code>(&#39;cover&#39;, &#39;contain&#39;, &#39;stretch&#39;)</code> 该当图片的尺寸超过布局的尺寸的时候，会根据设置<code>Mode</code>进行缩放或者裁剪图片，eg：<code>resizeMode: Image.resizeMode.cover</code></p>\n</li>\n<li><p>关于雪碧图<code>&lt;SpriteImage&gt;</code>： 雪碧图需要去根据crop裁剪图片，所以会导致在不同机型或者平台中有拉伸缩小情况。以后建议尽量不适用雪碧图。如果需要使用雪碧图也有解决方案: 通过判断机型的dpr来加载图片，安卓的dpr比较散，有1、1.5、2、3、4的，ios的dpr有2、3的。所以需要@3图和@2倍图来做下兼容：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;SpriteImage style=&#123;styles.spritePic&#125;</span><br><span class=\"line\">source=&#123;&#123; <span class=\"attr\">uri</span>: PixelRatio.get() === <span class=\"number\">3</span> ? <span class=\"string\">'https://pic.c-ctrip.com/VacationH5Pic/taocan/sdp/n_banner/un_banner@3.png'</span> : <span class=\"string\">'https://pic.c-ctrip.com/VacationH5Pic/taocan/sdp/n_banner/un_banner.png'</span>, <span class=\"attr\">imageSize</span>: &#123; <span class=\"attr\">width</span>: <span class=\"number\">169</span>, <span class=\"attr\">height</span>: <span class=\"number\">167</span> &#125;, crop &#125;&#125;</span><br><span class=\"line\">&gt;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/SpriteImage&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>对于小屏手机例如<code>320</code>的，可以通过<code>width === 320</code> 来进行小屏手机的一些兼容</p>\n</li>\n<li><p>针对<code>1px</code>的<code>border</code>线: <code>border: 1 / PixelRatio.get()</code></p>\n</li>\n<li><p>关于<code>&lt;TouchableOpacity&gt;</code>：添加点击事件的标签，展示效果会有透明度的变化可以使用<code>activeOpacity={1}</code>去除透明度的变化，<code>&lt;View&gt;</code>外层套此标签的时候style样式尽量写在<code>&lt;View&gt;</code>里，之前做的时候发现写在<br><code>&lt;TouchableOpacity&gt;</code>这个里面出现问题。</p>\n</li>\n<li><p><code>crn</code>中的分辨率适配： <code>react native</code>中使用的尺寸单位是<code>pt</code>,是一个绝对长度，设计稿使用的是<code>px</code>，这两种尺寸换算可以通过<code>PixelRatio</code>转换。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123;PixelRatio&#125; <span class=\"keyword\">from</span> <span class=\"string\">'react-native'</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> pt2px = <span class=\"function\"><span class=\"params\">pt</span>=&gt;</span>PixelRatio.getPixelSizeForLayoutSize(pt);</span><br><span class=\"line\"><span class=\"keyword\">const</span> px2pt = <span class=\"function\"><span class=\"params\">px</span>=&gt;</span>PixelRatio.roundToNearestPixel(px);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>梯形+圆角</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React, &#123; Component &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; Text, View, StyleSheet &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react-native'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">App</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      &lt;View style=&#123;styles.container&#125;&gt;</span><br><span class=\"line\">          &lt;View style = &#123;[styles.btn_one,&#123;<span class=\"attr\">backgroundColor</span>: <span class=\"string\">'#fff'</span>&#125;]&#125;&gt;</span><br><span class=\"line\">            &lt;Text style = &#123;styles.textblock&#125;&gt;高铁+地铁&lt;<span class=\"regexp\">/Text&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">            &lt;View style = &#123;styles.cateory&#125;&gt;&lt;/</span>View&gt;</span><br><span class=\"line\">          &lt;<span class=\"regexp\">/View&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">          &lt;View style = &#123;styles.btn_one&#125;&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">            &lt;Text style = &#123;styles.textblock&#125;&gt;高铁&lt;/</span>Text&gt;</span><br><span class=\"line\">          &lt;<span class=\"regexp\">/View&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">           &lt;View style = &#123;styles.btn_one&#125;&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">            &lt;Text style = &#123;styles.textblock&#125;&gt;地铁&lt;/</span>Text&gt;</span><br><span class=\"line\">          &lt;<span class=\"regexp\">/View&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">      &lt;/</span>View&gt;</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> styles = StyleSheet.create(&#123;</span><br><span class=\"line\">  container: &#123;</span><br><span class=\"line\">    backgroundColor: <span class=\"string\">'#53b8fb'</span>,</span><br><span class=\"line\">    height: <span class=\"number\">100</span>,</span><br><span class=\"line\">    flexDirection: <span class=\"string\">\"row\"</span>,</span><br><span class=\"line\">    borderTopLeftRadius: <span class=\"number\">7</span>,</span><br><span class=\"line\">    borderTopRightRadius: <span class=\"number\">7</span>,</span><br><span class=\"line\">    marginTop: <span class=\"number\">100</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  btn_one: &#123;</span><br><span class=\"line\">    flex: <span class=\"number\">1</span>,</span><br><span class=\"line\">    borderRadius: <span class=\"number\">10</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">cateory: &#123;</span><br><span class=\"line\"> height:<span class=\"number\">0</span>,</span><br><span class=\"line\"> width:<span class=\"number\">0</span>,</span><br><span class=\"line\"> borderBottomWidth: <span class=\"number\">100</span>,</span><br><span class=\"line\"> borderLeftWidth: <span class=\"number\">50</span>,</span><br><span class=\"line\"> borderRightWidth: <span class=\"number\">50</span>,</span><br><span class=\"line\"> borderStyle: <span class=\"string\">'solid'</span>,</span><br><span class=\"line\"> borderBottomColor: <span class=\"string\">'#f00'</span>,</span><br><span class=\"line\"> borderLeftColor: <span class=\"string\">'transparent'</span>,</span><br><span class=\"line\"> borderRightColor: <span class=\"string\">'transparent'</span>,</span><br><span class=\"line\"> marginRight: <span class=\"number\">10</span>,</span><br><span class=\"line\"> transform: [&#123;<span class=\"attr\">skewX</span>: <span class=\"string\">'45deg'</span>&#125;,&#123;<span class=\"attr\">rotateX</span>:<span class=\"string\">'180deg'</span>&#125;,&#123;<span class=\"attr\">rotateY</span>:<span class=\"string\">'180deg'</span>&#125;],</span><br><span class=\"line\"> position: <span class=\"string\">'absolute'</span>,</span><br><span class=\"line\"> bottom: <span class=\"number\">0</span>,</span><br><span class=\"line\"> left: <span class=\"number\">0</span>,</span><br><span class=\"line\"> &#125;,</span><br><span class=\"line\">textblock: &#123;</span><br><span class=\"line\">    color: <span class=\"string\">'#fff'</span>,</span><br><span class=\"line\">    fontSize: <span class=\"number\">14</span>,</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"ck7t6o2uk0000psucw0rcs6kb","category_id":"ck7t6o2v40004psuc4oqozfyv","_id":"ck7t6o2vx000gpsucduryok7s"},{"post_id":"ck7t6o2uv0002psuc489zh4bz","category_id":"ck7t6o2vm000bpsucesocaxjk","_id":"ck7t6o2wa000opsucloddozkl"},{"post_id":"ck7t6o2vv000fpsuc2v8p4f81","category_id":"ck7t6o2v40004psuc4oqozfyv","_id":"ck7t6o2wg000spsuc0il9jeg9"},{"post_id":"ck7t6o2w3000jpsucxi5e6s60","category_id":"ck7t6o2v40004psuc4oqozfyv","_id":"ck7t6o2wm000vpsucz66nduun"},{"post_id":"ck7t6o2v90006psuc4hgxbmql","category_id":"ck7t6o2v40004psuc4oqozfyv","_id":"ck7t6o2wv0010psuckpyfxede"},{"post_id":"ck7t6o2wd000qpsuc8v3etzxw","category_id":"ck7t6o2vm000bpsucesocaxjk","_id":"ck7t6o2x10013psuc0pc4vb3x"},{"post_id":"ck7t6o2ve0008psuckiriw14w","category_id":"ck7t6o2w9000npsucooc7gjzm","_id":"ck7t6o2x70017psuc69hxq9be"},{"post_id":"ck7t6o2wi000tpsuc24iiweju","category_id":"ck7t6o2v40004psuc4oqozfyv","_id":"ck7t6o2x90019psucp6v4usdi"},{"post_id":"ck7t6o2vj000apsucl7iqwabx","category_id":"ck7t6o2vm000bpsucesocaxjk","_id":"ck7t6o2xe001cpsucob7plfgg"},{"post_id":"ck7t6o2vr000epsucau3irs2v","category_id":"ck7t6o2x20014psuczeqlh49b","_id":"ck7t6o2xi001fpsucdjaz5g8a"},{"post_id":"ck7t6o2w6000lpsuczs88g2w0","category_id":"ck7t6o2x20014psuczeqlh49b","_id":"ck7t6o2xn001ipsucm3ig7n1t"},{"post_id":"ck7t6o2wr000ypsucqiil1j24","category_id":"ck7t6o2xh001epsucrq83t1fr","_id":"ck7t6o2xt001mpsucho9nu79e"},{"post_id":"ck7t6o2ww0011psuc7z5srdzf","category_id":"ck7t6o2xh001epsucrq83t1fr","_id":"ck7t6o2xw001opsuccve7xzwd"}],"PostTag":[{"post_id":"ck7t6o2uk0000psucw0rcs6kb","tag_id":"ck7t6o2v80005psucpn2bmxsn","_id":"ck7t6o2vp000dpsucqalo9om6"},{"post_id":"ck7t6o2uv0002psuc489zh4bz","tag_id":"ck7t6o2vn000cpsucm6fga5ph","_id":"ck7t6o2w5000kpsucyh22n37u"},{"post_id":"ck7t6o2vv000fpsuc2v8p4f81","tag_id":"ck7t6o2v80005psucpn2bmxsn","_id":"ck7t6o2w8000mpsucrc576hr0"},{"post_id":"ck7t6o2w3000jpsucxi5e6s60","tag_id":"ck7t6o2v80005psucpn2bmxsn","_id":"ck7t6o2wf000rpsuczldfped7"},{"post_id":"ck7t6o2v90006psuc4hgxbmql","tag_id":"ck7t6o2v80005psucpn2bmxsn","_id":"ck7t6o2wl000upsuc1tyqpxze"},{"post_id":"ck7t6o2wd000qpsuc8v3etzxw","tag_id":"ck7t6o2vn000cpsucm6fga5ph","_id":"ck7t6o2wu000zpsucfofq3t93"},{"post_id":"ck7t6o2ve0008psuckiriw14w","tag_id":"ck7t6o2wb000ppsuc4774jxmp","_id":"ck7t6o2wz0012psuczdugbirh"},{"post_id":"ck7t6o2wi000tpsuc24iiweju","tag_id":"ck7t6o2v80005psucpn2bmxsn","_id":"ck7t6o2x50016psucn9i2cgrd"},{"post_id":"ck7t6o2vj000apsucl7iqwabx","tag_id":"ck7t6o2vn000cpsucm6fga5ph","_id":"ck7t6o2x80018psucu42qrx0b"},{"post_id":"ck7t6o2vr000epsucau3irs2v","tag_id":"ck7t6o2x30015psucvbv2fmr6","_id":"ck7t6o2xg001dpsucpq91pkej"},{"post_id":"ck7t6o2w6000lpsuczs88g2w0","tag_id":"ck7t6o2x30015psucvbv2fmr6","_id":"ck7t6o2xl001hpsucbrnxpua3"},{"post_id":"ck7t6o2wr000ypsucqiil1j24","tag_id":"ck7t6o2xj001gpsucvakduf2v","_id":"ck7t6o2xs001lpsuc1gzbpd49"},{"post_id":"ck7t6o2ww0011psuc7z5srdzf","tag_id":"ck7t6o2xj001gpsucvakduf2v","_id":"ck7t6o2xv001npsuc65zn55ep"}],"Tag":[{"name":"前端","_id":"ck7t6o2v80005psucpn2bmxsn"},{"name":"网络","_id":"ck7t6o2vn000cpsucm6fga5ph"},{"name":"笔记","_id":"ck7t6o2wb000ppsuc4774jxmp"},{"name":"随笔","_id":"ck7t6o2x30015psucvbv2fmr6"},{"name":"React Native","_id":"ck7t6o2xj001gpsucvakduf2v"}]}}